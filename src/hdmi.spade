use std::mem::clocked_memory;
use std::mem::read_memory;
use std::io::rising_edge;
use std::ports::new_mut_wire;
use std::ports::read_mut_wire;
use std::conv::uint_to_int;
use std::conv::int_to_uint;

use hdmi::main::VgaTiming;
use hdmi::main::VgaOutput;
use hdmi::main::vga_output;
use hdmi::main::vga_fsm;

use hdmi::vga2dvid::DviOut;
use hdmi::vga2dvid::vga2dvid;
use hdmi::plls::pll_1366_768_30;
use hdmi::plls::pll_640_480_60;
use hdmi::plls::Clocks;
use hdmi::ecp5stubs::oddrx1f;
use hdmi::hacks::unlaunder_clock;

use ulx3s_sdram::avalon::AvalonPort;

use lib::pixel_ram::PixelRamR;
use lib::pixel_ram::read_pixel_ram;
use lib::block_read_cache::block_read_cache;

use csi2::uart_config::Command;

struct ConfigRegs {
    r_gain: uint<9>,
    g_gain: uint<9>,
    b_gain: uint<9>,
}

entity config_reg<T>(
    clk: clock,
    rst: bool,
    default: uint<16>,
    command: Option<Command>,
    addr: uint<8>
) -> uint<16> {
    reg(clk) val reset(rst: default) = match command {
        Some(Command$(target: 1, payload)) => if addr == payload[0] {
            payload[1] `concat` payload[2]
        } else {
            val
        },
        _ => val
    };

    val
}

entity config_regs(clk: clock, rst: bool, command: Option<Command>) -> ConfigRegs {
    ConfigRegs$(
        r_gain: trunc(inst config_reg$(clk, rst, default: 255, command, addr: 100)),
        g_gain: trunc(inst config_reg$(clk, rst, default: 255, command, addr: 101)),
        b_gain: trunc(inst config_reg$(clk, rst, default: 255, command, addr: 102)),
    )
}

fn correct_colors(color: uint<8>, gain: uint<9>) -> uint<8> {
    let scaled = color * gain;
    if scaled >= (1 << 16) {
        255
    } else {
        trunc(scaled >> 8)
    }
}

struct HdmiDbg {
    cache: lib::block_read_cache::BlockReadCacheDebug,
    pixel: Option<(int<15>, int<15>)>,
    r: uint<8>,
    g: uint<8>,
    b: uint<8>,
}

#[no_mangle]
pipeline(8) hdmi_out_impl(
    vga_clk: clock,
    rst: bool,
    clk_shift: clock,

    command: Option<Command>,

    dbg: &mut HdmiDbg,

    dram_clk: clock,
    avalons: (AvalonPort, AvalonPort, AvalonPort)
) -> DviOut {
        // let x_pixels = 640;
        // let y_pixels = 480;
        // let timing = VgaTiming$(
        //     x_pixels: x_pixels,
        //     x_front_porch: 71,
        //     x_sync_width: 71,
        //     x_back_porch: 73,
        //     y_pixels: y_pixels,
        //     y_front_porch: 2,
        //     y_sync_width: 2,
        //     y_back_porch: 3,
        // );

        // let x_pixels = 1024;
        // let y_pixels = 600;
        // // These timings are from https://tomverbeure.github.io/video_timings_calculator
        // let timing = VgaTiming$(
        //     x_pixels: x_pixels,
        //     x_front_porch: 40,
        //     x_sync_width: 104,
        //     x_back_porch: 144,
        //     y_pixels: y_pixels,
        //     y_front_porch: 3,
        //     y_sync_width: 10,
        //     y_back_porch: 11,
        // );

        let x_pixels = 480;
        let xblocks_to_fetch = zext(int_to_uint(x_pixels >> 4));
        let y_pixels = 800;
        // These timings are from https://tomverbeure.github.io/video_timings_calculator
        let timing = VgaTiming$(
            x_pixels: x_pixels,
            x_front_porch: 24,
            x_sync_width: 48,
            x_back_porch: 72,
            y_pixels: y_pixels,
            y_front_porch: 3,
            y_sync_width: 10,
            y_back_porch: 18,
        );

        // let image_x_pixels = 1024;

        let vga_state = inst vga_fsm$(clk: vga_clk, rst, clk_enable: true, timing);
        let vga_out = vga_output(vga_state);
        let VgaOutput$(hsync, vsync, blank, pixel) = vga_out;

    reg;
        let brc_dbg = inst new_mut_wire();
        let brc_out = inst(1) block_read_cache::<64>$(
            pixel_clk: vga_clk,
            rst,
            pixel_read_addr: match pixel {
                Some((x, y)) => Some((zext(int_to_uint(x)), zext(int_to_uint(y)))),
                None => None
            },
            image_data: lib::block_read_cache::ImageData$(
                block_height: zext(int_to_uint(y_pixels >> 3)),
                numxpixels: 1024,
                numxblocks: 64,
            ),
            frame_data: lib::block_read_cache::FrameData$(
                numxpixels: zext(int_to_uint(x_pixels)),
            ),
            avalon0: avalons#0,
            avalon1: avalons#1,
            avalon2: avalons#2,

            xblocks_to_fetch,

            dbg: brc_dbg,

            dram_clk,
        );
    reg;

        let x_even = match pixel {
            Some((x, y)) => (x & 1) == 0,
            None => false
        };
        let ba = if !x_even {
            [
                [trunc(brc_out[0][0] >> 8), trunc(brc_out[0][1] >> 8), trunc(brc_out[0][1]) ],
                [trunc(brc_out[1][0] >> 8), trunc(brc_out[1][1] >> 8), trunc(brc_out[1][1]) ],
                [trunc(brc_out[2][0] >> 8), trunc(brc_out[2][1] >> 8), trunc(brc_out[2][1]) ]
            ]
        } else {
            [
                [trunc(brc_out[0][1] >> 8), trunc(brc_out[0][1]), trunc(brc_out[0][2] >> 8) ],
                [trunc(brc_out[1][1] >> 8), trunc(brc_out[1][1]), trunc(brc_out[1][2] >> 8) ],
                [trunc(brc_out[2][1] >> 8), trunc(brc_out[2][1]), trunc(brc_out[2][2] >> 8) ]
            ]
        };
    reg;

        // let line = brc_out;
    reg;

        let (r_raw, g_raw, b_raw) = match pixel {
            Some((x, y)) => {
                // (trunc(brc_out[0][0]), trunc(brc_out[0][0]), trunc(brc_out[0][0]))
                let (x_odd, y_odd) = ((x & 1) == 1, (y & 1) == 1);

                let _127: uint<8> = 127;
                let _128: uint<8> = 8;
                let left_right = zext((ba[1][0] + ba[1][2]) >> 1);
                let up_down = zext((_127 + _128) >> 1);
                let plus = ((ba[1][0] +  ba[1][2]) + (ba[0][1] + ba[2][1])) >> 2;
                let cross = ((ba[0][0] + ba[0][2]) + (ba[2][0] + ba[2][2])) >> 2;

                // NOTE: The line array is indexed [y][x]
                let r: uint<10> = match (x_odd, y_odd) {
                    // Look left, look right
                    (false, false) => left_right,
                    // 4 corners
                    (false, true) => cross,
                    // On top
                    (true, false) => zext(ba[1][1]),
                    // Look up, look down
                    (true, true) => up_down
                };
                let g: uint<10> = match (x_odd, y_odd) {
                    // On top
                    (false, false) => zext(ba[1][1]),
                    // Plus shapes
                    (false, true) => plus,
                    (true, false) => plus,
                    // Also on top
                    (true, true) => zext(ba[1][1])
                };
                let b: uint<10> = match (x_odd, y_odd) {
                    // Look up, look down
                    (false, false) => up_down,
                    // On top
                    (false, true) => zext(ba[1][1]),
                    // 4 corners
                    (true, false) => cross,
                    // Look left, look right
                    (true, true) => left_right,
                };
                (trunc(r), trunc(g), trunc(b))
            },
            None => (0, 0, 0)
        };

        set dbg = HdmiDbg(inst read_mut_wire(brc_dbg), pixel, r_raw, g_raw, b_raw);
    reg*3;

        let ConfigRegs$(r_gain, g_gain, b_gain) = inst config_regs(vga_clk, rst, command);
        // These are 16 bit fixedpoint numbers corresponding to the gains shown on page 87 of the
        // camera datasheet
        // let b_adjust = 320;
        // let g_adjust = 255;
        // let r_adjust = 275;
        // let color = (uint_to_int(r_raw), uint_to_int(g_raw), uint_to_int(b_raw));
        let color = (
            uint_to_int(correct_colors(r_raw, r_gain)),
            uint_to_int(correct_colors(g_raw, g_gain)),
            uint_to_int(correct_colors(b_raw, b_gain)),
        );

    reg;

        inst vga2dvid$(
            clk_pixel: vga_clk,
            clk_shift,
            rst,
            hsync,
            vsync,
            blank,
            color
        )
}

pipeline(8) hdmi_out(
    vga_clk: clock,
    rst: bool,
    clk_shift: clock,
    gpdi_dp: &mut [bool; 4],

    command: Option<Command>,

    dbg: &mut HdmiDbg,

    dram_clk: clock,
    avalons: (AvalonPort, AvalonPort, AvalonPort)
) {

        let dvi = inst(8) hdmi_out_impl$(vga_clk, rst, clk_shift, command, dbg, dram_clk, avalons);
    reg*8;
        set gpdi_dp = [
            inst oddrx1f(clk_shift, false, dvi.b),
            inst oddrx1f(clk_shift, false, dvi.g),
            inst oddrx1f(clk_shift, false, dvi.r),
            inst oddrx1f(clk_shift, false, dvi.clock),
        ];
}


#[no_mangle]
entity hdmi_out_th(
    #[no_mangle] vga_clk: clock,
    #[no_mangle] rst: bool,
    #[no_mangle] clk_shift: clock,

    #[no_mangle] dram_clk: clock,

    #[no_mangle] out_x: &mut int<15>,
    #[no_mangle] out_y: &mut int<15>,
    #[no_mangle] out_r: &mut uint<8>,
    #[no_mangle] out_g: &mut uint<8>,
    #[no_mangle] out_b: &mut uint<8>,

    #[no_mangle] av0_address: &mut uint<24>,
    #[no_mangle] av0_burstcount: &mut uint<8>,
    #[no_mangle] av0_read: &mut bool,
    #[no_mangle] av0_readdata: &uint<16>,
    #[no_mangle] av0_readdatavalid: &bool,
    #[no_mangle] av0_waitrequest: &bool,

    #[no_mangle] av1_address: &mut uint<24>,
    #[no_mangle] av1_burstcount: &mut uint<8>,
    #[no_mangle] av1_read: &mut bool,
    #[no_mangle] av1_readdata: &uint<16>,
    #[no_mangle] av1_readdatavalid: &bool,
    #[no_mangle] av1_waitrequest: &bool,

    #[no_mangle] av2_address: &mut uint<24>,
    #[no_mangle] av2_burstcount: &mut uint<8>,
    #[no_mangle] av2_read: &mut bool,
    #[no_mangle] av2_readdata: &uint<16>,
    #[no_mangle] av2_readdatavalid: &bool,
    #[no_mangle] av2_waitrequest: &bool,
) -> bool {
    let av0 = AvalonPort$(
        address: av0_address,
        burstcount: av0_burstcount,
        byteenable: inst new_mut_wire(),
        read: av0_read,
        readdata: av0_readdata,
        readdatavalid: av0_readdatavalid,
        waitrequest: av0_waitrequest,
        write: inst new_mut_wire(),
        writedata: inst new_mut_wire(),
    );
    let av1 = AvalonPort$(
        address: av1_address,
        burstcount: av1_burstcount,
        byteenable: inst new_mut_wire(),
        read: av1_read,
        readdata: av1_readdata,
        readdatavalid: av1_readdatavalid,
        waitrequest: av1_waitrequest,
        write: inst new_mut_wire(),
        writedata: inst new_mut_wire(),
    );
    let av2 = AvalonPort$(
        address: av2_address,
        burstcount: av2_burstcount,
        byteenable: inst new_mut_wire(),
        read: av2_read,
        readdata: av2_readdata,
        readdatavalid: av2_readdatavalid,
        waitrequest: av2_waitrequest,
        write: inst new_mut_wire(),
        writedata: inst new_mut_wire(),
    );

    let dbg = inst new_mut_wire();
    let _ = inst(8) hdmi_out_impl$(
        avalons: (av0, av1, av2),
        clk_shift,
        command: None,
        dram_clk,
        vga_clk,
        rst,
        dbg: dbg
    );

    let (x, y) = match inst read_mut_wire(dbg).pixel {
        Some((x, y)) => (x, y),
        None => (0, 0),
    };
    set out_x = x;
    set out_y = y;
    set out_r = inst read_mut_wire(dbg).r;
    set out_g = inst read_mut_wire(dbg).g;
    set out_b = inst read_mut_wire(dbg).b;
    true
}
