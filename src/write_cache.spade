use std::ports::new_mut_wire;
use std::ports::read_mut_wire;

use ulx3s_sdram::avalon::AvalonPort;
use ulx3s_sdram::avalon::CtrlSignals;
use ulx3s_sdram::avalon::ctrl_unused;

use std::cdc::handshake;
use std::mem::fifo;

enum WriterState {
    WaitStart{next_addr: uint<24>},
    Burst{next_addr: uint<24>, start_addr: uint<24>, burst_length: uint<8>, num_left: uint<8>}
}

struct WriteCacheDebug {
    full: bool,
    wait_start: bool,
    reading_garbage: bool,
    write: bool,
}

entity write_cache(
    camera_clk: clock,
    rst: bool,
    write: Option<uint<16>>,
    is_frame_start: bool,

    dram_clk: clock,
    avalon: AvalonPort,

    dbg: &mut WriteCacheDebug,
) {
    // NOTE: We may want to separate read reset from write reset.
    let (fifo_write, fifo_read) = inst fifo::<13, uint<16>, 8192>$(
        write_clk: camera_clk,
        write_rst: rst,
        read_clk: dram_clk,
        read_rst: rst,
    );

    // NOTE: Assumes that the FIFO is big enough to not fill up
    set fifo_write.write = write;

    let is_frame_start_dram = match inst handshake(
        camera_clk,
        rst,
        if is_frame_start {Some(true)} else {None},
        dram_clk,
    ) {
        Some(_) => true,
        _ => false,
    };

    reg(dram_clk) state reset(rst: WriterState::WaitStart(0)) =
        match (*avalon.waitrequest, state) {
            (_, WriterState::WaitStart$(next_addr)) => {
                // If we're starting a new frame, we better write the remnants of
                // the last frame now
                if is_frame_start_dram {
                    WriterState::Burst$(
                        next_addr: 0,
                        start_addr: next_addr,
                        burst_length: trunc(*fifo_read.num_elements),
                        num_left: trunc(*fifo_read.num_elements)
                    )
                } else if (*fifo_read.num_elements) >= 128 {
                    WriterState::Burst$(
                        next_addr: trunc(next_addr + 128),
                        start_addr: next_addr,
                        burst_length: 128,
                        num_left: 128,
                    )
                } else {
                    WriterState::WaitStart$(next_addr)
                }
            },
            (true, _) => state,
            (false, WriterState::Burst$(next_addr, start_addr, burst_length, num_left: 1)) => {
                WriterState::WaitStart(next_addr)
            },
            (false, WriterState::Burst$(next_addr, start_addr, burst_length, num_left)) => {
                WriterState::Burst$(next_addr, start_addr, burst_length, num_left: trunc(num_left - 1))
            }
        };


    let ctrl = match state {
        WriterState::WaitStart(_) => ctrl_unused(),
        WriterState::Burst$(next_addr, start_addr, num_left, burst_length) => {
            CtrlSignals$(
                address: start_addr,
                // We only need to set this on the first burst, but it is
                // easier to keep it set constantly
                burstcount: burst_length,
                byteenable: 0b11,
                read: false,
                write: true,
                writedata: match *fifo_read.read {
                    Some(d) => d,
                    None => 0,
                },
            )
        }
    };

    set fifo_read.ack = match (state, *avalon.waitrequest) {
        (WriterState::Burst(_, _, _, _), false) => true,
        _ => false
    };

    set dbg = WriteCacheDebug$(
        full: *fifo_write.full,
        wait_start: match state {
            WriterState::WaitStart(_) => true,
            _ => false,
        },
        reading_garbage: match (state, *fifo_read.read) {
            (WriterState::Burst(_, _, _, _), None) => true,
            _ => false,
        },
        write: match write {
            Some(_) => true,
            _ => false,
        },
    );

    let _ = avalon.inst with_control_signals(ctrl);
}



entity write_cache_test_harness(
    camera_clk: clock,
    rst: bool,
    write: Option<uint<16>>,
    is_frame_start: bool,

    dram_clk: clock,
    av_waitrequest: bool,
) -> bool {
    let avalon =
        AvalonPort$(
            address: inst new_mut_wire(),
            burstcount: inst new_mut_wire(),
            byteenable: inst new_mut_wire(),
            read: inst new_mut_wire(),
            readdata: &0,
            readdatavalid: &false,
            waitrequest: &av_waitrequest,
            write: inst new_mut_wire(),
            writedata: inst new_mut_wire(),
        );

    let _ = inst write_cache$(
        camera_clk,
        rst,
        write,
        is_frame_start,
        dram_clk,
        avalon,
        dbg: inst new_mut_wire(),
    );

    // Currently only manual inspection
    false
}
