use std::mem::clocked_memory;
use std::mem::read_memory;
use std::ports::read_mut_wire;
use std::ports::new_mut_wire;

use ulx3s_sdram::avalon::AvalonPort;

struct port PixelRamR {
    addr: &mut uint<19>,
    value: &uint<8>,
}

pipeline(1) read_pixel_ram(read_clk: clock, p: PixelRamR, addr: uint<19>) -> uint<8> {
        set p.addr = addr;
    reg;
        *p.value
}

struct port PixelRamW {
    addr: &mut uint<19>,
    value: &mut Option<uint<8>>,
}

entity new_write_port() -> PixelRamW {
    PixelRamW$(
        addr: inst new_mut_wire(),
        value: inst new_mut_wire(),
    )
}


struct port PixelRamPorts {
    write: (PixelRamW, PixelRamW),
    read: PixelRamR
}

pipeline(1) pixel_ram(read_clk: clock, sys_clk: clock) -> PixelRamPorts {
        let (p1, p2) = (inst new_write_port(), inst new_write_port());
        let read_addr_port = inst new_mut_wire();

        let w1 = match inst read_mut_wire(p1.value) {
            Some(val) => (true, trunc(inst read_mut_wire(p1.addr)), val),
            None => (false, 0, 0)
        };
        let w2 = match inst read_mut_wire(p2.value) {
            Some(val) => (true, trunc(inst read_mut_wire(p2.addr)), val),
            None => (false, 0, 0)
        };

        let mem0: Memory<uint<8>, 153600> = inst clocked_memory(sys_clk, [w1]);
        let mem1: Memory<uint<8>, 153600> = inst clocked_memory(sys_clk, [w2]);

        let read_addr = inst read_mut_wire(read_addr_port);
        let r0 = inst read_memory(mem0, trunc(read_addr >> 1));
        let r1 = inst read_memory(mem1, trunc(read_addr >> 1));
    reg;
        let read_out = if (read_addr & 1) == 1 { r1 } else { r0 };

        PixelRamPorts$(
            write: (p1, p2),
            read: PixelRamR$(addr: read_addr_port, value: &read_out)
        )
}


// struct PixelCacheState {
//     full: bool,
//     empty: bool,
// }
// 
// 
// pipeline(1) pixel_cache(
//     // Pipelined in the dram domain because that is where writes happen
//     dram_clk: clock,
//     rst: bool,
// 
//     sys_clk: clock,
//     write: Option<uint<16>>,
//     base_addr: Option<uint<24>>,
// 
// ) -> PixelCacheState {
// 
// }
// 
// 
// // Assumptions:
// //  Writes are sequential for the most part. Only unsequential when wraping around
// //   This means we only need 2 caches. When one cache is full, dump its contents onto
// //   the dram and fill the other one
// //   All this must cross into the DRAM domain
// pipeline(1) pixel_sdram_writer(
//     // Pipelined in the dram domain because that is where writes happen
//     dram_clk: clock,
//     sys_clk: clock,
//     rst: bool,
//     write: Option<(uint<24, uint<8>)>,
// ) {
//     reg(clk) last_addr = match write {
//         Some((addr, _)) => addr,
//         None => last_addr
//     };
// 
//     let switch_cache = match write {
//         Some((addr, _)) => last_addr != addr+1,
//         None => false
//     };
// 
//     
// }
// 
// pipeline(1) pixel_sdram_writer(
//     sys_clk: clock,
//     dram_clk: clock,
//     rst: bool,
//     write_data: 
//     write_port: AvalonPort
// ) {
// 
// }
