// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sdram_controller_impl.v
// Device     : LFE5U-85F-6BG381C
// LiteX sha1 : 2d1dd45fd
// Date       : 2024-04-12 23:37:54
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sdram_controller_impl (
    input  wire          clk,
    output wire          init_done,
    output wire          init_error,
    input  wire          rst,
    output wire   [12:0] sdram_a,
    output wire    [1:0] sdram_ba,
    output wire          sdram_cas_n,
    output wire          sdram_cke,
    output wire          sdram_cs_n,
    output wire    [1:0] sdram_dm,
    input  wire   [15:0] sdram_dq,
    output wire          sdram_ras_n,
    output wire          sdram_we_n,
    input  wire          uart_rx,
    output reg           uart_tx,
    output wire          user_clk,
    input  wire   [23:0] user_port_avalon_0_address,
    input  wire    [7:0] user_port_avalon_0_burstcount,
    input  wire    [1:0] user_port_avalon_0_byteenable,
    input  wire          user_port_avalon_0_read,
    output wire   [15:0] user_port_avalon_0_readdata,
    output wire          user_port_avalon_0_readdatavalid,
    output wire          user_port_avalon_0_waitrequest,
    input  wire          user_port_avalon_0_write,
    input  wire   [15:0] user_port_avalon_0_writedata,
    input  wire   [23:0] user_port_avalon_1_address,
    input  wire    [7:0] user_port_avalon_1_burstcount,
    input  wire    [1:0] user_port_avalon_1_byteenable,
    input  wire          user_port_avalon_1_read,
    output wire   [15:0] user_port_avalon_1_readdata,
    output wire          user_port_avalon_1_readdatavalid,
    output wire          user_port_avalon_1_waitrequest,
    input  wire          user_port_avalon_1_write,
    input  wire   [15:0] user_port_avalon_1_writedata,
    input  wire   [23:0] user_port_avalon_2_address,
    input  wire    [7:0] user_port_avalon_2_burstcount,
    input  wire    [1:0] user_port_avalon_2_byteenable,
    input  wire          user_port_avalon_2_read,
    output wire   [15:0] user_port_avalon_2_readdata,
    output wire          user_port_avalon_2_readdatavalid,
    output wire          user_port_avalon_2_waitrequest,
    input  wire          user_port_avalon_2_write,
    input  wire   [15:0] user_port_avalon_2_writedata,
    input  wire   [23:0] user_port_avalon_3_address,
    input  wire    [7:0] user_port_avalon_3_burstcount,
    input  wire    [1:0] user_port_avalon_3_byteenable,
    input  wire          user_port_avalon_3_read,
    output wire   [15:0] user_port_avalon_3_readdata,
    output wire          user_port_avalon_3_readdatavalid,
    output wire          user_port_avalon_3_waitrequest,
    input  wire          user_port_avalon_3_write,
    input  wire   [15:0] user_port_avalon_3_writedata,
    output wire          user_rst
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
LiteDRAMCore
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── crg (LiteDRAMGENSDRPHYCRG)
└─── sdrphy (GENSDRPHY)
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
└─── l2_cache (Cache)
│    └─── fsm (FSM)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── fsm (FSM)
└─── ddrctrl (LiteDRAMCoreControl)
└─── litedramavalonmm2native_0* (LiteDRAMAvalonMM2Native)
│    └─── fsm (FSM)
│    └─── cmd_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── wdata_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
└─── litedramavalonmm2native_1* (LiteDRAMAvalonMM2Native)
│    └─── fsm (FSM)
│    └─── cmd_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── wdata_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
└─── litedramavalonmm2native_2* (LiteDRAMAvalonMM2Native)
│    └─── fsm (FSM)
│    └─── cmd_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── wdata_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
└─── litedramavalonmm2native_3* (LiteDRAMAvalonMM2Native)
│    └─── fsm (FSM)
│    └─── cmd_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
│    └─── wdata_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFO)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [FD1S3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [FD1S3BX]
└─── [IFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [IFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [OFS1P3BX]
└─── [IFS1P3BX]
└─── [OFS1P3BX]
└─── [TRELLIS_IO]
└─── [OFS1P3BX]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] adr;
wire   [23:0] avalonmminterface0_avalon_port_address;
wire    [7:0] avalonmminterface0_avalon_port_burstcount;
wire    [1:0] avalonmminterface0_avalon_port_byteenable;
wire          avalonmminterface0_avalon_port_read;
reg    [15:0] avalonmminterface0_avalon_port_readdata = 16'd0;
reg           avalonmminterface0_avalon_port_readdatavalid = 1'd0;
reg           avalonmminterface0_avalon_port_waitrequest = 1'd0;
wire          avalonmminterface0_avalon_port_write;
wire   [15:0] avalonmminterface0_avalon_port_writedata;
wire   [23:0] avalonmminterface1_avalon_port_address;
wire    [7:0] avalonmminterface1_avalon_port_burstcount;
wire    [1:0] avalonmminterface1_avalon_port_byteenable;
wire          avalonmminterface1_avalon_port_read;
reg    [15:0] avalonmminterface1_avalon_port_readdata = 16'd0;
reg           avalonmminterface1_avalon_port_readdatavalid = 1'd0;
reg           avalonmminterface1_avalon_port_waitrequest = 1'd0;
wire          avalonmminterface1_avalon_port_write;
wire   [15:0] avalonmminterface1_avalon_port_writedata;
wire   [23:0] avalonmminterface2_avalon_port_address;
wire    [7:0] avalonmminterface2_avalon_port_burstcount;
wire    [1:0] avalonmminterface2_avalon_port_byteenable;
wire          avalonmminterface2_avalon_port_read;
reg    [15:0] avalonmminterface2_avalon_port_readdata = 16'd0;
reg           avalonmminterface2_avalon_port_readdatavalid = 1'd0;
reg           avalonmminterface2_avalon_port_waitrequest = 1'd0;
wire          avalonmminterface2_avalon_port_write;
wire   [15:0] avalonmminterface2_avalon_port_writedata;
wire   [23:0] avalonmminterface3_avalon_port_address;
wire    [7:0] avalonmminterface3_avalon_port_burstcount;
wire    [1:0] avalonmminterface3_avalon_port_byteenable;
wire          avalonmminterface3_avalon_port_read;
reg    [15:0] avalonmminterface3_avalon_port_readdata = 16'd0;
reg           avalonmminterface3_avalon_port_readdatavalid = 1'd0;
reg           avalonmminterface3_avalon_port_waitrequest = 1'd0;
wire          avalonmminterface3_avalon_port_write;
wire   [15:0] avalonmminterface3_avalon_port_writedata;
reg     [2:0] bankmachine0_next_state = 3'd0;
reg     [2:0] bankmachine0_state = 3'd0;
reg     [2:0] bankmachine1_next_state = 3'd0;
reg     [2:0] bankmachine1_state = 3'd0;
reg     [2:0] bankmachine2_next_state = 3'd0;
reg     [2:0] bankmachine2_state = 3'd0;
reg     [2:0] bankmachine3_next_state = 3'd0;
reg     [2:0] bankmachine3_state = 3'd0;
reg    [19:0] count = 20'd1000000;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
wire          csrbank1_init_done0_r;
reg           csrbank1_init_done0_re = 1'd0;
wire          csrbank1_init_done0_w;
reg           csrbank1_init_done0_we = 1'd0;
wire          csrbank1_init_error0_r;
reg           csrbank1_init_error0_re = 1'd0;
wire          csrbank1_init_error0_w;
reg           csrbank1_init_error0_we = 1'd0;
wire          csrbank1_sel;
wire    [3:0] csrbank2_dfii_control0_r;
reg           csrbank2_dfii_control0_re = 1'd0;
wire    [3:0] csrbank2_dfii_control0_w;
reg           csrbank2_dfii_control0_we = 1'd0;
wire   [12:0] csrbank2_dfii_pi0_address0_r;
reg           csrbank2_dfii_pi0_address0_re = 1'd0;
wire   [12:0] csrbank2_dfii_pi0_address0_w;
reg           csrbank2_dfii_pi0_address0_we = 1'd0;
wire    [1:0] csrbank2_dfii_pi0_baddress0_r;
reg           csrbank2_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] csrbank2_dfii_pi0_baddress0_w;
reg           csrbank2_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] csrbank2_dfii_pi0_command0_r;
reg           csrbank2_dfii_pi0_command0_re = 1'd0;
wire    [7:0] csrbank2_dfii_pi0_command0_w;
reg           csrbank2_dfii_pi0_command0_we = 1'd0;
wire   [15:0] csrbank2_dfii_pi0_rddata_r;
reg           csrbank2_dfii_pi0_rddata_re = 1'd0;
wire   [15:0] csrbank2_dfii_pi0_rddata_w;
reg           csrbank2_dfii_pi0_rddata_we = 1'd0;
wire   [15:0] csrbank2_dfii_pi0_wrdata0_r;
reg           csrbank2_dfii_pi0_wrdata0_re = 1'd0;
wire   [15:0] csrbank2_dfii_pi0_wrdata0_w;
reg           csrbank2_dfii_pi0_wrdata0_we = 1'd0;
wire          csrbank2_sel;
wire          csrbank3_en0_r;
reg           csrbank3_en0_re = 1'd0;
wire          csrbank3_en0_w;
reg           csrbank3_en0_we = 1'd0;
wire          csrbank3_ev_enable0_r;
reg           csrbank3_ev_enable0_re = 1'd0;
wire          csrbank3_ev_enable0_w;
reg           csrbank3_ev_enable0_we = 1'd0;
wire          csrbank3_ev_pending_r;
reg           csrbank3_ev_pending_re = 1'd0;
wire          csrbank3_ev_pending_w;
reg           csrbank3_ev_pending_we = 1'd0;
wire          csrbank3_ev_status_r;
reg           csrbank3_ev_status_re = 1'd0;
wire          csrbank3_ev_status_w;
reg           csrbank3_ev_status_we = 1'd0;
wire   [31:0] csrbank3_load0_r;
reg           csrbank3_load0_re = 1'd0;
wire   [31:0] csrbank3_load0_w;
reg           csrbank3_load0_we = 1'd0;
wire   [31:0] csrbank3_reload0_r;
reg           csrbank3_reload0_re = 1'd0;
wire   [31:0] csrbank3_reload0_w;
reg           csrbank3_reload0_we = 1'd0;
wire          csrbank3_sel;
wire          csrbank3_update_value0_r;
reg           csrbank3_update_value0_re = 1'd0;
wire          csrbank3_update_value0_w;
reg           csrbank3_update_value0_we = 1'd0;
wire   [31:0] csrbank3_value_r;
reg           csrbank3_value_re = 1'd0;
wire   [31:0] csrbank3_value_w;
reg           csrbank3_value_we = 1'd0;
wire    [1:0] csrbank4_ev_enable0_r;
reg           csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] csrbank4_ev_enable0_w;
reg           csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] csrbank4_ev_pending_r;
reg           csrbank4_ev_pending_re = 1'd0;
wire    [1:0] csrbank4_ev_pending_w;
reg           csrbank4_ev_pending_we = 1'd0;
wire    [1:0] csrbank4_ev_status_r;
reg           csrbank4_ev_status_re = 1'd0;
wire    [1:0] csrbank4_ev_status_w;
reg           csrbank4_ev_status_we = 1'd0;
wire          csrbank4_rxempty_r;
reg           csrbank4_rxempty_re = 1'd0;
wire          csrbank4_rxempty_w;
reg           csrbank4_rxempty_we = 1'd0;
wire          csrbank4_rxfull_r;
reg           csrbank4_rxfull_re = 1'd0;
wire          csrbank4_rxfull_w;
reg           csrbank4_rxfull_we = 1'd0;
wire          csrbank4_sel;
wire          csrbank4_txempty_r;
reg           csrbank4_txempty_re = 1'd0;
wire          csrbank4_txempty_w;
reg           csrbank4_txempty_we = 1'd0;
wire          csrbank4_txfull_r;
reg           csrbank4_txfull_re = 1'd0;
wire          csrbank4_txfull_w;
reg           csrbank4_txfull_we = 1'd0;
wire   [31:0] dat_r;
wire   [31:0] dat_w;
wire          dfi_p0_act_n;
wire   [12:0] dfi_p0_address;
wire    [1:0] dfi_p0_bank;
wire          dfi_p0_cas_n;
wire          dfi_p0_cke;
wire          dfi_p0_cs_n;
wire          dfi_p0_odt;
wire          dfi_p0_ras_n;
wire   [15:0] dfi_p0_rddata;
wire          dfi_p0_rddata_en;
reg           dfi_p0_rddata_valid = 1'd0;
wire          dfi_p0_reset_n;
wire          dfi_p0_we_n;
wire   [15:0] dfi_p0_wrdata;
wire          dfi_p0_wrdata_en;
wire    [1:0] dfi_p0_wrdata_mask;
wire          done;
reg           error = 1'd0;
reg     [1:0] fullmemorywe_next_state = 2'd0;
reg     [1:0] fullmemorywe_state = 2'd0;
reg           grant = 1'd0;
wire          inferedsdrtristate0__i;
wire          inferedsdrtristate0__o;
reg           inferedsdrtristate0_oe = 1'd0;
wire          inferedsdrtristate10__i;
wire          inferedsdrtristate10__o;
reg           inferedsdrtristate10_oe = 1'd0;
wire          inferedsdrtristate11__i;
wire          inferedsdrtristate11__o;
reg           inferedsdrtristate11_oe = 1'd0;
wire          inferedsdrtristate12__i;
wire          inferedsdrtristate12__o;
reg           inferedsdrtristate12_oe = 1'd0;
wire          inferedsdrtristate13__i;
wire          inferedsdrtristate13__o;
reg           inferedsdrtristate13_oe = 1'd0;
wire          inferedsdrtristate14__i;
wire          inferedsdrtristate14__o;
reg           inferedsdrtristate14_oe = 1'd0;
wire          inferedsdrtristate15__i;
wire          inferedsdrtristate15__o;
reg           inferedsdrtristate15_oe = 1'd0;
wire          inferedsdrtristate1__i;
wire          inferedsdrtristate1__o;
reg           inferedsdrtristate1_oe = 1'd0;
wire          inferedsdrtristate2__i;
wire          inferedsdrtristate2__o;
reg           inferedsdrtristate2_oe = 1'd0;
wire          inferedsdrtristate3__i;
wire          inferedsdrtristate3__o;
reg           inferedsdrtristate3_oe = 1'd0;
wire          inferedsdrtristate4__i;
wire          inferedsdrtristate4__o;
reg           inferedsdrtristate4_oe = 1'd0;
wire          inferedsdrtristate5__i;
wire          inferedsdrtristate5__o;
reg           inferedsdrtristate5_oe = 1'd0;
wire          inferedsdrtristate6__i;
wire          inferedsdrtristate6__o;
reg           inferedsdrtristate6_oe = 1'd0;
wire          inferedsdrtristate7__i;
wire          inferedsdrtristate7__o;
reg           inferedsdrtristate7_oe = 1'd0;
wire          inferedsdrtristate8__i;
wire          inferedsdrtristate8__o;
reg           inferedsdrtristate8_oe = 1'd0;
wire          inferedsdrtristate9__i;
wire          inferedsdrtristate9__o;
reg           inferedsdrtristate9_oe = 1'd0;
reg           init_done_re = 1'd0;
reg           init_done_storage = 1'd0;
reg           init_error_re = 1'd0;
reg           init_error_storage = 1'd0;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_we;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
reg    [13:0] interface1_adr_wishbone2csr_next_value1 = 14'd0;
reg           interface1_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_we;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg    [31:0] interface1_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           interface1_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg           interface1_we = 1'd0;
reg           interface1_we_wishbone2csr_next_value2 = 1'd0;
reg           interface1_we_wishbone2csr_next_value_ce2 = 1'd0;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_we;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_we;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_we;
reg           latticeplatform_obj_uart_tx_rs232phytx_next_value1 = 1'd0;
reg           latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1 = 1'd0;
reg    [23:0] litedramavalonmm2native0_address = 24'd0;
reg    [23:0] litedramavalonmm2native0_address_litedramavalonmm2native0_next_value3 = 24'd0;
reg           litedramavalonmm2native0_address_litedramavalonmm2native0_next_value_ce3 = 1'd0;
wire   [23:0] litedramavalonmm2native0_address_offset;
reg     [8:0] litedramavalonmm2native0_burst_count = 9'd0;
reg     [8:0] litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value2 = 9'd0;
reg           litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value_ce2 = 1'd0;
reg     [1:0] litedramavalonmm2native0_byteenable = 2'd0;
reg     [3:0] litedramavalonmm2native0_cmd_fifo_consume = 4'd0;
wire          litedramavalonmm2native0_cmd_fifo_do_read;
wire          litedramavalonmm2native0_cmd_fifo_fifo_in_first;
wire          litedramavalonmm2native0_cmd_fifo_fifo_in_last;
wire   [23:0] litedramavalonmm2native0_cmd_fifo_fifo_in_payload_address;
wire          litedramavalonmm2native0_cmd_fifo_fifo_out_first;
wire          litedramavalonmm2native0_cmd_fifo_fifo_out_last;
wire   [23:0] litedramavalonmm2native0_cmd_fifo_fifo_out_payload_address;
reg     [4:0] litedramavalonmm2native0_cmd_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native0_cmd_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native0_cmd_fifo_rdport_adr;
wire   [25:0] litedramavalonmm2native0_cmd_fifo_rdport_dat_r;
reg           litedramavalonmm2native0_cmd_fifo_replace = 1'd0;
reg           litedramavalonmm2native0_cmd_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native0_cmd_fifo_sink_last = 1'd0;
reg    [23:0] litedramavalonmm2native0_cmd_fifo_sink_payload_address = 24'd0;
wire          litedramavalonmm2native0_cmd_fifo_sink_ready;
reg           litedramavalonmm2native0_cmd_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native0_cmd_fifo_source_first;
wire          litedramavalonmm2native0_cmd_fifo_source_last;
wire   [23:0] litedramavalonmm2native0_cmd_fifo_source_payload_address;
reg           litedramavalonmm2native0_cmd_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native0_cmd_fifo_source_valid;
wire   [25:0] litedramavalonmm2native0_cmd_fifo_syncfifo0_din;
wire   [25:0] litedramavalonmm2native0_cmd_fifo_syncfifo0_dout;
wire          litedramavalonmm2native0_cmd_fifo_syncfifo0_re;
wire          litedramavalonmm2native0_cmd_fifo_syncfifo0_readable;
wire          litedramavalonmm2native0_cmd_fifo_syncfifo0_we;
wire          litedramavalonmm2native0_cmd_fifo_syncfifo0_writable;
reg     [3:0] litedramavalonmm2native0_cmd_fifo_wrport_adr = 4'd0;
wire   [25:0] litedramavalonmm2native0_cmd_fifo_wrport_dat_r;
wire   [25:0] litedramavalonmm2native0_cmd_fifo_wrport_dat_w;
wire          litedramavalonmm2native0_cmd_fifo_wrport_we;
reg     [8:0] litedramavalonmm2native0_cmd_ready_count = 9'd0;
reg     [8:0] litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value1 = 9'd0;
reg           litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value_ce1 = 1'd0;
reg           litedramavalonmm2native0_cmd_ready_seen = 1'd0;
reg           litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value0 = 1'd0;
reg           litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value_ce0 = 1'd0;
reg           litedramavalonmm2native0_latch = 1'd0;
reg     [2:0] litedramavalonmm2native0_next_state = 3'd0;
reg     [2:0] litedramavalonmm2native0_state = 3'd0;
reg     [3:0] litedramavalonmm2native0_wdata_fifo_consume = 4'd0;
wire          litedramavalonmm2native0_wdata_fifo_do_read;
wire          litedramavalonmm2native0_wdata_fifo_fifo_in_first;
wire          litedramavalonmm2native0_wdata_fifo_fifo_in_last;
wire    [1:0] litedramavalonmm2native0_wdata_fifo_fifo_in_payload_byteenable;
wire   [15:0] litedramavalonmm2native0_wdata_fifo_fifo_in_payload_data;
wire          litedramavalonmm2native0_wdata_fifo_fifo_out_first;
wire          litedramavalonmm2native0_wdata_fifo_fifo_out_last;
wire    [1:0] litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable;
wire   [15:0] litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data;
reg     [4:0] litedramavalonmm2native0_wdata_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native0_wdata_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native0_wdata_fifo_rdport_adr;
wire   [19:0] litedramavalonmm2native0_wdata_fifo_rdport_dat_r;
reg           litedramavalonmm2native0_wdata_fifo_replace = 1'd0;
reg           litedramavalonmm2native0_wdata_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native0_wdata_fifo_sink_last = 1'd0;
reg     [1:0] litedramavalonmm2native0_wdata_fifo_sink_payload_byteenable = 2'd0;
reg    [15:0] litedramavalonmm2native0_wdata_fifo_sink_payload_data = 16'd0;
wire          litedramavalonmm2native0_wdata_fifo_sink_ready;
reg           litedramavalonmm2native0_wdata_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native0_wdata_fifo_source_first;
wire          litedramavalonmm2native0_wdata_fifo_source_last;
wire    [1:0] litedramavalonmm2native0_wdata_fifo_source_payload_byteenable;
wire   [15:0] litedramavalonmm2native0_wdata_fifo_source_payload_data;
reg           litedramavalonmm2native0_wdata_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native0_wdata_fifo_source_valid;
wire   [19:0] litedramavalonmm2native0_wdata_fifo_syncfifo0_din;
wire   [19:0] litedramavalonmm2native0_wdata_fifo_syncfifo0_dout;
wire          litedramavalonmm2native0_wdata_fifo_syncfifo0_re;
wire          litedramavalonmm2native0_wdata_fifo_syncfifo0_readable;
wire          litedramavalonmm2native0_wdata_fifo_syncfifo0_we;
wire          litedramavalonmm2native0_wdata_fifo_syncfifo0_writable;
reg     [3:0] litedramavalonmm2native0_wdata_fifo_wrport_adr = 4'd0;
wire   [19:0] litedramavalonmm2native0_wdata_fifo_wrport_dat_r;
wire   [19:0] litedramavalonmm2native0_wdata_fifo_wrport_dat_w;
wire          litedramavalonmm2native0_wdata_fifo_wrport_we;
reg    [15:0] litedramavalonmm2native0_writedata = 16'd0;
reg    [23:0] litedramavalonmm2native1_address = 24'd0;
reg    [23:0] litedramavalonmm2native1_address_litedramavalonmm2native1_next_value3 = 24'd0;
reg           litedramavalonmm2native1_address_litedramavalonmm2native1_next_value_ce3 = 1'd0;
wire   [23:0] litedramavalonmm2native1_address_offset;
reg     [8:0] litedramavalonmm2native1_burst_count = 9'd0;
reg     [8:0] litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value2 = 9'd0;
reg           litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value_ce2 = 1'd0;
reg     [1:0] litedramavalonmm2native1_byteenable = 2'd0;
reg     [3:0] litedramavalonmm2native1_cmd_fifo_consume = 4'd0;
wire          litedramavalonmm2native1_cmd_fifo_do_read;
wire          litedramavalonmm2native1_cmd_fifo_fifo_in_first;
wire          litedramavalonmm2native1_cmd_fifo_fifo_in_last;
wire   [23:0] litedramavalonmm2native1_cmd_fifo_fifo_in_payload_address;
wire          litedramavalonmm2native1_cmd_fifo_fifo_out_first;
wire          litedramavalonmm2native1_cmd_fifo_fifo_out_last;
wire   [23:0] litedramavalonmm2native1_cmd_fifo_fifo_out_payload_address;
reg     [4:0] litedramavalonmm2native1_cmd_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native1_cmd_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native1_cmd_fifo_rdport_adr;
wire   [25:0] litedramavalonmm2native1_cmd_fifo_rdport_dat_r;
reg           litedramavalonmm2native1_cmd_fifo_replace = 1'd0;
reg           litedramavalonmm2native1_cmd_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native1_cmd_fifo_sink_last = 1'd0;
reg    [23:0] litedramavalonmm2native1_cmd_fifo_sink_payload_address = 24'd0;
wire          litedramavalonmm2native1_cmd_fifo_sink_ready;
reg           litedramavalonmm2native1_cmd_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native1_cmd_fifo_source_first;
wire          litedramavalonmm2native1_cmd_fifo_source_last;
wire   [23:0] litedramavalonmm2native1_cmd_fifo_source_payload_address;
reg           litedramavalonmm2native1_cmd_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native1_cmd_fifo_source_valid;
wire   [25:0] litedramavalonmm2native1_cmd_fifo_syncfifo1_din;
wire   [25:0] litedramavalonmm2native1_cmd_fifo_syncfifo1_dout;
wire          litedramavalonmm2native1_cmd_fifo_syncfifo1_re;
wire          litedramavalonmm2native1_cmd_fifo_syncfifo1_readable;
wire          litedramavalonmm2native1_cmd_fifo_syncfifo1_we;
wire          litedramavalonmm2native1_cmd_fifo_syncfifo1_writable;
reg     [3:0] litedramavalonmm2native1_cmd_fifo_wrport_adr = 4'd0;
wire   [25:0] litedramavalonmm2native1_cmd_fifo_wrport_dat_r;
wire   [25:0] litedramavalonmm2native1_cmd_fifo_wrport_dat_w;
wire          litedramavalonmm2native1_cmd_fifo_wrport_we;
reg     [8:0] litedramavalonmm2native1_cmd_ready_count = 9'd0;
reg     [8:0] litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value1 = 9'd0;
reg           litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value_ce1 = 1'd0;
reg           litedramavalonmm2native1_cmd_ready_seen = 1'd0;
reg           litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value0 = 1'd0;
reg           litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value_ce0 = 1'd0;
reg           litedramavalonmm2native1_latch = 1'd0;
reg     [2:0] litedramavalonmm2native1_next_state = 3'd0;
reg     [2:0] litedramavalonmm2native1_state = 3'd0;
reg     [3:0] litedramavalonmm2native1_wdata_fifo_consume = 4'd0;
wire          litedramavalonmm2native1_wdata_fifo_do_read;
wire          litedramavalonmm2native1_wdata_fifo_fifo_in_first;
wire          litedramavalonmm2native1_wdata_fifo_fifo_in_last;
wire    [1:0] litedramavalonmm2native1_wdata_fifo_fifo_in_payload_byteenable;
wire   [15:0] litedramavalonmm2native1_wdata_fifo_fifo_in_payload_data;
wire          litedramavalonmm2native1_wdata_fifo_fifo_out_first;
wire          litedramavalonmm2native1_wdata_fifo_fifo_out_last;
wire    [1:0] litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable;
wire   [15:0] litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data;
reg     [4:0] litedramavalonmm2native1_wdata_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native1_wdata_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native1_wdata_fifo_rdport_adr;
wire   [19:0] litedramavalonmm2native1_wdata_fifo_rdport_dat_r;
reg           litedramavalonmm2native1_wdata_fifo_replace = 1'd0;
reg           litedramavalonmm2native1_wdata_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native1_wdata_fifo_sink_last = 1'd0;
reg     [1:0] litedramavalonmm2native1_wdata_fifo_sink_payload_byteenable = 2'd0;
reg    [15:0] litedramavalonmm2native1_wdata_fifo_sink_payload_data = 16'd0;
wire          litedramavalonmm2native1_wdata_fifo_sink_ready;
reg           litedramavalonmm2native1_wdata_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native1_wdata_fifo_source_first;
wire          litedramavalonmm2native1_wdata_fifo_source_last;
wire    [1:0] litedramavalonmm2native1_wdata_fifo_source_payload_byteenable;
wire   [15:0] litedramavalonmm2native1_wdata_fifo_source_payload_data;
reg           litedramavalonmm2native1_wdata_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native1_wdata_fifo_source_valid;
wire   [19:0] litedramavalonmm2native1_wdata_fifo_syncfifo1_din;
wire   [19:0] litedramavalonmm2native1_wdata_fifo_syncfifo1_dout;
wire          litedramavalonmm2native1_wdata_fifo_syncfifo1_re;
wire          litedramavalonmm2native1_wdata_fifo_syncfifo1_readable;
wire          litedramavalonmm2native1_wdata_fifo_syncfifo1_we;
wire          litedramavalonmm2native1_wdata_fifo_syncfifo1_writable;
reg     [3:0] litedramavalonmm2native1_wdata_fifo_wrport_adr = 4'd0;
wire   [19:0] litedramavalonmm2native1_wdata_fifo_wrport_dat_r;
wire   [19:0] litedramavalonmm2native1_wdata_fifo_wrport_dat_w;
wire          litedramavalonmm2native1_wdata_fifo_wrport_we;
reg    [15:0] litedramavalonmm2native1_writedata = 16'd0;
reg    [23:0] litedramavalonmm2native2_address = 24'd0;
reg    [23:0] litedramavalonmm2native2_address_litedramavalonmm2native2_next_value3 = 24'd0;
reg           litedramavalonmm2native2_address_litedramavalonmm2native2_next_value_ce3 = 1'd0;
wire   [23:0] litedramavalonmm2native2_address_offset;
reg     [8:0] litedramavalonmm2native2_burst_count = 9'd0;
reg     [8:0] litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value2 = 9'd0;
reg           litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value_ce2 = 1'd0;
reg     [1:0] litedramavalonmm2native2_byteenable = 2'd0;
reg     [3:0] litedramavalonmm2native2_cmd_fifo_consume = 4'd0;
wire          litedramavalonmm2native2_cmd_fifo_do_read;
wire          litedramavalonmm2native2_cmd_fifo_fifo_in_first;
wire          litedramavalonmm2native2_cmd_fifo_fifo_in_last;
wire   [23:0] litedramavalonmm2native2_cmd_fifo_fifo_in_payload_address;
wire          litedramavalonmm2native2_cmd_fifo_fifo_out_first;
wire          litedramavalonmm2native2_cmd_fifo_fifo_out_last;
wire   [23:0] litedramavalonmm2native2_cmd_fifo_fifo_out_payload_address;
reg     [4:0] litedramavalonmm2native2_cmd_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native2_cmd_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native2_cmd_fifo_rdport_adr;
wire   [25:0] litedramavalonmm2native2_cmd_fifo_rdport_dat_r;
reg           litedramavalonmm2native2_cmd_fifo_replace = 1'd0;
reg           litedramavalonmm2native2_cmd_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native2_cmd_fifo_sink_last = 1'd0;
reg    [23:0] litedramavalonmm2native2_cmd_fifo_sink_payload_address = 24'd0;
wire          litedramavalonmm2native2_cmd_fifo_sink_ready;
reg           litedramavalonmm2native2_cmd_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native2_cmd_fifo_source_first;
wire          litedramavalonmm2native2_cmd_fifo_source_last;
wire   [23:0] litedramavalonmm2native2_cmd_fifo_source_payload_address;
reg           litedramavalonmm2native2_cmd_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native2_cmd_fifo_source_valid;
wire   [25:0] litedramavalonmm2native2_cmd_fifo_syncfifo2_din;
wire   [25:0] litedramavalonmm2native2_cmd_fifo_syncfifo2_dout;
wire          litedramavalonmm2native2_cmd_fifo_syncfifo2_re;
wire          litedramavalonmm2native2_cmd_fifo_syncfifo2_readable;
wire          litedramavalonmm2native2_cmd_fifo_syncfifo2_we;
wire          litedramavalonmm2native2_cmd_fifo_syncfifo2_writable;
reg     [3:0] litedramavalonmm2native2_cmd_fifo_wrport_adr = 4'd0;
wire   [25:0] litedramavalonmm2native2_cmd_fifo_wrport_dat_r;
wire   [25:0] litedramavalonmm2native2_cmd_fifo_wrport_dat_w;
wire          litedramavalonmm2native2_cmd_fifo_wrport_we;
reg     [8:0] litedramavalonmm2native2_cmd_ready_count = 9'd0;
reg     [8:0] litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value1 = 9'd0;
reg           litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value_ce1 = 1'd0;
reg           litedramavalonmm2native2_cmd_ready_seen = 1'd0;
reg           litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value0 = 1'd0;
reg           litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value_ce0 = 1'd0;
reg           litedramavalonmm2native2_latch = 1'd0;
reg     [2:0] litedramavalonmm2native2_next_state = 3'd0;
reg     [2:0] litedramavalonmm2native2_state = 3'd0;
reg     [3:0] litedramavalonmm2native2_wdata_fifo_consume = 4'd0;
wire          litedramavalonmm2native2_wdata_fifo_do_read;
wire          litedramavalonmm2native2_wdata_fifo_fifo_in_first;
wire          litedramavalonmm2native2_wdata_fifo_fifo_in_last;
wire    [1:0] litedramavalonmm2native2_wdata_fifo_fifo_in_payload_byteenable;
wire   [15:0] litedramavalonmm2native2_wdata_fifo_fifo_in_payload_data;
wire          litedramavalonmm2native2_wdata_fifo_fifo_out_first;
wire          litedramavalonmm2native2_wdata_fifo_fifo_out_last;
wire    [1:0] litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable;
wire   [15:0] litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data;
reg     [4:0] litedramavalonmm2native2_wdata_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native2_wdata_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native2_wdata_fifo_rdport_adr;
wire   [19:0] litedramavalonmm2native2_wdata_fifo_rdport_dat_r;
reg           litedramavalonmm2native2_wdata_fifo_replace = 1'd0;
reg           litedramavalonmm2native2_wdata_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native2_wdata_fifo_sink_last = 1'd0;
reg     [1:0] litedramavalonmm2native2_wdata_fifo_sink_payload_byteenable = 2'd0;
reg    [15:0] litedramavalonmm2native2_wdata_fifo_sink_payload_data = 16'd0;
wire          litedramavalonmm2native2_wdata_fifo_sink_ready;
reg           litedramavalonmm2native2_wdata_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native2_wdata_fifo_source_first;
wire          litedramavalonmm2native2_wdata_fifo_source_last;
wire    [1:0] litedramavalonmm2native2_wdata_fifo_source_payload_byteenable;
wire   [15:0] litedramavalonmm2native2_wdata_fifo_source_payload_data;
reg           litedramavalonmm2native2_wdata_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native2_wdata_fifo_source_valid;
wire   [19:0] litedramavalonmm2native2_wdata_fifo_syncfifo2_din;
wire   [19:0] litedramavalonmm2native2_wdata_fifo_syncfifo2_dout;
wire          litedramavalonmm2native2_wdata_fifo_syncfifo2_re;
wire          litedramavalonmm2native2_wdata_fifo_syncfifo2_readable;
wire          litedramavalonmm2native2_wdata_fifo_syncfifo2_we;
wire          litedramavalonmm2native2_wdata_fifo_syncfifo2_writable;
reg     [3:0] litedramavalonmm2native2_wdata_fifo_wrport_adr = 4'd0;
wire   [19:0] litedramavalonmm2native2_wdata_fifo_wrport_dat_r;
wire   [19:0] litedramavalonmm2native2_wdata_fifo_wrport_dat_w;
wire          litedramavalonmm2native2_wdata_fifo_wrport_we;
reg    [15:0] litedramavalonmm2native2_writedata = 16'd0;
reg    [23:0] litedramavalonmm2native3_address = 24'd0;
reg    [23:0] litedramavalonmm2native3_address_litedramavalonmm2native3_next_value3 = 24'd0;
reg           litedramavalonmm2native3_address_litedramavalonmm2native3_next_value_ce3 = 1'd0;
wire   [23:0] litedramavalonmm2native3_address_offset;
reg     [8:0] litedramavalonmm2native3_burst_count = 9'd0;
reg     [8:0] litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value2 = 9'd0;
reg           litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value_ce2 = 1'd0;
reg     [1:0] litedramavalonmm2native3_byteenable = 2'd0;
reg     [3:0] litedramavalonmm2native3_cmd_fifo_consume = 4'd0;
wire          litedramavalonmm2native3_cmd_fifo_do_read;
wire          litedramavalonmm2native3_cmd_fifo_fifo_in_first;
wire          litedramavalonmm2native3_cmd_fifo_fifo_in_last;
wire   [23:0] litedramavalonmm2native3_cmd_fifo_fifo_in_payload_address;
wire          litedramavalonmm2native3_cmd_fifo_fifo_out_first;
wire          litedramavalonmm2native3_cmd_fifo_fifo_out_last;
wire   [23:0] litedramavalonmm2native3_cmd_fifo_fifo_out_payload_address;
reg     [4:0] litedramavalonmm2native3_cmd_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native3_cmd_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native3_cmd_fifo_rdport_adr;
wire   [25:0] litedramavalonmm2native3_cmd_fifo_rdport_dat_r;
reg           litedramavalonmm2native3_cmd_fifo_replace = 1'd0;
reg           litedramavalonmm2native3_cmd_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native3_cmd_fifo_sink_last = 1'd0;
reg    [23:0] litedramavalonmm2native3_cmd_fifo_sink_payload_address = 24'd0;
wire          litedramavalonmm2native3_cmd_fifo_sink_ready;
reg           litedramavalonmm2native3_cmd_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native3_cmd_fifo_source_first;
wire          litedramavalonmm2native3_cmd_fifo_source_last;
wire   [23:0] litedramavalonmm2native3_cmd_fifo_source_payload_address;
reg           litedramavalonmm2native3_cmd_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native3_cmd_fifo_source_valid;
wire   [25:0] litedramavalonmm2native3_cmd_fifo_syncfifo3_din;
wire   [25:0] litedramavalonmm2native3_cmd_fifo_syncfifo3_dout;
wire          litedramavalonmm2native3_cmd_fifo_syncfifo3_re;
wire          litedramavalonmm2native3_cmd_fifo_syncfifo3_readable;
wire          litedramavalonmm2native3_cmd_fifo_syncfifo3_we;
wire          litedramavalonmm2native3_cmd_fifo_syncfifo3_writable;
reg     [3:0] litedramavalonmm2native3_cmd_fifo_wrport_adr = 4'd0;
wire   [25:0] litedramavalonmm2native3_cmd_fifo_wrport_dat_r;
wire   [25:0] litedramavalonmm2native3_cmd_fifo_wrport_dat_w;
wire          litedramavalonmm2native3_cmd_fifo_wrport_we;
reg     [8:0] litedramavalonmm2native3_cmd_ready_count = 9'd0;
reg     [8:0] litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value1 = 9'd0;
reg           litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value_ce1 = 1'd0;
reg           litedramavalonmm2native3_cmd_ready_seen = 1'd0;
reg           litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value0 = 1'd0;
reg           litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value_ce0 = 1'd0;
reg           litedramavalonmm2native3_latch = 1'd0;
reg     [2:0] litedramavalonmm2native3_next_state = 3'd0;
reg     [2:0] litedramavalonmm2native3_state = 3'd0;
reg     [3:0] litedramavalonmm2native3_wdata_fifo_consume = 4'd0;
wire          litedramavalonmm2native3_wdata_fifo_do_read;
wire          litedramavalonmm2native3_wdata_fifo_fifo_in_first;
wire          litedramavalonmm2native3_wdata_fifo_fifo_in_last;
wire    [1:0] litedramavalonmm2native3_wdata_fifo_fifo_in_payload_byteenable;
wire   [15:0] litedramavalonmm2native3_wdata_fifo_fifo_in_payload_data;
wire          litedramavalonmm2native3_wdata_fifo_fifo_out_first;
wire          litedramavalonmm2native3_wdata_fifo_fifo_out_last;
wire    [1:0] litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable;
wire   [15:0] litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data;
reg     [4:0] litedramavalonmm2native3_wdata_fifo_level = 5'd0;
reg     [3:0] litedramavalonmm2native3_wdata_fifo_produce = 4'd0;
wire    [3:0] litedramavalonmm2native3_wdata_fifo_rdport_adr;
wire   [19:0] litedramavalonmm2native3_wdata_fifo_rdport_dat_r;
reg           litedramavalonmm2native3_wdata_fifo_replace = 1'd0;
reg           litedramavalonmm2native3_wdata_fifo_sink_first = 1'd0;
reg           litedramavalonmm2native3_wdata_fifo_sink_last = 1'd0;
reg     [1:0] litedramavalonmm2native3_wdata_fifo_sink_payload_byteenable = 2'd0;
reg    [15:0] litedramavalonmm2native3_wdata_fifo_sink_payload_data = 16'd0;
wire          litedramavalonmm2native3_wdata_fifo_sink_ready;
reg           litedramavalonmm2native3_wdata_fifo_sink_valid = 1'd0;
wire          litedramavalonmm2native3_wdata_fifo_source_first;
wire          litedramavalonmm2native3_wdata_fifo_source_last;
wire    [1:0] litedramavalonmm2native3_wdata_fifo_source_payload_byteenable;
wire   [15:0] litedramavalonmm2native3_wdata_fifo_source_payload_data;
reg           litedramavalonmm2native3_wdata_fifo_source_ready = 1'd0;
wire          litedramavalonmm2native3_wdata_fifo_source_valid;
wire   [19:0] litedramavalonmm2native3_wdata_fifo_syncfifo3_din;
wire   [19:0] litedramavalonmm2native3_wdata_fifo_syncfifo3_dout;
wire          litedramavalonmm2native3_wdata_fifo_syncfifo3_re;
wire          litedramavalonmm2native3_wdata_fifo_syncfifo3_readable;
wire          litedramavalonmm2native3_wdata_fifo_syncfifo3_we;
wire          litedramavalonmm2native3_wdata_fifo_syncfifo3_writable;
reg     [3:0] litedramavalonmm2native3_wdata_fifo_wrport_adr = 4'd0;
wire   [19:0] litedramavalonmm2native3_wdata_fifo_wrport_dat_r;
wire   [19:0] litedramavalonmm2native3_wdata_fifo_wrport_dat_w;
wire          litedramavalonmm2native3_wdata_fifo_wrport_we;
reg    [15:0] litedramavalonmm2native3_writedata = 16'd0;
reg           litedramcore_aborted = 1'd0;
reg           litedramcore_aborted_litedramwishbone2native_next_value = 1'd0;
reg           litedramcore_aborted_litedramwishbone2native_next_value_ce = 1'd0;
wire          litedramcore_bus_error;
reg    [31:0] litedramcore_bus_errors = 32'd0;
reg           litedramcore_bus_errors_re = 1'd0;
wire   [31:0] litedramcore_bus_errors_status;
wire          litedramcore_bus_errors_we;
reg           litedramcore_cache = 1'd0;
wire          litedramcore_cache_data_port_adr;
wire   [31:0] litedramcore_cache_data_port_dat_r;
reg    [31:0] litedramcore_cache_data_port_dat_w = 32'd0;
reg     [3:0] litedramcore_cache_data_port_we = 4'd0;
reg           litedramcore_cache_tag_di_dirty = 1'd0;
wire   [29:0] litedramcore_cache_tag_di_tag;
wire          litedramcore_cache_tag_do_dirty;
wire   [29:0] litedramcore_cache_tag_do_tag;
wire          litedramcore_cache_tag_port_adr;
wire   [30:0] litedramcore_cache_tag_port_dat_r;
wire   [30:0] litedramcore_cache_tag_port_dat_w;
reg           litedramcore_cache_tag_port_we = 1'd0;
reg           litedramcore_cache_word_clr = 1'd0;
reg           litedramcore_cache_word_inc = 1'd0;
reg           litedramcore_cache_write_from_slave = 1'd0;
wire          litedramcore_cpu_rst;
wire          litedramcore_dbus_ack;
wire   [29:0] litedramcore_dbus_adr;
wire    [1:0] litedramcore_dbus_bte;
wire    [2:0] litedramcore_dbus_cti;
wire          litedramcore_dbus_cyc;
wire   [31:0] litedramcore_dbus_dat_r;
wire   [31:0] litedramcore_dbus_dat_w;
wire          litedramcore_dbus_err;
wire    [3:0] litedramcore_dbus_sel;
wire          litedramcore_dbus_stb;
wire          litedramcore_dbus_we;
reg           litedramcore_en_re = 1'd0;
reg           litedramcore_en_storage = 1'd0;
reg           litedramcore_enable_re = 1'd0;
reg           litedramcore_enable_storage = 1'd0;
wire          litedramcore_ibus_ack;
wire   [29:0] litedramcore_ibus_adr;
wire    [1:0] litedramcore_ibus_bte;
wire    [2:0] litedramcore_ibus_cti;
wire          litedramcore_ibus_cyc;
wire   [31:0] litedramcore_ibus_dat_r;
wire   [31:0] litedramcore_ibus_dat_w;
wire          litedramcore_ibus_err;
wire    [3:0] litedramcore_ibus_sel;
wire          litedramcore_ibus_stb;
wire          litedramcore_ibus_we;
reg           litedramcore_interface_ack = 1'd0;
wire   [30:0] litedramcore_interface_adr;
reg           litedramcore_interface_cyc = 1'd0;
reg    [15:0] litedramcore_interface_dat_r = 16'd0;
reg    [15:0] litedramcore_interface_dat_w = 16'd0;
wire    [1:0] litedramcore_interface_sel;
reg           litedramcore_interface_stb = 1'd0;
reg           litedramcore_interface_we = 1'd0;
reg    [31:0] litedramcore_interrupt = 32'd0;
wire          litedramcore_irq;
reg           litedramcore_is_ongoing = 1'd0;
wire   [13:0] litedramcore_litedramcore_adr;
reg           litedramcore_litedramcore_adr_burst = 1'd0;
wire   [31:0] litedramcore_litedramcore_dat_r;
reg           litedramcore_litedramcore_ram_bus_ack = 1'd0;
wire   [29:0] litedramcore_litedramcore_ram_bus_adr;
wire    [1:0] litedramcore_litedramcore_ram_bus_bte;
wire    [2:0] litedramcore_litedramcore_ram_bus_cti;
wire          litedramcore_litedramcore_ram_bus_cyc;
wire   [31:0] litedramcore_litedramcore_ram_bus_dat_r;
wire   [31:0] litedramcore_litedramcore_ram_bus_dat_w;
reg           litedramcore_litedramcore_ram_bus_err = 1'd0;
wire    [3:0] litedramcore_litedramcore_ram_bus_sel;
wire          litedramcore_litedramcore_ram_bus_stb;
wire          litedramcore_litedramcore_ram_bus_we;
reg           litedramcore_load_re = 1'd0;
reg    [31:0] litedramcore_load_storage = 32'd0;
reg           litedramcore_pending_r = 1'd0;
reg           litedramcore_pending_re = 1'd0;
reg           litedramcore_pending_status = 1'd0;
wire          litedramcore_pending_we;
wire          litedramcore_port_cmd_last;
wire   [23:0] litedramcore_port_cmd_payload_addr;
wire          litedramcore_port_cmd_payload_we;
wire          litedramcore_port_cmd_ready;
reg           litedramcore_port_cmd_valid = 1'd0;
wire          litedramcore_port_flush;
wire   [15:0] litedramcore_port_rdata_payload_data;
wire          litedramcore_port_rdata_ready;
wire          litedramcore_port_rdata_valid;
wire   [15:0] litedramcore_port_wdata_payload_data;
wire    [1:0] litedramcore_port_wdata_payload_we;
wire          litedramcore_port_wdata_ready;
reg           litedramcore_port_wdata_valid = 1'd0;
wire   [10:0] litedramcore_ram_adr;
reg           litedramcore_ram_adr_burst = 1'd0;
reg           litedramcore_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] litedramcore_ram_bus_ram_bus_adr;
wire    [1:0] litedramcore_ram_bus_ram_bus_bte;
wire    [2:0] litedramcore_ram_bus_ram_bus_cti;
wire          litedramcore_ram_bus_ram_bus_cyc;
wire   [31:0] litedramcore_ram_bus_ram_bus_dat_r;
wire   [31:0] litedramcore_ram_bus_ram_bus_dat_w;
reg           litedramcore_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] litedramcore_ram_bus_ram_bus_sel;
wire          litedramcore_ram_bus_ram_bus_stb;
wire          litedramcore_ram_bus_ram_bus_we;
wire   [31:0] litedramcore_ram_dat_r;
wire   [31:0] litedramcore_ram_dat_w;
reg     [3:0] litedramcore_ram_we = 4'd0;
reg           litedramcore_reload_re = 1'd0;
reg    [31:0] litedramcore_reload_storage = 32'd0;
wire          litedramcore_reset;
reg           litedramcore_reset_re = 1'd0;
reg     [1:0] litedramcore_reset_storage = 2'd0;
reg           litedramcore_scratch_re = 1'd0;
reg    [31:0] litedramcore_scratch_storage = 32'd305419896;
reg           litedramcore_sdram_address_re = 1'd0;
reg    [12:0] litedramcore_sdram_address_storage = 13'd0;
reg           litedramcore_sdram_baddress_re = 1'd0;
reg     [1:0] litedramcore_sdram_baddress_storage = 2'd0;
reg           litedramcore_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [12:0] litedramcore_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire    [1:0] litedramcore_sdram_bankmachine0_cmd_payload_ba;
reg           litedramcore_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_ready = 1'd0;
reg           litedramcore_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine0_consume = 4'd0;
wire          litedramcore_sdram_bankmachine0_do_read;
wire          litedramcore_sdram_bankmachine0_fifo_in_first;
wire          litedramcore_sdram_bankmachine0_fifo_in_last;
wire   [21:0] litedramcore_sdram_bankmachine0_fifo_in_payload_addr;
wire          litedramcore_sdram_bankmachine0_fifo_in_payload_we;
wire          litedramcore_sdram_bankmachine0_fifo_out_first;
wire          litedramcore_sdram_bankmachine0_fifo_out_last;
wire   [21:0] litedramcore_sdram_bankmachine0_fifo_out_payload_addr;
wire          litedramcore_sdram_bankmachine0_fifo_out_payload_we;
reg     [4:0] litedramcore_sdram_bankmachine0_level = 5'd0;
wire          litedramcore_sdram_bankmachine0_pipe_valid_sink_first;
wire          litedramcore_sdram_bankmachine0_pipe_valid_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          litedramcore_sdram_bankmachine0_pipe_valid_sink_ready;
wire          litedramcore_sdram_bankmachine0_pipe_valid_sink_valid;
reg           litedramcore_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           litedramcore_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [21:0] litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg           litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          litedramcore_sdram_bankmachine0_pipe_valid_source_ready;
reg           litedramcore_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine0_produce = 4'd0;
wire    [3:0] litedramcore_sdram_bankmachine0_rdport_adr;
wire   [24:0] litedramcore_sdram_bankmachine0_rdport_dat_r;
reg           litedramcore_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          litedramcore_sdram_bankmachine0_refresh_req;
reg           litedramcore_sdram_bankmachine0_replace = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine0_req_addr;
wire          litedramcore_sdram_bankmachine0_req_lock;
reg           litedramcore_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          litedramcore_sdram_bankmachine0_req_ready;
wire          litedramcore_sdram_bankmachine0_req_valid;
reg           litedramcore_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          litedramcore_sdram_bankmachine0_req_we;
reg    [12:0] litedramcore_sdram_bankmachine0_row = 13'd0;
reg           litedramcore_sdram_bankmachine0_row_close = 1'd0;
reg           litedramcore_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          litedramcore_sdram_bankmachine0_row_hit;
reg           litedramcore_sdram_bankmachine0_row_open = 1'd0;
reg           litedramcore_sdram_bankmachine0_row_opened = 1'd0;
reg           litedramcore_sdram_bankmachine0_sink_first = 1'd0;
reg           litedramcore_sdram_bankmachine0_sink_last = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine0_sink_payload_addr;
wire          litedramcore_sdram_bankmachine0_sink_payload_we;
wire          litedramcore_sdram_bankmachine0_sink_ready;
wire          litedramcore_sdram_bankmachine0_sink_sink_first;
wire          litedramcore_sdram_bankmachine0_sink_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine0_sink_sink_payload_addr;
wire          litedramcore_sdram_bankmachine0_sink_sink_payload_we;
wire          litedramcore_sdram_bankmachine0_sink_sink_ready;
wire          litedramcore_sdram_bankmachine0_sink_sink_valid;
wire          litedramcore_sdram_bankmachine0_sink_valid;
wire          litedramcore_sdram_bankmachine0_source_first;
wire          litedramcore_sdram_bankmachine0_source_last;
wire   [21:0] litedramcore_sdram_bankmachine0_source_payload_addr;
wire          litedramcore_sdram_bankmachine0_source_payload_we;
wire          litedramcore_sdram_bankmachine0_source_ready;
wire          litedramcore_sdram_bankmachine0_source_source_first;
wire          litedramcore_sdram_bankmachine0_source_source_last;
wire   [21:0] litedramcore_sdram_bankmachine0_source_source_payload_addr;
wire          litedramcore_sdram_bankmachine0_source_source_payload_we;
wire          litedramcore_sdram_bankmachine0_source_source_ready;
wire          litedramcore_sdram_bankmachine0_source_source_valid;
wire          litedramcore_sdram_bankmachine0_source_valid;
wire   [24:0] litedramcore_sdram_bankmachine0_syncfifo0_din;
wire   [24:0] litedramcore_sdram_bankmachine0_syncfifo0_dout;
wire          litedramcore_sdram_bankmachine0_syncfifo0_re;
wire          litedramcore_sdram_bankmachine0_syncfifo0_readable;
wire          litedramcore_sdram_bankmachine0_syncfifo0_we;
wire          litedramcore_sdram_bankmachine0_syncfifo0_writable;
reg     [1:0] litedramcore_sdram_bankmachine0_trascon_count = 2'd0;
reg           litedramcore_sdram_bankmachine0_trascon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine0_trascon_valid;
reg     [1:0] litedramcore_sdram_bankmachine0_trccon_count = 2'd0;
reg           litedramcore_sdram_bankmachine0_trccon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine0_trccon_valid;
reg     [1:0] litedramcore_sdram_bankmachine0_twtpcon_count = 2'd0;
reg           litedramcore_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine0_twtpcon_valid;
reg     [3:0] litedramcore_sdram_bankmachine0_wrport_adr = 4'd0;
wire   [24:0] litedramcore_sdram_bankmachine0_wrport_dat_r;
wire   [24:0] litedramcore_sdram_bankmachine0_wrport_dat_w;
wire          litedramcore_sdram_bankmachine0_wrport_we;
reg           litedramcore_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [12:0] litedramcore_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire    [1:0] litedramcore_sdram_bankmachine1_cmd_payload_ba;
reg           litedramcore_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_ready = 1'd0;
reg           litedramcore_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine1_consume = 4'd0;
wire          litedramcore_sdram_bankmachine1_do_read;
wire          litedramcore_sdram_bankmachine1_fifo_in_first;
wire          litedramcore_sdram_bankmachine1_fifo_in_last;
wire   [21:0] litedramcore_sdram_bankmachine1_fifo_in_payload_addr;
wire          litedramcore_sdram_bankmachine1_fifo_in_payload_we;
wire          litedramcore_sdram_bankmachine1_fifo_out_first;
wire          litedramcore_sdram_bankmachine1_fifo_out_last;
wire   [21:0] litedramcore_sdram_bankmachine1_fifo_out_payload_addr;
wire          litedramcore_sdram_bankmachine1_fifo_out_payload_we;
reg     [4:0] litedramcore_sdram_bankmachine1_level = 5'd0;
wire          litedramcore_sdram_bankmachine1_pipe_valid_sink_first;
wire          litedramcore_sdram_bankmachine1_pipe_valid_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          litedramcore_sdram_bankmachine1_pipe_valid_sink_ready;
wire          litedramcore_sdram_bankmachine1_pipe_valid_sink_valid;
reg           litedramcore_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           litedramcore_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [21:0] litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg           litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          litedramcore_sdram_bankmachine1_pipe_valid_source_ready;
reg           litedramcore_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine1_produce = 4'd0;
wire    [3:0] litedramcore_sdram_bankmachine1_rdport_adr;
wire   [24:0] litedramcore_sdram_bankmachine1_rdport_dat_r;
reg           litedramcore_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          litedramcore_sdram_bankmachine1_refresh_req;
reg           litedramcore_sdram_bankmachine1_replace = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine1_req_addr;
wire          litedramcore_sdram_bankmachine1_req_lock;
reg           litedramcore_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          litedramcore_sdram_bankmachine1_req_ready;
wire          litedramcore_sdram_bankmachine1_req_valid;
reg           litedramcore_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          litedramcore_sdram_bankmachine1_req_we;
reg    [12:0] litedramcore_sdram_bankmachine1_row = 13'd0;
reg           litedramcore_sdram_bankmachine1_row_close = 1'd0;
reg           litedramcore_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          litedramcore_sdram_bankmachine1_row_hit;
reg           litedramcore_sdram_bankmachine1_row_open = 1'd0;
reg           litedramcore_sdram_bankmachine1_row_opened = 1'd0;
reg           litedramcore_sdram_bankmachine1_sink_first = 1'd0;
reg           litedramcore_sdram_bankmachine1_sink_last = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine1_sink_payload_addr;
wire          litedramcore_sdram_bankmachine1_sink_payload_we;
wire          litedramcore_sdram_bankmachine1_sink_ready;
wire          litedramcore_sdram_bankmachine1_sink_sink_first;
wire          litedramcore_sdram_bankmachine1_sink_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine1_sink_sink_payload_addr;
wire          litedramcore_sdram_bankmachine1_sink_sink_payload_we;
wire          litedramcore_sdram_bankmachine1_sink_sink_ready;
wire          litedramcore_sdram_bankmachine1_sink_sink_valid;
wire          litedramcore_sdram_bankmachine1_sink_valid;
wire          litedramcore_sdram_bankmachine1_source_first;
wire          litedramcore_sdram_bankmachine1_source_last;
wire   [21:0] litedramcore_sdram_bankmachine1_source_payload_addr;
wire          litedramcore_sdram_bankmachine1_source_payload_we;
wire          litedramcore_sdram_bankmachine1_source_ready;
wire          litedramcore_sdram_bankmachine1_source_source_first;
wire          litedramcore_sdram_bankmachine1_source_source_last;
wire   [21:0] litedramcore_sdram_bankmachine1_source_source_payload_addr;
wire          litedramcore_sdram_bankmachine1_source_source_payload_we;
wire          litedramcore_sdram_bankmachine1_source_source_ready;
wire          litedramcore_sdram_bankmachine1_source_source_valid;
wire          litedramcore_sdram_bankmachine1_source_valid;
wire   [24:0] litedramcore_sdram_bankmachine1_syncfifo1_din;
wire   [24:0] litedramcore_sdram_bankmachine1_syncfifo1_dout;
wire          litedramcore_sdram_bankmachine1_syncfifo1_re;
wire          litedramcore_sdram_bankmachine1_syncfifo1_readable;
wire          litedramcore_sdram_bankmachine1_syncfifo1_we;
wire          litedramcore_sdram_bankmachine1_syncfifo1_writable;
reg     [1:0] litedramcore_sdram_bankmachine1_trascon_count = 2'd0;
reg           litedramcore_sdram_bankmachine1_trascon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine1_trascon_valid;
reg     [1:0] litedramcore_sdram_bankmachine1_trccon_count = 2'd0;
reg           litedramcore_sdram_bankmachine1_trccon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine1_trccon_valid;
reg     [1:0] litedramcore_sdram_bankmachine1_twtpcon_count = 2'd0;
reg           litedramcore_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine1_twtpcon_valid;
reg     [3:0] litedramcore_sdram_bankmachine1_wrport_adr = 4'd0;
wire   [24:0] litedramcore_sdram_bankmachine1_wrport_dat_r;
wire   [24:0] litedramcore_sdram_bankmachine1_wrport_dat_w;
wire          litedramcore_sdram_bankmachine1_wrport_we;
reg           litedramcore_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [12:0] litedramcore_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire    [1:0] litedramcore_sdram_bankmachine2_cmd_payload_ba;
reg           litedramcore_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_ready = 1'd0;
reg           litedramcore_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine2_consume = 4'd0;
wire          litedramcore_sdram_bankmachine2_do_read;
wire          litedramcore_sdram_bankmachine2_fifo_in_first;
wire          litedramcore_sdram_bankmachine2_fifo_in_last;
wire   [21:0] litedramcore_sdram_bankmachine2_fifo_in_payload_addr;
wire          litedramcore_sdram_bankmachine2_fifo_in_payload_we;
wire          litedramcore_sdram_bankmachine2_fifo_out_first;
wire          litedramcore_sdram_bankmachine2_fifo_out_last;
wire   [21:0] litedramcore_sdram_bankmachine2_fifo_out_payload_addr;
wire          litedramcore_sdram_bankmachine2_fifo_out_payload_we;
reg     [4:0] litedramcore_sdram_bankmachine2_level = 5'd0;
wire          litedramcore_sdram_bankmachine2_pipe_valid_sink_first;
wire          litedramcore_sdram_bankmachine2_pipe_valid_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          litedramcore_sdram_bankmachine2_pipe_valid_sink_ready;
wire          litedramcore_sdram_bankmachine2_pipe_valid_sink_valid;
reg           litedramcore_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           litedramcore_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [21:0] litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg           litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          litedramcore_sdram_bankmachine2_pipe_valid_source_ready;
reg           litedramcore_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine2_produce = 4'd0;
wire    [3:0] litedramcore_sdram_bankmachine2_rdport_adr;
wire   [24:0] litedramcore_sdram_bankmachine2_rdport_dat_r;
reg           litedramcore_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          litedramcore_sdram_bankmachine2_refresh_req;
reg           litedramcore_sdram_bankmachine2_replace = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine2_req_addr;
wire          litedramcore_sdram_bankmachine2_req_lock;
reg           litedramcore_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          litedramcore_sdram_bankmachine2_req_ready;
wire          litedramcore_sdram_bankmachine2_req_valid;
reg           litedramcore_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          litedramcore_sdram_bankmachine2_req_we;
reg    [12:0] litedramcore_sdram_bankmachine2_row = 13'd0;
reg           litedramcore_sdram_bankmachine2_row_close = 1'd0;
reg           litedramcore_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          litedramcore_sdram_bankmachine2_row_hit;
reg           litedramcore_sdram_bankmachine2_row_open = 1'd0;
reg           litedramcore_sdram_bankmachine2_row_opened = 1'd0;
reg           litedramcore_sdram_bankmachine2_sink_first = 1'd0;
reg           litedramcore_sdram_bankmachine2_sink_last = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine2_sink_payload_addr;
wire          litedramcore_sdram_bankmachine2_sink_payload_we;
wire          litedramcore_sdram_bankmachine2_sink_ready;
wire          litedramcore_sdram_bankmachine2_sink_sink_first;
wire          litedramcore_sdram_bankmachine2_sink_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine2_sink_sink_payload_addr;
wire          litedramcore_sdram_bankmachine2_sink_sink_payload_we;
wire          litedramcore_sdram_bankmachine2_sink_sink_ready;
wire          litedramcore_sdram_bankmachine2_sink_sink_valid;
wire          litedramcore_sdram_bankmachine2_sink_valid;
wire          litedramcore_sdram_bankmachine2_source_first;
wire          litedramcore_sdram_bankmachine2_source_last;
wire   [21:0] litedramcore_sdram_bankmachine2_source_payload_addr;
wire          litedramcore_sdram_bankmachine2_source_payload_we;
wire          litedramcore_sdram_bankmachine2_source_ready;
wire          litedramcore_sdram_bankmachine2_source_source_first;
wire          litedramcore_sdram_bankmachine2_source_source_last;
wire   [21:0] litedramcore_sdram_bankmachine2_source_source_payload_addr;
wire          litedramcore_sdram_bankmachine2_source_source_payload_we;
wire          litedramcore_sdram_bankmachine2_source_source_ready;
wire          litedramcore_sdram_bankmachine2_source_source_valid;
wire          litedramcore_sdram_bankmachine2_source_valid;
wire   [24:0] litedramcore_sdram_bankmachine2_syncfifo2_din;
wire   [24:0] litedramcore_sdram_bankmachine2_syncfifo2_dout;
wire          litedramcore_sdram_bankmachine2_syncfifo2_re;
wire          litedramcore_sdram_bankmachine2_syncfifo2_readable;
wire          litedramcore_sdram_bankmachine2_syncfifo2_we;
wire          litedramcore_sdram_bankmachine2_syncfifo2_writable;
reg     [1:0] litedramcore_sdram_bankmachine2_trascon_count = 2'd0;
reg           litedramcore_sdram_bankmachine2_trascon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine2_trascon_valid;
reg     [1:0] litedramcore_sdram_bankmachine2_trccon_count = 2'd0;
reg           litedramcore_sdram_bankmachine2_trccon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine2_trccon_valid;
reg     [1:0] litedramcore_sdram_bankmachine2_twtpcon_count = 2'd0;
reg           litedramcore_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine2_twtpcon_valid;
reg     [3:0] litedramcore_sdram_bankmachine2_wrport_adr = 4'd0;
wire   [24:0] litedramcore_sdram_bankmachine2_wrport_dat_r;
wire   [24:0] litedramcore_sdram_bankmachine2_wrport_dat_w;
wire          litedramcore_sdram_bankmachine2_wrport_we;
reg           litedramcore_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [12:0] litedramcore_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire    [1:0] litedramcore_sdram_bankmachine3_cmd_payload_ba;
reg           litedramcore_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_ready = 1'd0;
reg           litedramcore_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine3_consume = 4'd0;
wire          litedramcore_sdram_bankmachine3_do_read;
wire          litedramcore_sdram_bankmachine3_fifo_in_first;
wire          litedramcore_sdram_bankmachine3_fifo_in_last;
wire   [21:0] litedramcore_sdram_bankmachine3_fifo_in_payload_addr;
wire          litedramcore_sdram_bankmachine3_fifo_in_payload_we;
wire          litedramcore_sdram_bankmachine3_fifo_out_first;
wire          litedramcore_sdram_bankmachine3_fifo_out_last;
wire   [21:0] litedramcore_sdram_bankmachine3_fifo_out_payload_addr;
wire          litedramcore_sdram_bankmachine3_fifo_out_payload_we;
reg     [4:0] litedramcore_sdram_bankmachine3_level = 5'd0;
wire          litedramcore_sdram_bankmachine3_pipe_valid_sink_first;
wire          litedramcore_sdram_bankmachine3_pipe_valid_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          litedramcore_sdram_bankmachine3_pipe_valid_sink_ready;
wire          litedramcore_sdram_bankmachine3_pipe_valid_sink_valid;
reg           litedramcore_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           litedramcore_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [21:0] litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg           litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          litedramcore_sdram_bankmachine3_pipe_valid_source_ready;
reg           litedramcore_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [3:0] litedramcore_sdram_bankmachine3_produce = 4'd0;
wire    [3:0] litedramcore_sdram_bankmachine3_rdport_adr;
wire   [24:0] litedramcore_sdram_bankmachine3_rdport_dat_r;
reg           litedramcore_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          litedramcore_sdram_bankmachine3_refresh_req;
reg           litedramcore_sdram_bankmachine3_replace = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine3_req_addr;
wire          litedramcore_sdram_bankmachine3_req_lock;
reg           litedramcore_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          litedramcore_sdram_bankmachine3_req_ready;
wire          litedramcore_sdram_bankmachine3_req_valid;
reg           litedramcore_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          litedramcore_sdram_bankmachine3_req_we;
reg    [12:0] litedramcore_sdram_bankmachine3_row = 13'd0;
reg           litedramcore_sdram_bankmachine3_row_close = 1'd0;
reg           litedramcore_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          litedramcore_sdram_bankmachine3_row_hit;
reg           litedramcore_sdram_bankmachine3_row_open = 1'd0;
reg           litedramcore_sdram_bankmachine3_row_opened = 1'd0;
reg           litedramcore_sdram_bankmachine3_sink_first = 1'd0;
reg           litedramcore_sdram_bankmachine3_sink_last = 1'd0;
wire   [21:0] litedramcore_sdram_bankmachine3_sink_payload_addr;
wire          litedramcore_sdram_bankmachine3_sink_payload_we;
wire          litedramcore_sdram_bankmachine3_sink_ready;
wire          litedramcore_sdram_bankmachine3_sink_sink_first;
wire          litedramcore_sdram_bankmachine3_sink_sink_last;
wire   [21:0] litedramcore_sdram_bankmachine3_sink_sink_payload_addr;
wire          litedramcore_sdram_bankmachine3_sink_sink_payload_we;
wire          litedramcore_sdram_bankmachine3_sink_sink_ready;
wire          litedramcore_sdram_bankmachine3_sink_sink_valid;
wire          litedramcore_sdram_bankmachine3_sink_valid;
wire          litedramcore_sdram_bankmachine3_source_first;
wire          litedramcore_sdram_bankmachine3_source_last;
wire   [21:0] litedramcore_sdram_bankmachine3_source_payload_addr;
wire          litedramcore_sdram_bankmachine3_source_payload_we;
wire          litedramcore_sdram_bankmachine3_source_ready;
wire          litedramcore_sdram_bankmachine3_source_source_first;
wire          litedramcore_sdram_bankmachine3_source_source_last;
wire   [21:0] litedramcore_sdram_bankmachine3_source_source_payload_addr;
wire          litedramcore_sdram_bankmachine3_source_source_payload_we;
wire          litedramcore_sdram_bankmachine3_source_source_ready;
wire          litedramcore_sdram_bankmachine3_source_source_valid;
wire          litedramcore_sdram_bankmachine3_source_valid;
wire   [24:0] litedramcore_sdram_bankmachine3_syncfifo3_din;
wire   [24:0] litedramcore_sdram_bankmachine3_syncfifo3_dout;
wire          litedramcore_sdram_bankmachine3_syncfifo3_re;
wire          litedramcore_sdram_bankmachine3_syncfifo3_readable;
wire          litedramcore_sdram_bankmachine3_syncfifo3_we;
wire          litedramcore_sdram_bankmachine3_syncfifo3_writable;
reg     [1:0] litedramcore_sdram_bankmachine3_trascon_count = 2'd0;
reg           litedramcore_sdram_bankmachine3_trascon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine3_trascon_valid;
reg     [1:0] litedramcore_sdram_bankmachine3_trccon_count = 2'd0;
reg           litedramcore_sdram_bankmachine3_trccon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine3_trccon_valid;
reg     [1:0] litedramcore_sdram_bankmachine3_twtpcon_count = 2'd0;
reg           litedramcore_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          litedramcore_sdram_bankmachine3_twtpcon_valid;
reg     [3:0] litedramcore_sdram_bankmachine3_wrport_adr = 4'd0;
wire   [24:0] litedramcore_sdram_bankmachine3_wrport_dat_r;
wire   [24:0] litedramcore_sdram_bankmachine3_wrport_dat_w;
wire          litedramcore_sdram_bankmachine3_wrport_we;
wire          litedramcore_sdram_cas_allowed;
wire          litedramcore_sdram_choose_cmd_ce;
wire   [12:0] litedramcore_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] litedramcore_sdram_choose_cmd_cmd_payload_ba;
reg           litedramcore_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          litedramcore_sdram_choose_cmd_cmd_payload_is_cmd;
wire          litedramcore_sdram_choose_cmd_cmd_payload_is_read;
wire          litedramcore_sdram_choose_cmd_cmd_payload_is_write;
reg           litedramcore_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_choose_cmd_cmd_ready = 1'd0;
wire          litedramcore_sdram_choose_cmd_cmd_valid;
reg     [1:0] litedramcore_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] litedramcore_sdram_choose_cmd_request;
reg     [3:0] litedramcore_sdram_choose_cmd_valids = 4'd0;
reg           litedramcore_sdram_choose_cmd_want_activates = 1'd0;
reg           litedramcore_sdram_choose_cmd_want_cmds = 1'd0;
reg           litedramcore_sdram_choose_cmd_want_reads = 1'd0;
reg           litedramcore_sdram_choose_cmd_want_writes = 1'd0;
wire          litedramcore_sdram_choose_req_ce;
wire   [12:0] litedramcore_sdram_choose_req_cmd_payload_a;
wire    [1:0] litedramcore_sdram_choose_req_cmd_payload_ba;
reg           litedramcore_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          litedramcore_sdram_choose_req_cmd_payload_is_cmd;
wire          litedramcore_sdram_choose_req_cmd_payload_is_read;
wire          litedramcore_sdram_choose_req_cmd_payload_is_write;
reg           litedramcore_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_choose_req_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_choose_req_cmd_ready = 1'd0;
wire          litedramcore_sdram_choose_req_cmd_valid;
reg     [1:0] litedramcore_sdram_choose_req_grant = 2'd0;
wire    [3:0] litedramcore_sdram_choose_req_request;
reg     [3:0] litedramcore_sdram_choose_req_valids = 4'd0;
reg           litedramcore_sdram_choose_req_want_activates = 1'd0;
wire          litedramcore_sdram_choose_req_want_cmds;
reg           litedramcore_sdram_choose_req_want_reads = 1'd0;
reg           litedramcore_sdram_choose_req_want_writes = 1'd0;
wire          litedramcore_sdram_cke;
reg           litedramcore_sdram_cmd_last = 1'd0;
reg    [12:0] litedramcore_sdram_cmd_payload_a = 13'd0;
reg     [1:0] litedramcore_sdram_cmd_payload_ba = 2'd0;
reg           litedramcore_sdram_cmd_payload_cas = 1'd0;
reg           litedramcore_sdram_cmd_payload_is_read = 1'd0;
reg           litedramcore_sdram_cmd_payload_is_write = 1'd0;
reg           litedramcore_sdram_cmd_payload_ras = 1'd0;
reg           litedramcore_sdram_cmd_payload_we = 1'd0;
reg           litedramcore_sdram_cmd_ready = 1'd0;
reg           litedramcore_sdram_cmd_valid = 1'd0;
wire          litedramcore_sdram_command_issue_r;
reg           litedramcore_sdram_command_issue_re = 1'd0;
reg           litedramcore_sdram_command_issue_w = 1'd0;
reg           litedramcore_sdram_command_issue_we = 1'd0;
reg           litedramcore_sdram_command_re = 1'd0;
reg     [7:0] litedramcore_sdram_command_storage = 8'd0;
reg           litedramcore_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [12:0] litedramcore_sdram_csr_dfi_p0_address;
wire    [1:0] litedramcore_sdram_csr_dfi_p0_bank;
reg           litedramcore_sdram_csr_dfi_p0_cas_n = 1'd1;
reg           litedramcore_sdram_csr_dfi_p0_cke = 1'd0;
reg           litedramcore_sdram_csr_dfi_p0_cs_n = 1'd1;
reg           litedramcore_sdram_csr_dfi_p0_odt = 1'd0;
reg           litedramcore_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [15:0] litedramcore_sdram_csr_dfi_p0_rddata = 16'd0;
wire          litedramcore_sdram_csr_dfi_p0_rddata_en;
reg           litedramcore_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          litedramcore_sdram_csr_dfi_p0_reset_n;
reg           litedramcore_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [15:0] litedramcore_sdram_csr_dfi_p0_wrdata;
wire          litedramcore_sdram_csr_dfi_p0_wrdata_en;
wire    [1:0] litedramcore_sdram_csr_dfi_p0_wrdata_mask;
wire          litedramcore_sdram_csrfield_cas;
wire          litedramcore_sdram_csrfield_cs;
wire          litedramcore_sdram_csrfield_cs_bottom;
wire          litedramcore_sdram_csrfield_cs_top;
wire          litedramcore_sdram_csrfield_ras;
wire          litedramcore_sdram_csrfield_rden;
wire          litedramcore_sdram_csrfield_we;
wire          litedramcore_sdram_csrfield_wren;
reg           litedramcore_sdram_dfi_p0_act_n = 1'd1;
reg    [12:0] litedramcore_sdram_dfi_p0_address = 13'd0;
reg     [1:0] litedramcore_sdram_dfi_p0_bank = 2'd0;
reg           litedramcore_sdram_dfi_p0_cas_n = 1'd1;
wire          litedramcore_sdram_dfi_p0_cke;
reg           litedramcore_sdram_dfi_p0_cs_n = 1'd1;
wire          litedramcore_sdram_dfi_p0_odt;
reg           litedramcore_sdram_dfi_p0_ras_n = 1'd1;
wire   [15:0] litedramcore_sdram_dfi_p0_rddata;
reg           litedramcore_sdram_dfi_p0_rddata_en = 1'd0;
wire          litedramcore_sdram_dfi_p0_rddata_valid;
wire          litedramcore_sdram_dfi_p0_reset_n;
reg           litedramcore_sdram_dfi_p0_we_n = 1'd1;
wire   [15:0] litedramcore_sdram_dfi_p0_wrdata;
reg           litedramcore_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [1:0] litedramcore_sdram_dfi_p0_wrdata_mask;
reg           litedramcore_sdram_en0 = 1'd0;
reg           litedramcore_sdram_en1 = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [12:0] litedramcore_sdram_ext_dfi_p0_address = 13'd0;
reg     [1:0] litedramcore_sdram_ext_dfi_p0_bank = 2'd0;
reg           litedramcore_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           litedramcore_sdram_ext_dfi_p0_cke = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           litedramcore_sdram_ext_dfi_p0_odt = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [15:0] litedramcore_sdram_ext_dfi_p0_rddata = 16'd0;
reg           litedramcore_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           litedramcore_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [15:0] litedramcore_sdram_ext_dfi_p0_wrdata = 16'd0;
reg           litedramcore_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [1:0] litedramcore_sdram_ext_dfi_p0_wrdata_mask = 2'd0;
reg           litedramcore_sdram_ext_dfi_sel = 1'd0;
wire          litedramcore_sdram_go_to_refresh;
wire   [21:0] litedramcore_sdram_interface_bank0_addr;
wire          litedramcore_sdram_interface_bank0_lock;
wire          litedramcore_sdram_interface_bank0_rdata_valid;
wire          litedramcore_sdram_interface_bank0_ready;
wire          litedramcore_sdram_interface_bank0_valid;
wire          litedramcore_sdram_interface_bank0_wdata_ready;
wire          litedramcore_sdram_interface_bank0_we;
wire   [21:0] litedramcore_sdram_interface_bank1_addr;
wire          litedramcore_sdram_interface_bank1_lock;
wire          litedramcore_sdram_interface_bank1_rdata_valid;
wire          litedramcore_sdram_interface_bank1_ready;
wire          litedramcore_sdram_interface_bank1_valid;
wire          litedramcore_sdram_interface_bank1_wdata_ready;
wire          litedramcore_sdram_interface_bank1_we;
wire   [21:0] litedramcore_sdram_interface_bank2_addr;
wire          litedramcore_sdram_interface_bank2_lock;
wire          litedramcore_sdram_interface_bank2_rdata_valid;
wire          litedramcore_sdram_interface_bank2_ready;
wire          litedramcore_sdram_interface_bank2_valid;
wire          litedramcore_sdram_interface_bank2_wdata_ready;
wire          litedramcore_sdram_interface_bank2_we;
wire   [21:0] litedramcore_sdram_interface_bank3_addr;
wire          litedramcore_sdram_interface_bank3_lock;
wire          litedramcore_sdram_interface_bank3_rdata_valid;
wire          litedramcore_sdram_interface_bank3_ready;
wire          litedramcore_sdram_interface_bank3_valid;
wire          litedramcore_sdram_interface_bank3_wdata_ready;
wire          litedramcore_sdram_interface_bank3_we;
wire   [15:0] litedramcore_sdram_interface_rdata;
reg    [15:0] litedramcore_sdram_interface_wdata = 16'd0;
reg     [1:0] litedramcore_sdram_interface_wdata_we = 2'd0;
reg           litedramcore_sdram_master_p0_act_n = 1'd1;
reg    [12:0] litedramcore_sdram_master_p0_address = 13'd0;
reg     [1:0] litedramcore_sdram_master_p0_bank = 2'd0;
reg           litedramcore_sdram_master_p0_cas_n = 1'd1;
reg           litedramcore_sdram_master_p0_cke = 1'd0;
reg           litedramcore_sdram_master_p0_cs_n = 1'd1;
reg           litedramcore_sdram_master_p0_odt = 1'd0;
reg           litedramcore_sdram_master_p0_ras_n = 1'd1;
wire   [15:0] litedramcore_sdram_master_p0_rddata;
reg           litedramcore_sdram_master_p0_rddata_en = 1'd0;
wire          litedramcore_sdram_master_p0_rddata_valid;
reg           litedramcore_sdram_master_p0_reset_n = 1'd0;
reg           litedramcore_sdram_master_p0_we_n = 1'd1;
reg    [15:0] litedramcore_sdram_master_p0_wrdata = 16'd0;
reg           litedramcore_sdram_master_p0_wrdata_en = 1'd0;
reg     [1:0] litedramcore_sdram_master_p0_wrdata_mask = 2'd0;
wire          litedramcore_sdram_max_time0;
wire          litedramcore_sdram_max_time1;
reg    [12:0] litedramcore_sdram_nop_a = 13'd0;
reg     [1:0] litedramcore_sdram_nop_ba = 2'd0;
wire          litedramcore_sdram_odt;
reg           litedramcore_sdram_postponer_count = 1'd0;
wire          litedramcore_sdram_postponer_req_i;
reg           litedramcore_sdram_postponer_req_o = 1'd0;
wire          litedramcore_sdram_ras_allowed;
reg           litedramcore_sdram_rddata_re = 1'd0;
reg    [15:0] litedramcore_sdram_rddata_status = 16'd0;
wire          litedramcore_sdram_rddata_we;
reg           litedramcore_sdram_re = 1'd0;
wire          litedramcore_sdram_read_available;
wire          litedramcore_sdram_reset_n;
wire          litedramcore_sdram_sel;
reg           litedramcore_sdram_sequencer_count = 1'd0;
wire          litedramcore_sdram_sequencer_done0;
reg           litedramcore_sdram_sequencer_done1 = 1'd0;
reg           litedramcore_sdram_sequencer_start0 = 1'd0;
wire          litedramcore_sdram_sequencer_start1;
reg     [2:0] litedramcore_sdram_sequencer_trigger = 3'd0;
wire          litedramcore_sdram_slave_p0_act_n;
wire   [12:0] litedramcore_sdram_slave_p0_address;
wire    [1:0] litedramcore_sdram_slave_p0_bank;
wire          litedramcore_sdram_slave_p0_cas_n;
wire          litedramcore_sdram_slave_p0_cke;
wire          litedramcore_sdram_slave_p0_cs_n;
wire          litedramcore_sdram_slave_p0_odt;
wire          litedramcore_sdram_slave_p0_ras_n;
reg    [15:0] litedramcore_sdram_slave_p0_rddata = 16'd0;
wire          litedramcore_sdram_slave_p0_rddata_en;
reg           litedramcore_sdram_slave_p0_rddata_valid = 1'd0;
wire          litedramcore_sdram_slave_p0_reset_n;
wire          litedramcore_sdram_slave_p0_we_n;
wire   [15:0] litedramcore_sdram_slave_p0_wrdata;
wire          litedramcore_sdram_slave_p0_wrdata_en;
wire    [1:0] litedramcore_sdram_slave_p0_wrdata_mask;
reg           litedramcore_sdram_steerer0 = 1'd1;
reg           litedramcore_sdram_steerer1 = 1'd1;
reg     [1:0] litedramcore_sdram_steerer_sel = 2'd0;
reg     [3:0] litedramcore_sdram_storage = 4'd1;
reg           litedramcore_sdram_tccdcon_count = 1'd0;
reg           litedramcore_sdram_tccdcon_ready = 1'd0;
wire          litedramcore_sdram_tccdcon_valid;
reg           litedramcore_sdram_tfawcon_ready = 1'd1;
wire          litedramcore_sdram_tfawcon_valid;
reg     [4:0] litedramcore_sdram_time0 = 5'd0;
reg     [3:0] litedramcore_sdram_time1 = 4'd0;
wire    [8:0] litedramcore_sdram_timer_count0;
reg     [8:0] litedramcore_sdram_timer_count1 = 9'd390;
wire          litedramcore_sdram_timer_done0;
wire          litedramcore_sdram_timer_done1;
wire          litedramcore_sdram_timer_wait;
reg           litedramcore_sdram_trrdcon_count = 1'd0;
reg           litedramcore_sdram_trrdcon_ready = 1'd0;
wire          litedramcore_sdram_trrdcon_valid;
reg     [2:0] litedramcore_sdram_twtrcon_count = 3'd0;
reg           litedramcore_sdram_twtrcon_ready = 1'd0;
wire          litedramcore_sdram_twtrcon_valid;
wire          litedramcore_sdram_wants_refresh;
reg           litedramcore_sdram_wrdata_re = 1'd0;
reg    [15:0] litedramcore_sdram_wrdata_storage = 16'd0;
wire          litedramcore_sdram_write_available;
reg           litedramcore_soc_rst = 1'd0;
reg           litedramcore_status_re = 1'd0;
reg           litedramcore_status_status = 1'd0;
wire          litedramcore_status_we;
reg           litedramcore_update_value_re = 1'd0;
reg           litedramcore_update_value_storage = 1'd0;
reg    [31:0] litedramcore_value = 32'd0;
reg           litedramcore_value_re = 1'd0;
reg    [31:0] litedramcore_value_status = 32'd0;
wire          litedramcore_value_we;
reg    [31:0] litedramcore_vexriscv = 32'd0;
reg           litedramcore_wb_sdram_ack = 1'd0;
wire   [29:0] litedramcore_wb_sdram_adr;
wire    [1:0] litedramcore_wb_sdram_bte;
wire    [2:0] litedramcore_wb_sdram_cti;
wire          litedramcore_wb_sdram_cyc;
wire   [31:0] litedramcore_wb_sdram_dat_r;
wire   [31:0] litedramcore_wb_sdram_dat_w;
reg           litedramcore_wb_sdram_err = 1'd0;
wire    [3:0] litedramcore_wb_sdram_sel;
wire          litedramcore_wb_sdram_stb;
wire          litedramcore_wb_sdram_we;
wire          litedramcore_zero0;
wire          litedramcore_zero1;
wire          litedramcore_zero2;
reg           litedramcore_zero_clear = 1'd0;
reg           litedramcore_zero_pending = 1'd0;
wire          litedramcore_zero_status;
wire          litedramcore_zero_trigger;
reg           litedramcore_zero_trigger_d = 1'd0;
reg           litedramnativeport0_cmd_last = 1'd0;
reg    [23:0] litedramnativeport0_cmd_payload_addr = 24'd0;
reg           litedramnativeport0_cmd_payload_we = 1'd0;
wire          litedramnativeport0_cmd_ready;
reg           litedramnativeport0_cmd_valid = 1'd0;
wire   [15:0] litedramnativeport0_rdata_payload_data;
reg           litedramnativeport0_rdata_ready = 1'd0;
wire          litedramnativeport0_rdata_valid;
reg    [15:0] litedramnativeport0_wdata_payload_data = 16'd0;
reg     [1:0] litedramnativeport0_wdata_payload_we = 2'd0;
wire          litedramnativeport0_wdata_ready;
reg           litedramnativeport0_wdata_valid = 1'd0;
reg           litedramnativeport1_cmd_last = 1'd0;
reg    [23:0] litedramnativeport1_cmd_payload_addr = 24'd0;
reg           litedramnativeport1_cmd_payload_we = 1'd0;
wire          litedramnativeport1_cmd_ready;
reg           litedramnativeport1_cmd_valid = 1'd0;
wire   [15:0] litedramnativeport1_rdata_payload_data;
reg           litedramnativeport1_rdata_ready = 1'd0;
wire          litedramnativeport1_rdata_valid;
reg    [15:0] litedramnativeport1_wdata_payload_data = 16'd0;
reg     [1:0] litedramnativeport1_wdata_payload_we = 2'd0;
wire          litedramnativeport1_wdata_ready;
reg           litedramnativeport1_wdata_valid = 1'd0;
reg           litedramnativeport2_cmd_last = 1'd0;
reg    [23:0] litedramnativeport2_cmd_payload_addr = 24'd0;
reg           litedramnativeport2_cmd_payload_we = 1'd0;
wire          litedramnativeport2_cmd_ready;
reg           litedramnativeport2_cmd_valid = 1'd0;
wire   [15:0] litedramnativeport2_rdata_payload_data;
reg           litedramnativeport2_rdata_ready = 1'd0;
wire          litedramnativeport2_rdata_valid;
reg    [15:0] litedramnativeport2_wdata_payload_data = 16'd0;
reg     [1:0] litedramnativeport2_wdata_payload_we = 2'd0;
wire          litedramnativeport2_wdata_ready;
reg           litedramnativeport2_wdata_valid = 1'd0;
reg           litedramnativeport3_cmd_last = 1'd0;
reg    [23:0] litedramnativeport3_cmd_payload_addr = 24'd0;
reg           litedramnativeport3_cmd_payload_we = 1'd0;
wire          litedramnativeport3_cmd_ready;
reg           litedramnativeport3_cmd_valid = 1'd0;
wire   [15:0] litedramnativeport3_rdata_payload_data;
reg           litedramnativeport3_rdata_ready = 1'd0;
wire          litedramnativeport3_rdata_valid;
reg    [15:0] litedramnativeport3_wdata_payload_data = 16'd0;
reg     [1:0] litedramnativeport3_wdata_payload_we = 2'd0;
wire          litedramnativeport3_wdata_ready;
reg           litedramnativeport3_wdata_valid = 1'd0;
reg     [1:0] litedramwishbone2native_next_state = 2'd0;
reg     [1:0] litedramwishbone2native_state = 2'd0;
reg           locked0 = 1'd0;
reg           locked1 = 1'd0;
reg           locked10 = 1'd0;
reg           locked11 = 1'd0;
reg           locked12 = 1'd0;
reg           locked13 = 1'd0;
reg           locked14 = 1'd0;
reg           locked15 = 1'd0;
reg           locked16 = 1'd0;
reg           locked17 = 1'd0;
reg           locked18 = 1'd0;
reg           locked19 = 1'd0;
reg           locked2 = 1'd0;
reg           locked3 = 1'd0;
reg           locked4 = 1'd0;
reg           locked5 = 1'd0;
reg           locked6 = 1'd0;
reg           locked7 = 1'd0;
reg           locked8 = 1'd0;
reg           locked9 = 1'd0;
reg     [3:0] master = 4'd0;
reg     [2:0] multiplexer_next_state = 3'd0;
reg     [2:0] multiplexer_state = 3'd0;
reg           new_master_rdata_valid0 = 1'd0;
reg           new_master_rdata_valid1 = 1'd0;
reg           new_master_rdata_valid10 = 1'd0;
reg           new_master_rdata_valid11 = 1'd0;
reg           new_master_rdata_valid12 = 1'd0;
reg           new_master_rdata_valid13 = 1'd0;
reg           new_master_rdata_valid14 = 1'd0;
reg           new_master_rdata_valid15 = 1'd0;
reg           new_master_rdata_valid16 = 1'd0;
reg           new_master_rdata_valid17 = 1'd0;
reg           new_master_rdata_valid18 = 1'd0;
reg           new_master_rdata_valid19 = 1'd0;
reg           new_master_rdata_valid2 = 1'd0;
reg           new_master_rdata_valid3 = 1'd0;
reg           new_master_rdata_valid4 = 1'd0;
reg           new_master_rdata_valid5 = 1'd0;
reg           new_master_rdata_valid6 = 1'd0;
reg           new_master_rdata_valid7 = 1'd0;
reg           new_master_rdata_valid8 = 1'd0;
reg           new_master_rdata_valid9 = 1'd0;
reg           new_master_wdata_ready0 = 1'd0;
reg           new_master_wdata_ready1 = 1'd0;
reg           new_master_wdata_ready2 = 1'd0;
reg           new_master_wdata_ready3 = 1'd0;
reg           new_master_wdata_ready4 = 1'd0;
reg     [2:0] rddata_en = 3'd0;
reg     [1:0] refresher_next_state = 2'd0;
reg     [1:0] refresher_state = 2'd0;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
wire    [1:0] request;
reg    [29:0] rhs_self0 = 30'd0;
reg    [31:0] rhs_self1 = 32'd0;
reg     [1:0] rhs_self10 = 2'd0;
reg           rhs_self11 = 1'd0;
reg           rhs_self12 = 1'd0;
reg           rhs_self13 = 1'd0;
reg           rhs_self14 = 1'd0;
reg    [12:0] rhs_self15 = 13'd0;
reg     [1:0] rhs_self16 = 2'd0;
reg           rhs_self17 = 1'd0;
reg           rhs_self18 = 1'd0;
reg           rhs_self19 = 1'd0;
reg     [3:0] rhs_self2 = 4'd0;
reg    [21:0] rhs_self20 = 22'd0;
reg           rhs_self21 = 1'd0;
reg           rhs_self22 = 1'd0;
reg    [21:0] rhs_self23 = 22'd0;
reg           rhs_self24 = 1'd0;
reg           rhs_self25 = 1'd0;
reg    [21:0] rhs_self26 = 22'd0;
reg           rhs_self27 = 1'd0;
reg           rhs_self28 = 1'd0;
reg    [21:0] rhs_self29 = 22'd0;
reg           rhs_self3 = 1'd0;
reg           rhs_self30 = 1'd0;
reg           rhs_self31 = 1'd0;
reg           rhs_self4 = 1'd0;
reg           rhs_self5 = 1'd0;
reg     [2:0] rhs_self6 = 3'd0;
reg     [1:0] rhs_self7 = 2'd0;
reg           rhs_self8 = 1'd0;
reg    [12:0] rhs_self9 = 13'd0;
wire          roundrobin0_ce;
reg     [2:0] roundrobin0_grant = 3'd0;
wire    [4:0] roundrobin0_request;
wire          roundrobin1_ce;
reg     [2:0] roundrobin1_grant = 3'd0;
wire    [4:0] roundrobin1_request;
wire          roundrobin2_ce;
reg     [2:0] roundrobin2_grant = 3'd0;
wire    [4:0] roundrobin2_request;
wire          roundrobin3_ce;
reg     [2:0] roundrobin3_grant = 3'd0;
wire    [4:0] roundrobin3_request;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
wire          rst1;
reg     [3:0] rx_count = 4'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data = 8'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           rx_enable = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
wire          rx_source_ready;
reg           rx_source_valid = 1'd0;
reg           rx_tick = 1'd0;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_11;
wire          sdrio_clk_12;
wire          sdrio_clk_13;
wire          sdrio_clk_14;
wire          sdrio_clk_15;
wire          sdrio_clk_2;
wire          sdrio_clk_3;
wire          sdrio_clk_4;
wire          sdrio_clk_5;
wire          sdrio_clk_6;
wire          sdrio_clk_7;
wire          sdrio_clk_8;
wire          sdrio_clk_9;
reg     [1:0] self0 = 2'd0;
reg    [12:0] self1 = 13'd0;
reg           self2 = 1'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg           self6 = 1'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [3:0] slaves = 4'd0;
wire          sys_clk;
wire          sys_rst;
reg           t_self0 = 1'd0;
reg           t_self1 = 1'd0;
reg           t_self2 = 1'd0;
reg           t_self3 = 1'd0;
reg           t_self4 = 1'd0;
reg           t_self5 = 1'd0;
reg     [3:0] tx_count = 4'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] tx_data = 8'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           tx_enable = 1'd0;
reg    [31:0] tx_phase = 32'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_valid;
reg           tx_tick = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
wire          uart_rx0;
wire          uart_rx1;
wire          uart_rx2;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rx_trigger_d = 1'd0;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
wire          uart_tx0;
wire          uart_tx1;
wire          uart_tx2;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_tx_trigger_d = 1'd0;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
reg           user_enable0 = 1'd0;
reg           user_enable1 = 1'd0;
reg           user_enable2 = 1'd0;
reg           user_enable3 = 1'd0;
wire          wait_1;
wire          we;
reg     [1:0] wishbone2csr_next_state = 2'd0;
reg     [1:0] wishbone2csr_state = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign litedramcore_reset = (litedramcore_soc_rst | litedramcore_cpu_rst);
assign init_done = init_done_storage;
assign init_error = init_error_storage;
assign user_clk = sys_clk;
assign user_rst = sys_rst;
assign avalonmminterface0_avalon_port_address = user_port_avalon_0_address;
assign avalonmminterface0_avalon_port_writedata = user_port_avalon_0_writedata;
assign user_port_avalon_0_readdata = avalonmminterface0_avalon_port_readdata;
assign user_port_avalon_0_readdatavalid = avalonmminterface0_avalon_port_readdatavalid;
assign avalonmminterface0_avalon_port_burstcount = user_port_avalon_0_burstcount;
assign avalonmminterface0_avalon_port_byteenable = user_port_avalon_0_byteenable;
assign avalonmminterface0_avalon_port_write = (user_port_avalon_0_write & user_enable0);
assign avalonmminterface0_avalon_port_read = (user_port_avalon_0_read & user_enable0);
assign user_port_avalon_0_waitrequest = (avalonmminterface0_avalon_port_waitrequest | (~user_enable0));
assign avalonmminterface1_avalon_port_address = user_port_avalon_1_address;
assign avalonmminterface1_avalon_port_writedata = user_port_avalon_1_writedata;
assign user_port_avalon_1_readdata = avalonmminterface1_avalon_port_readdata;
assign user_port_avalon_1_readdatavalid = avalonmminterface1_avalon_port_readdatavalid;
assign avalonmminterface1_avalon_port_burstcount = user_port_avalon_1_burstcount;
assign avalonmminterface1_avalon_port_byteenable = user_port_avalon_1_byteenable;
assign avalonmminterface1_avalon_port_write = (user_port_avalon_1_write & user_enable1);
assign avalonmminterface1_avalon_port_read = (user_port_avalon_1_read & user_enable1);
assign user_port_avalon_1_waitrequest = (avalonmminterface1_avalon_port_waitrequest | (~user_enable1));
assign avalonmminterface2_avalon_port_address = user_port_avalon_2_address;
assign avalonmminterface2_avalon_port_writedata = user_port_avalon_2_writedata;
assign user_port_avalon_2_readdata = avalonmminterface2_avalon_port_readdata;
assign user_port_avalon_2_readdatavalid = avalonmminterface2_avalon_port_readdatavalid;
assign avalonmminterface2_avalon_port_burstcount = user_port_avalon_2_burstcount;
assign avalonmminterface2_avalon_port_byteenable = user_port_avalon_2_byteenable;
assign avalonmminterface2_avalon_port_write = (user_port_avalon_2_write & user_enable2);
assign avalonmminterface2_avalon_port_read = (user_port_avalon_2_read & user_enable2);
assign user_port_avalon_2_waitrequest = (avalonmminterface2_avalon_port_waitrequest | (~user_enable2));
assign avalonmminterface3_avalon_port_address = user_port_avalon_3_address;
assign avalonmminterface3_avalon_port_writedata = user_port_avalon_3_writedata;
assign user_port_avalon_3_readdata = avalonmminterface3_avalon_port_readdata;
assign user_port_avalon_3_readdatavalid = avalonmminterface3_avalon_port_readdatavalid;
assign avalonmminterface3_avalon_port_burstcount = user_port_avalon_3_burstcount;
assign avalonmminterface3_avalon_port_byteenable = user_port_avalon_3_byteenable;
assign avalonmminterface3_avalon_port_write = (user_port_avalon_3_write & user_enable3);
assign avalonmminterface3_avalon_port_read = (user_port_avalon_3_read & user_enable3);
assign user_port_avalon_3_waitrequest = (avalonmminterface3_avalon_port_waitrequest | (~user_enable3));
assign litedramcore_bus_error = error;
always @(*) begin
    litedramcore_interrupt <= 32'd0;
    litedramcore_interrupt[0] <= litedramcore_irq;
    litedramcore_interrupt[1] <= uart_irq;
end
assign shared_adr = rhs_self0;
assign shared_dat_w = rhs_self1;
assign shared_sel = rhs_self2;
assign shared_cyc = rhs_self3;
assign shared_stb = rhs_self4;
assign shared_we = rhs_self5;
assign shared_cti = rhs_self6;
assign shared_bte = rhs_self7;
assign litedramcore_ibus_dat_r = shared_dat_r;
assign litedramcore_dbus_dat_r = shared_dat_r;
assign litedramcore_ibus_ack = (shared_ack & (grant == 1'd0));
assign litedramcore_dbus_ack = (shared_ack & (grant == 1'd1));
assign litedramcore_ibus_err = (shared_err & (grant == 1'd0));
assign litedramcore_dbus_err = (shared_err & (grant == 1'd1));
assign request = {litedramcore_dbus_cyc, litedramcore_ibus_cyc};
always @(*) begin
    master <= 4'd0;
    master[0] <= (shared_adr[29:14] == 1'd0);
    master[1] <= (shared_adr[29:11] == 16'd32768);
    master[2] <= (shared_adr[29:22] == 7'd64);
    master[3] <= (shared_adr[29:14] == 16'd61440);
end
assign litedramcore_litedramcore_ram_bus_adr = shared_adr;
assign litedramcore_litedramcore_ram_bus_dat_w = shared_dat_w;
assign litedramcore_litedramcore_ram_bus_sel = shared_sel;
assign litedramcore_litedramcore_ram_bus_stb = shared_stb;
assign litedramcore_litedramcore_ram_bus_we = shared_we;
assign litedramcore_litedramcore_ram_bus_cti = shared_cti;
assign litedramcore_litedramcore_ram_bus_bte = shared_bte;
assign litedramcore_ram_bus_ram_bus_adr = shared_adr;
assign litedramcore_ram_bus_ram_bus_dat_w = shared_dat_w;
assign litedramcore_ram_bus_ram_bus_sel = shared_sel;
assign litedramcore_ram_bus_ram_bus_stb = shared_stb;
assign litedramcore_ram_bus_ram_bus_we = shared_we;
assign litedramcore_ram_bus_ram_bus_cti = shared_cti;
assign litedramcore_ram_bus_ram_bus_bte = shared_bte;
assign litedramcore_wb_sdram_adr = shared_adr;
assign litedramcore_wb_sdram_dat_w = shared_dat_w;
assign litedramcore_wb_sdram_sel = shared_sel;
assign litedramcore_wb_sdram_stb = shared_stb;
assign litedramcore_wb_sdram_we = shared_we;
assign litedramcore_wb_sdram_cti = shared_cti;
assign litedramcore_wb_sdram_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign litedramcore_litedramcore_ram_bus_cyc = (shared_cyc & master[0]);
assign litedramcore_ram_bus_ram_bus_cyc = (shared_cyc & master[1]);
assign litedramcore_wb_sdram_cyc = (shared_cyc & master[2]);
assign interface0_cyc = (shared_cyc & master[3]);
always @(*) begin
    shared_ack <= 1'd0;
    shared_ack <= (((litedramcore_litedramcore_ram_bus_ack | litedramcore_ram_bus_ram_bus_ack) | litedramcore_wb_sdram_ack) | interface0_ack);
    if (done) begin
        shared_ack <= 1'd1;
    end
end
assign shared_err = (((litedramcore_litedramcore_ram_bus_err | litedramcore_ram_bus_ram_bus_err) | litedramcore_wb_sdram_err) | interface0_err);
always @(*) begin
    shared_dat_r <= 32'd0;
    shared_dat_r <= (((({32{slaves[0]}} & litedramcore_litedramcore_ram_bus_dat_r) | ({32{slaves[1]}} & litedramcore_ram_bus_ram_bus_dat_r)) | ({32{slaves[2]}} & litedramcore_wb_sdram_dat_r)) | ({32{slaves[3]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
    end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    if (done) begin
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign litedramcore_bus_errors_status = litedramcore_bus_errors;
assign litedramcore_litedramcore_adr = litedramcore_litedramcore_ram_bus_adr[13:0];
assign litedramcore_litedramcore_ram_bus_dat_r = litedramcore_litedramcore_dat_r;
always @(*) begin
    litedramcore_ram_we <= 4'd0;
    litedramcore_ram_we[0] <= (((litedramcore_ram_bus_ram_bus_cyc & litedramcore_ram_bus_ram_bus_stb) & litedramcore_ram_bus_ram_bus_we) & litedramcore_ram_bus_ram_bus_sel[0]);
    litedramcore_ram_we[1] <= (((litedramcore_ram_bus_ram_bus_cyc & litedramcore_ram_bus_ram_bus_stb) & litedramcore_ram_bus_ram_bus_we) & litedramcore_ram_bus_ram_bus_sel[1]);
    litedramcore_ram_we[2] <= (((litedramcore_ram_bus_ram_bus_cyc & litedramcore_ram_bus_ram_bus_stb) & litedramcore_ram_bus_ram_bus_we) & litedramcore_ram_bus_ram_bus_sel[2]);
    litedramcore_ram_we[3] <= (((litedramcore_ram_bus_ram_bus_cyc & litedramcore_ram_bus_ram_bus_stb) & litedramcore_ram_bus_ram_bus_we) & litedramcore_ram_bus_ram_bus_sel[3]);
end
assign litedramcore_ram_adr = litedramcore_ram_bus_ram_bus_adr[10:0];
assign litedramcore_ram_bus_ram_bus_dat_r = litedramcore_ram_dat_r;
assign litedramcore_ram_dat_w = litedramcore_ram_bus_ram_bus_dat_w;
assign litedramcore_zero_trigger = (litedramcore_value == 1'd0);
assign litedramcore_zero0 = litedramcore_zero_status;
assign litedramcore_zero1 = litedramcore_zero_pending;
always @(*) begin
    litedramcore_zero_clear <= 1'd0;
    if ((litedramcore_pending_re & litedramcore_pending_r)) begin
        litedramcore_zero_clear <= 1'd1;
    end
end
assign litedramcore_irq = (litedramcore_pending_status & litedramcore_enable_storage);
assign litedramcore_zero_status = litedramcore_zero_trigger;
always @(*) begin
    rs232phytx_next_state <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                if ((tx_count == 4'd9)) begin
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (tx_sink_valid) begin
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    tx_sink_ready <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    tx_data_rs232phytx_next_value2 <= 8'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
            end
        end
        default: begin
            if (tx_sink_valid) begin
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
            end
        end
    endcase
end
always @(*) begin
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
            if (tx_sink_valid) begin
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    tx_enable <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    tx_count_rs232phytx_next_value0 <= 4'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    latticeplatform_obj_uart_tx_rs232phytx_next_value1 <= 1'd0;
    case (rs232phytx_state)
        1'd1: begin
            if (tx_tick) begin
                latticeplatform_obj_uart_tx_rs232phytx_next_value1 <= tx_data;
            end
        end
        default: begin
            latticeplatform_obj_uart_tx_rs232phytx_next_value1 <= 1'd1;
            if (tx_sink_valid) begin
                latticeplatform_obj_uart_tx_rs232phytx_next_value1 <= 1'd0;
            end
        end
    endcase
end
always @(*) begin
    rs232phyrx_next_state <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                if ((rx_count == 4'd9)) begin
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rx_source_valid <= 1'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    rx_source_payload_data <= 8'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                if ((rx_count == 4'd9)) begin
                    rx_source_payload_data <= rx_data;
                end
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    rx_enable <= 1'd0;
    case (rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    case (rs232phyrx_state)
        1'd1: begin
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign sys_clk = clk;
assign dfi_p0_address = litedramcore_sdram_master_p0_address;
assign dfi_p0_bank = litedramcore_sdram_master_p0_bank;
assign dfi_p0_cas_n = litedramcore_sdram_master_p0_cas_n;
assign dfi_p0_cs_n = litedramcore_sdram_master_p0_cs_n;
assign dfi_p0_ras_n = litedramcore_sdram_master_p0_ras_n;
assign dfi_p0_we_n = litedramcore_sdram_master_p0_we_n;
assign dfi_p0_cke = litedramcore_sdram_master_p0_cke;
assign dfi_p0_odt = litedramcore_sdram_master_p0_odt;
assign dfi_p0_reset_n = litedramcore_sdram_master_p0_reset_n;
assign dfi_p0_act_n = litedramcore_sdram_master_p0_act_n;
assign dfi_p0_wrdata = litedramcore_sdram_master_p0_wrdata;
assign dfi_p0_wrdata_en = litedramcore_sdram_master_p0_wrdata_en;
assign dfi_p0_wrdata_mask = litedramcore_sdram_master_p0_wrdata_mask;
assign dfi_p0_rddata_en = litedramcore_sdram_master_p0_rddata_en;
assign litedramcore_sdram_master_p0_rddata = dfi_p0_rddata;
assign litedramcore_sdram_master_p0_rddata_valid = dfi_p0_rddata_valid;
assign litedramcore_sdram_slave_p0_address = litedramcore_sdram_dfi_p0_address;
assign litedramcore_sdram_slave_p0_bank = litedramcore_sdram_dfi_p0_bank;
assign litedramcore_sdram_slave_p0_cas_n = litedramcore_sdram_dfi_p0_cas_n;
assign litedramcore_sdram_slave_p0_cs_n = litedramcore_sdram_dfi_p0_cs_n;
assign litedramcore_sdram_slave_p0_ras_n = litedramcore_sdram_dfi_p0_ras_n;
assign litedramcore_sdram_slave_p0_we_n = litedramcore_sdram_dfi_p0_we_n;
assign litedramcore_sdram_slave_p0_cke = litedramcore_sdram_dfi_p0_cke;
assign litedramcore_sdram_slave_p0_odt = litedramcore_sdram_dfi_p0_odt;
assign litedramcore_sdram_slave_p0_reset_n = litedramcore_sdram_dfi_p0_reset_n;
assign litedramcore_sdram_slave_p0_act_n = litedramcore_sdram_dfi_p0_act_n;
assign litedramcore_sdram_slave_p0_wrdata = litedramcore_sdram_dfi_p0_wrdata;
assign litedramcore_sdram_slave_p0_wrdata_en = litedramcore_sdram_dfi_p0_wrdata_en;
assign litedramcore_sdram_slave_p0_wrdata_mask = litedramcore_sdram_dfi_p0_wrdata_mask;
assign litedramcore_sdram_slave_p0_rddata_en = litedramcore_sdram_dfi_p0_rddata_en;
assign litedramcore_sdram_dfi_p0_rddata = litedramcore_sdram_slave_p0_rddata;
assign litedramcore_sdram_dfi_p0_rddata_valid = litedramcore_sdram_slave_p0_rddata_valid;
always @(*) begin
    litedramcore_sdram_master_p0_ras_n <= 1'd1;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_ras_n <= litedramcore_sdram_ext_dfi_p0_ras_n;
        end else begin
            litedramcore_sdram_master_p0_ras_n <= litedramcore_sdram_slave_p0_ras_n;
        end
    end else begin
        litedramcore_sdram_master_p0_ras_n <= litedramcore_sdram_csr_dfi_p0_ras_n;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_we_n <= 1'd1;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_we_n <= litedramcore_sdram_ext_dfi_p0_we_n;
        end else begin
            litedramcore_sdram_master_p0_we_n <= litedramcore_sdram_slave_p0_we_n;
        end
    end else begin
        litedramcore_sdram_master_p0_we_n <= litedramcore_sdram_csr_dfi_p0_we_n;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_cke <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_cke <= litedramcore_sdram_ext_dfi_p0_cke;
        end else begin
            litedramcore_sdram_master_p0_cke <= litedramcore_sdram_slave_p0_cke;
        end
    end else begin
        litedramcore_sdram_master_p0_cke <= litedramcore_sdram_csr_dfi_p0_cke;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_odt <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_odt <= litedramcore_sdram_ext_dfi_p0_odt;
        end else begin
            litedramcore_sdram_master_p0_odt <= litedramcore_sdram_slave_p0_odt;
        end
    end else begin
        litedramcore_sdram_master_p0_odt <= litedramcore_sdram_csr_dfi_p0_odt;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_reset_n <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_reset_n <= litedramcore_sdram_ext_dfi_p0_reset_n;
        end else begin
            litedramcore_sdram_master_p0_reset_n <= litedramcore_sdram_slave_p0_reset_n;
        end
    end else begin
        litedramcore_sdram_master_p0_reset_n <= litedramcore_sdram_csr_dfi_p0_reset_n;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_act_n <= 1'd1;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_act_n <= litedramcore_sdram_ext_dfi_p0_act_n;
        end else begin
            litedramcore_sdram_master_p0_act_n <= litedramcore_sdram_slave_p0_act_n;
        end
    end else begin
        litedramcore_sdram_master_p0_act_n <= litedramcore_sdram_csr_dfi_p0_act_n;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_wrdata <= 16'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_wrdata <= litedramcore_sdram_ext_dfi_p0_wrdata;
        end else begin
            litedramcore_sdram_master_p0_wrdata <= litedramcore_sdram_slave_p0_wrdata;
        end
    end else begin
        litedramcore_sdram_master_p0_wrdata <= litedramcore_sdram_csr_dfi_p0_wrdata;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_wrdata_en <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_wrdata_en <= litedramcore_sdram_ext_dfi_p0_wrdata_en;
        end else begin
            litedramcore_sdram_master_p0_wrdata_en <= litedramcore_sdram_slave_p0_wrdata_en;
        end
    end else begin
        litedramcore_sdram_master_p0_wrdata_en <= litedramcore_sdram_csr_dfi_p0_wrdata_en;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_wrdata_mask <= 2'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_wrdata_mask <= litedramcore_sdram_ext_dfi_p0_wrdata_mask;
        end else begin
            litedramcore_sdram_master_p0_wrdata_mask <= litedramcore_sdram_slave_p0_wrdata_mask;
        end
    end else begin
        litedramcore_sdram_master_p0_wrdata_mask <= litedramcore_sdram_csr_dfi_p0_wrdata_mask;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_rddata_en <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_rddata_en <= litedramcore_sdram_ext_dfi_p0_rddata_en;
        end else begin
            litedramcore_sdram_master_p0_rddata_en <= litedramcore_sdram_slave_p0_rddata_en;
        end
    end else begin
        litedramcore_sdram_master_p0_rddata_en <= litedramcore_sdram_csr_dfi_p0_rddata_en;
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_rddata <= 16'd0;
    if (litedramcore_sdram_sel) begin
    end else begin
        litedramcore_sdram_csr_dfi_p0_rddata <= litedramcore_sdram_master_p0_rddata;
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    if (litedramcore_sdram_sel) begin
    end else begin
        litedramcore_sdram_csr_dfi_p0_rddata_valid <= litedramcore_sdram_master_p0_rddata_valid;
    end
end
always @(*) begin
    litedramcore_sdram_ext_dfi_p0_rddata <= 16'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_ext_dfi_p0_rddata <= litedramcore_sdram_master_p0_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    litedramcore_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_ext_dfi_p0_rddata_valid <= litedramcore_sdram_master_p0_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    litedramcore_sdram_slave_p0_rddata <= 16'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            litedramcore_sdram_slave_p0_rddata <= litedramcore_sdram_master_p0_rddata;
        end
    end else begin
    end
end
always @(*) begin
    litedramcore_sdram_slave_p0_rddata_valid <= 1'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
        end else begin
            litedramcore_sdram_slave_p0_rddata_valid <= litedramcore_sdram_master_p0_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_address <= 13'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_address <= litedramcore_sdram_ext_dfi_p0_address;
        end else begin
            litedramcore_sdram_master_p0_address <= litedramcore_sdram_slave_p0_address;
        end
    end else begin
        litedramcore_sdram_master_p0_address <= litedramcore_sdram_csr_dfi_p0_address;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_bank <= 2'd0;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_bank <= litedramcore_sdram_ext_dfi_p0_bank;
        end else begin
            litedramcore_sdram_master_p0_bank <= litedramcore_sdram_slave_p0_bank;
        end
    end else begin
        litedramcore_sdram_master_p0_bank <= litedramcore_sdram_csr_dfi_p0_bank;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_cas_n <= 1'd1;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_cas_n <= litedramcore_sdram_ext_dfi_p0_cas_n;
        end else begin
            litedramcore_sdram_master_p0_cas_n <= litedramcore_sdram_slave_p0_cas_n;
        end
    end else begin
        litedramcore_sdram_master_p0_cas_n <= litedramcore_sdram_csr_dfi_p0_cas_n;
    end
end
always @(*) begin
    litedramcore_sdram_master_p0_cs_n <= 1'd1;
    if (litedramcore_sdram_sel) begin
        if (litedramcore_sdram_ext_dfi_sel) begin
            litedramcore_sdram_master_p0_cs_n <= litedramcore_sdram_ext_dfi_p0_cs_n;
        end else begin
            litedramcore_sdram_master_p0_cs_n <= litedramcore_sdram_slave_p0_cs_n;
            if (1'd0) begin
                litedramcore_sdram_master_p0_cs_n <= {2{litedramcore_sdram_slave_p0_cs_n}};
            end
        end
    end else begin
        litedramcore_sdram_master_p0_cs_n <= litedramcore_sdram_csr_dfi_p0_cs_n;
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_cke <= 1'd0;
    litedramcore_sdram_csr_dfi_p0_cke <= litedramcore_sdram_cke;
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_odt <= 1'd0;
    litedramcore_sdram_csr_dfi_p0_odt <= litedramcore_sdram_odt;
end
assign litedramcore_sdram_csr_dfi_p0_reset_n = litedramcore_sdram_reset_n;
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (litedramcore_sdram_command_issue_re) begin
        litedramcore_sdram_csr_dfi_p0_we_n <= (~litedramcore_sdram_csrfield_we);
    end else begin
        litedramcore_sdram_csr_dfi_p0_we_n <= 1'd1;
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_cas_n <= 1'd1;
    if (litedramcore_sdram_command_issue_re) begin
        litedramcore_sdram_csr_dfi_p0_cas_n <= (~litedramcore_sdram_csrfield_cas);
    end else begin
        litedramcore_sdram_csr_dfi_p0_cas_n <= 1'd1;
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_cs_n <= 1'd1;
    if (litedramcore_sdram_command_issue_re) begin
        if (litedramcore_sdram_csrfield_cs_top) begin
            litedramcore_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (litedramcore_sdram_csrfield_cs_bottom) begin
                litedramcore_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                litedramcore_sdram_csr_dfi_p0_cs_n <= {1{(~litedramcore_sdram_csrfield_cs)}};
            end
        end
    end else begin
        litedramcore_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
    end
end
always @(*) begin
    litedramcore_sdram_csr_dfi_p0_ras_n <= 1'd1;
    if (litedramcore_sdram_command_issue_re) begin
        litedramcore_sdram_csr_dfi_p0_ras_n <= (~litedramcore_sdram_csrfield_ras);
    end else begin
        litedramcore_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign litedramcore_sdram_csr_dfi_p0_address = litedramcore_sdram_address_storage;
assign litedramcore_sdram_csr_dfi_p0_bank = litedramcore_sdram_baddress_storage;
assign litedramcore_sdram_csr_dfi_p0_wrdata_en = (litedramcore_sdram_command_issue_re & litedramcore_sdram_csrfield_wren);
assign litedramcore_sdram_csr_dfi_p0_rddata_en = (litedramcore_sdram_command_issue_re & litedramcore_sdram_csrfield_rden);
assign litedramcore_sdram_csr_dfi_p0_wrdata = litedramcore_sdram_wrdata_storage;
assign litedramcore_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign litedramcore_sdram_bankmachine0_req_valid = litedramcore_sdram_interface_bank0_valid;
assign litedramcore_sdram_interface_bank0_ready = litedramcore_sdram_bankmachine0_req_ready;
assign litedramcore_sdram_bankmachine0_req_we = litedramcore_sdram_interface_bank0_we;
assign litedramcore_sdram_bankmachine0_req_addr = litedramcore_sdram_interface_bank0_addr;
assign litedramcore_sdram_interface_bank0_lock = litedramcore_sdram_bankmachine0_req_lock;
assign litedramcore_sdram_interface_bank0_wdata_ready = litedramcore_sdram_bankmachine0_req_wdata_ready;
assign litedramcore_sdram_interface_bank0_rdata_valid = litedramcore_sdram_bankmachine0_req_rdata_valid;
assign litedramcore_sdram_bankmachine1_req_valid = litedramcore_sdram_interface_bank1_valid;
assign litedramcore_sdram_interface_bank1_ready = litedramcore_sdram_bankmachine1_req_ready;
assign litedramcore_sdram_bankmachine1_req_we = litedramcore_sdram_interface_bank1_we;
assign litedramcore_sdram_bankmachine1_req_addr = litedramcore_sdram_interface_bank1_addr;
assign litedramcore_sdram_interface_bank1_lock = litedramcore_sdram_bankmachine1_req_lock;
assign litedramcore_sdram_interface_bank1_wdata_ready = litedramcore_sdram_bankmachine1_req_wdata_ready;
assign litedramcore_sdram_interface_bank1_rdata_valid = litedramcore_sdram_bankmachine1_req_rdata_valid;
assign litedramcore_sdram_bankmachine2_req_valid = litedramcore_sdram_interface_bank2_valid;
assign litedramcore_sdram_interface_bank2_ready = litedramcore_sdram_bankmachine2_req_ready;
assign litedramcore_sdram_bankmachine2_req_we = litedramcore_sdram_interface_bank2_we;
assign litedramcore_sdram_bankmachine2_req_addr = litedramcore_sdram_interface_bank2_addr;
assign litedramcore_sdram_interface_bank2_lock = litedramcore_sdram_bankmachine2_req_lock;
assign litedramcore_sdram_interface_bank2_wdata_ready = litedramcore_sdram_bankmachine2_req_wdata_ready;
assign litedramcore_sdram_interface_bank2_rdata_valid = litedramcore_sdram_bankmachine2_req_rdata_valid;
assign litedramcore_sdram_bankmachine3_req_valid = litedramcore_sdram_interface_bank3_valid;
assign litedramcore_sdram_interface_bank3_ready = litedramcore_sdram_bankmachine3_req_ready;
assign litedramcore_sdram_bankmachine3_req_we = litedramcore_sdram_interface_bank3_we;
assign litedramcore_sdram_bankmachine3_req_addr = litedramcore_sdram_interface_bank3_addr;
assign litedramcore_sdram_interface_bank3_lock = litedramcore_sdram_bankmachine3_req_lock;
assign litedramcore_sdram_interface_bank3_wdata_ready = litedramcore_sdram_bankmachine3_req_wdata_ready;
assign litedramcore_sdram_interface_bank3_rdata_valid = litedramcore_sdram_bankmachine3_req_rdata_valid;
assign litedramcore_sdram_timer_wait = (~litedramcore_sdram_timer_done0);
assign litedramcore_sdram_postponer_req_i = litedramcore_sdram_timer_done0;
assign litedramcore_sdram_wants_refresh = litedramcore_sdram_postponer_req_o;
assign litedramcore_sdram_timer_done1 = (litedramcore_sdram_timer_count1 == 1'd0);
assign litedramcore_sdram_timer_done0 = litedramcore_sdram_timer_done1;
assign litedramcore_sdram_timer_count0 = litedramcore_sdram_timer_count1;
assign litedramcore_sdram_sequencer_start1 = (litedramcore_sdram_sequencer_start0 | (litedramcore_sdram_sequencer_count != 1'd0));
assign litedramcore_sdram_sequencer_done0 = (litedramcore_sdram_sequencer_done1 & (litedramcore_sdram_sequencer_count == 1'd0));
always @(*) begin
    refresher_next_state <= 2'd0;
    refresher_next_state <= refresher_state;
    case (refresher_state)
        1'd1: begin
            if (litedramcore_sdram_cmd_ready) begin
                refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (litedramcore_sdram_sequencer_done0) begin
                refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (litedramcore_sdram_wants_refresh) begin
                    refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_cmd_last <= 1'd0;
    case (refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramcore_sdram_sequencer_done0) begin
                litedramcore_sdram_cmd_last <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_cmd_valid <= 1'd0;
    case (refresher_state)
        1'd1: begin
            litedramcore_sdram_cmd_valid <= 1'd1;
        end
        2'd2: begin
            litedramcore_sdram_cmd_valid <= 1'd1;
            if (litedramcore_sdram_sequencer_done0) begin
                litedramcore_sdram_cmd_valid <= 1'd0;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_sequencer_start0 <= 1'd0;
    case (refresher_state)
        1'd1: begin
            if (litedramcore_sdram_cmd_ready) begin
                litedramcore_sdram_sequencer_start0 <= 1'd1;
            end
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
assign litedramcore_sdram_bankmachine0_sink_valid = litedramcore_sdram_bankmachine0_req_valid;
assign litedramcore_sdram_bankmachine0_req_ready = litedramcore_sdram_bankmachine0_sink_ready;
assign litedramcore_sdram_bankmachine0_sink_payload_we = litedramcore_sdram_bankmachine0_req_we;
assign litedramcore_sdram_bankmachine0_sink_payload_addr = litedramcore_sdram_bankmachine0_req_addr;
assign litedramcore_sdram_bankmachine0_sink_sink_valid = litedramcore_sdram_bankmachine0_source_valid;
assign litedramcore_sdram_bankmachine0_source_ready = litedramcore_sdram_bankmachine0_sink_sink_ready;
assign litedramcore_sdram_bankmachine0_sink_sink_first = litedramcore_sdram_bankmachine0_source_first;
assign litedramcore_sdram_bankmachine0_sink_sink_last = litedramcore_sdram_bankmachine0_source_last;
assign litedramcore_sdram_bankmachine0_sink_sink_payload_we = litedramcore_sdram_bankmachine0_source_payload_we;
assign litedramcore_sdram_bankmachine0_sink_sink_payload_addr = litedramcore_sdram_bankmachine0_source_payload_addr;
assign litedramcore_sdram_bankmachine0_source_source_ready = (litedramcore_sdram_bankmachine0_req_wdata_ready | litedramcore_sdram_bankmachine0_req_rdata_valid);
assign litedramcore_sdram_bankmachine0_req_lock = (litedramcore_sdram_bankmachine0_source_valid | litedramcore_sdram_bankmachine0_source_source_valid);
assign litedramcore_sdram_bankmachine0_row_hit = (litedramcore_sdram_bankmachine0_row == litedramcore_sdram_bankmachine0_source_source_payload_addr[21:9]);
assign litedramcore_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_a <= 13'd0;
    if (litedramcore_sdram_bankmachine0_row_col_n_addr_sel) begin
        litedramcore_sdram_bankmachine0_cmd_payload_a <= litedramcore_sdram_bankmachine0_source_source_payload_addr[21:9];
    end else begin
        litedramcore_sdram_bankmachine0_cmd_payload_a <= ((litedramcore_sdram_bankmachine0_auto_precharge <<< 4'd10) | {litedramcore_sdram_bankmachine0_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign litedramcore_sdram_bankmachine0_twtpcon_valid = ((litedramcore_sdram_bankmachine0_cmd_valid & litedramcore_sdram_bankmachine0_cmd_ready) & litedramcore_sdram_bankmachine0_cmd_payload_is_write);
assign litedramcore_sdram_bankmachine0_trccon_valid = ((litedramcore_sdram_bankmachine0_cmd_valid & litedramcore_sdram_bankmachine0_cmd_ready) & litedramcore_sdram_bankmachine0_row_open);
assign litedramcore_sdram_bankmachine0_trascon_valid = ((litedramcore_sdram_bankmachine0_cmd_valid & litedramcore_sdram_bankmachine0_cmd_ready) & litedramcore_sdram_bankmachine0_row_open);
always @(*) begin
    litedramcore_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((litedramcore_sdram_bankmachine0_source_valid & litedramcore_sdram_bankmachine0_source_source_valid)) begin
        if ((litedramcore_sdram_bankmachine0_source_payload_addr[21:9] != litedramcore_sdram_bankmachine0_source_source_payload_addr[21:9])) begin
            litedramcore_sdram_bankmachine0_auto_precharge <= (litedramcore_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign litedramcore_sdram_bankmachine0_syncfifo0_din = {litedramcore_sdram_bankmachine0_fifo_in_last, litedramcore_sdram_bankmachine0_fifo_in_first, litedramcore_sdram_bankmachine0_fifo_in_payload_addr, litedramcore_sdram_bankmachine0_fifo_in_payload_we};
assign {litedramcore_sdram_bankmachine0_fifo_out_last, litedramcore_sdram_bankmachine0_fifo_out_first, litedramcore_sdram_bankmachine0_fifo_out_payload_addr, litedramcore_sdram_bankmachine0_fifo_out_payload_we} = litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {litedramcore_sdram_bankmachine0_fifo_out_last, litedramcore_sdram_bankmachine0_fifo_out_first, litedramcore_sdram_bankmachine0_fifo_out_payload_addr, litedramcore_sdram_bankmachine0_fifo_out_payload_we} = litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {litedramcore_sdram_bankmachine0_fifo_out_last, litedramcore_sdram_bankmachine0_fifo_out_first, litedramcore_sdram_bankmachine0_fifo_out_payload_addr, litedramcore_sdram_bankmachine0_fifo_out_payload_we} = litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign {litedramcore_sdram_bankmachine0_fifo_out_last, litedramcore_sdram_bankmachine0_fifo_out_first, litedramcore_sdram_bankmachine0_fifo_out_payload_addr, litedramcore_sdram_bankmachine0_fifo_out_payload_we} = litedramcore_sdram_bankmachine0_syncfifo0_dout;
assign litedramcore_sdram_bankmachine0_sink_ready = litedramcore_sdram_bankmachine0_syncfifo0_writable;
assign litedramcore_sdram_bankmachine0_syncfifo0_we = litedramcore_sdram_bankmachine0_sink_valid;
assign litedramcore_sdram_bankmachine0_fifo_in_first = litedramcore_sdram_bankmachine0_sink_first;
assign litedramcore_sdram_bankmachine0_fifo_in_last = litedramcore_sdram_bankmachine0_sink_last;
assign litedramcore_sdram_bankmachine0_fifo_in_payload_we = litedramcore_sdram_bankmachine0_sink_payload_we;
assign litedramcore_sdram_bankmachine0_fifo_in_payload_addr = litedramcore_sdram_bankmachine0_sink_payload_addr;
assign litedramcore_sdram_bankmachine0_source_valid = litedramcore_sdram_bankmachine0_syncfifo0_readable;
assign litedramcore_sdram_bankmachine0_source_first = litedramcore_sdram_bankmachine0_fifo_out_first;
assign litedramcore_sdram_bankmachine0_source_last = litedramcore_sdram_bankmachine0_fifo_out_last;
assign litedramcore_sdram_bankmachine0_source_payload_we = litedramcore_sdram_bankmachine0_fifo_out_payload_we;
assign litedramcore_sdram_bankmachine0_source_payload_addr = litedramcore_sdram_bankmachine0_fifo_out_payload_addr;
assign litedramcore_sdram_bankmachine0_syncfifo0_re = litedramcore_sdram_bankmachine0_source_ready;
always @(*) begin
    litedramcore_sdram_bankmachine0_wrport_adr <= 4'd0;
    if (litedramcore_sdram_bankmachine0_replace) begin
        litedramcore_sdram_bankmachine0_wrport_adr <= (litedramcore_sdram_bankmachine0_produce - 1'd1);
    end else begin
        litedramcore_sdram_bankmachine0_wrport_adr <= litedramcore_sdram_bankmachine0_produce;
    end
end
assign litedramcore_sdram_bankmachine0_wrport_dat_w = litedramcore_sdram_bankmachine0_syncfifo0_din;
assign litedramcore_sdram_bankmachine0_wrport_we = (litedramcore_sdram_bankmachine0_syncfifo0_we & (litedramcore_sdram_bankmachine0_syncfifo0_writable | litedramcore_sdram_bankmachine0_replace));
assign litedramcore_sdram_bankmachine0_do_read = (litedramcore_sdram_bankmachine0_syncfifo0_readable & litedramcore_sdram_bankmachine0_syncfifo0_re);
assign litedramcore_sdram_bankmachine0_rdport_adr = litedramcore_sdram_bankmachine0_consume;
assign litedramcore_sdram_bankmachine0_syncfifo0_dout = litedramcore_sdram_bankmachine0_rdport_dat_r;
assign litedramcore_sdram_bankmachine0_syncfifo0_writable = (litedramcore_sdram_bankmachine0_level != 5'd16);
assign litedramcore_sdram_bankmachine0_syncfifo0_readable = (litedramcore_sdram_bankmachine0_level != 1'd0);
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_ready = ((~litedramcore_sdram_bankmachine0_pipe_valid_source_valid) | litedramcore_sdram_bankmachine0_pipe_valid_source_ready);
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_valid = litedramcore_sdram_bankmachine0_sink_sink_valid;
assign litedramcore_sdram_bankmachine0_sink_sink_ready = litedramcore_sdram_bankmachine0_pipe_valid_sink_ready;
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_first = litedramcore_sdram_bankmachine0_sink_sink_first;
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_last = litedramcore_sdram_bankmachine0_sink_sink_last;
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we = litedramcore_sdram_bankmachine0_sink_sink_payload_we;
assign litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr = litedramcore_sdram_bankmachine0_sink_sink_payload_addr;
assign litedramcore_sdram_bankmachine0_source_source_valid = litedramcore_sdram_bankmachine0_pipe_valid_source_valid;
assign litedramcore_sdram_bankmachine0_pipe_valid_source_ready = litedramcore_sdram_bankmachine0_source_source_ready;
assign litedramcore_sdram_bankmachine0_source_source_first = litedramcore_sdram_bankmachine0_pipe_valid_source_first;
assign litedramcore_sdram_bankmachine0_source_source_last = litedramcore_sdram_bankmachine0_pipe_valid_source_last;
assign litedramcore_sdram_bankmachine0_source_source_payload_we = litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we;
assign litedramcore_sdram_bankmachine0_source_source_payload_addr = litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine0_next_state <= 3'd0;
    bankmachine0_next_state <= bankmachine0_state;
    case (bankmachine0_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                if (litedramcore_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                bankmachine0_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                if (litedramcore_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if ((~litedramcore_sdram_bankmachine0_refresh_req)) begin
                bankmachine0_next_state <= 1'd0;
            end
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
                bankmachine0_next_state <= 3'd4;
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if ((litedramcore_sdram_bankmachine0_cmd_ready & litedramcore_sdram_bankmachine0_auto_precharge)) begin
                                bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                litedramcore_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            litedramcore_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                litedramcore_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if (litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            litedramcore_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if (litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if (litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if (litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine0_req_wdata_ready <= litedramcore_sdram_bankmachine0_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            if (litedramcore_sdram_bankmachine0_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine0_req_rdata_valid <= litedramcore_sdram_bankmachine0_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_refresh_gnt <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramcore_sdram_bankmachine0_twtpcon_ready) begin
                litedramcore_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_row_open <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                litedramcore_sdram_bankmachine0_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_valid <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine0_twtpcon_ready & litedramcore_sdram_bankmachine0_trascon_ready)) begin
                litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine0_trccon_ready) begin
                litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine0_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine0_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine0_row_opened) begin
                        if (litedramcore_sdram_bankmachine0_row_hit) begin
                            litedramcore_sdram_bankmachine0_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine0_row_close <= 1'd0;
    case (bankmachine0_state)
        1'd1: begin
            litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramcore_sdram_bankmachine0_row_close <= 1'd1;
        end
        default: begin
        end
    endcase
end
assign litedramcore_sdram_bankmachine1_sink_valid = litedramcore_sdram_bankmachine1_req_valid;
assign litedramcore_sdram_bankmachine1_req_ready = litedramcore_sdram_bankmachine1_sink_ready;
assign litedramcore_sdram_bankmachine1_sink_payload_we = litedramcore_sdram_bankmachine1_req_we;
assign litedramcore_sdram_bankmachine1_sink_payload_addr = litedramcore_sdram_bankmachine1_req_addr;
assign litedramcore_sdram_bankmachine1_sink_sink_valid = litedramcore_sdram_bankmachine1_source_valid;
assign litedramcore_sdram_bankmachine1_source_ready = litedramcore_sdram_bankmachine1_sink_sink_ready;
assign litedramcore_sdram_bankmachine1_sink_sink_first = litedramcore_sdram_bankmachine1_source_first;
assign litedramcore_sdram_bankmachine1_sink_sink_last = litedramcore_sdram_bankmachine1_source_last;
assign litedramcore_sdram_bankmachine1_sink_sink_payload_we = litedramcore_sdram_bankmachine1_source_payload_we;
assign litedramcore_sdram_bankmachine1_sink_sink_payload_addr = litedramcore_sdram_bankmachine1_source_payload_addr;
assign litedramcore_sdram_bankmachine1_source_source_ready = (litedramcore_sdram_bankmachine1_req_wdata_ready | litedramcore_sdram_bankmachine1_req_rdata_valid);
assign litedramcore_sdram_bankmachine1_req_lock = (litedramcore_sdram_bankmachine1_source_valid | litedramcore_sdram_bankmachine1_source_source_valid);
assign litedramcore_sdram_bankmachine1_row_hit = (litedramcore_sdram_bankmachine1_row == litedramcore_sdram_bankmachine1_source_source_payload_addr[21:9]);
assign litedramcore_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_a <= 13'd0;
    if (litedramcore_sdram_bankmachine1_row_col_n_addr_sel) begin
        litedramcore_sdram_bankmachine1_cmd_payload_a <= litedramcore_sdram_bankmachine1_source_source_payload_addr[21:9];
    end else begin
        litedramcore_sdram_bankmachine1_cmd_payload_a <= ((litedramcore_sdram_bankmachine1_auto_precharge <<< 4'd10) | {litedramcore_sdram_bankmachine1_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign litedramcore_sdram_bankmachine1_twtpcon_valid = ((litedramcore_sdram_bankmachine1_cmd_valid & litedramcore_sdram_bankmachine1_cmd_ready) & litedramcore_sdram_bankmachine1_cmd_payload_is_write);
assign litedramcore_sdram_bankmachine1_trccon_valid = ((litedramcore_sdram_bankmachine1_cmd_valid & litedramcore_sdram_bankmachine1_cmd_ready) & litedramcore_sdram_bankmachine1_row_open);
assign litedramcore_sdram_bankmachine1_trascon_valid = ((litedramcore_sdram_bankmachine1_cmd_valid & litedramcore_sdram_bankmachine1_cmd_ready) & litedramcore_sdram_bankmachine1_row_open);
always @(*) begin
    litedramcore_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((litedramcore_sdram_bankmachine1_source_valid & litedramcore_sdram_bankmachine1_source_source_valid)) begin
        if ((litedramcore_sdram_bankmachine1_source_payload_addr[21:9] != litedramcore_sdram_bankmachine1_source_source_payload_addr[21:9])) begin
            litedramcore_sdram_bankmachine1_auto_precharge <= (litedramcore_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign litedramcore_sdram_bankmachine1_syncfifo1_din = {litedramcore_sdram_bankmachine1_fifo_in_last, litedramcore_sdram_bankmachine1_fifo_in_first, litedramcore_sdram_bankmachine1_fifo_in_payload_addr, litedramcore_sdram_bankmachine1_fifo_in_payload_we};
assign {litedramcore_sdram_bankmachine1_fifo_out_last, litedramcore_sdram_bankmachine1_fifo_out_first, litedramcore_sdram_bankmachine1_fifo_out_payload_addr, litedramcore_sdram_bankmachine1_fifo_out_payload_we} = litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {litedramcore_sdram_bankmachine1_fifo_out_last, litedramcore_sdram_bankmachine1_fifo_out_first, litedramcore_sdram_bankmachine1_fifo_out_payload_addr, litedramcore_sdram_bankmachine1_fifo_out_payload_we} = litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {litedramcore_sdram_bankmachine1_fifo_out_last, litedramcore_sdram_bankmachine1_fifo_out_first, litedramcore_sdram_bankmachine1_fifo_out_payload_addr, litedramcore_sdram_bankmachine1_fifo_out_payload_we} = litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign {litedramcore_sdram_bankmachine1_fifo_out_last, litedramcore_sdram_bankmachine1_fifo_out_first, litedramcore_sdram_bankmachine1_fifo_out_payload_addr, litedramcore_sdram_bankmachine1_fifo_out_payload_we} = litedramcore_sdram_bankmachine1_syncfifo1_dout;
assign litedramcore_sdram_bankmachine1_sink_ready = litedramcore_sdram_bankmachine1_syncfifo1_writable;
assign litedramcore_sdram_bankmachine1_syncfifo1_we = litedramcore_sdram_bankmachine1_sink_valid;
assign litedramcore_sdram_bankmachine1_fifo_in_first = litedramcore_sdram_bankmachine1_sink_first;
assign litedramcore_sdram_bankmachine1_fifo_in_last = litedramcore_sdram_bankmachine1_sink_last;
assign litedramcore_sdram_bankmachine1_fifo_in_payload_we = litedramcore_sdram_bankmachine1_sink_payload_we;
assign litedramcore_sdram_bankmachine1_fifo_in_payload_addr = litedramcore_sdram_bankmachine1_sink_payload_addr;
assign litedramcore_sdram_bankmachine1_source_valid = litedramcore_sdram_bankmachine1_syncfifo1_readable;
assign litedramcore_sdram_bankmachine1_source_first = litedramcore_sdram_bankmachine1_fifo_out_first;
assign litedramcore_sdram_bankmachine1_source_last = litedramcore_sdram_bankmachine1_fifo_out_last;
assign litedramcore_sdram_bankmachine1_source_payload_we = litedramcore_sdram_bankmachine1_fifo_out_payload_we;
assign litedramcore_sdram_bankmachine1_source_payload_addr = litedramcore_sdram_bankmachine1_fifo_out_payload_addr;
assign litedramcore_sdram_bankmachine1_syncfifo1_re = litedramcore_sdram_bankmachine1_source_ready;
always @(*) begin
    litedramcore_sdram_bankmachine1_wrport_adr <= 4'd0;
    if (litedramcore_sdram_bankmachine1_replace) begin
        litedramcore_sdram_bankmachine1_wrport_adr <= (litedramcore_sdram_bankmachine1_produce - 1'd1);
    end else begin
        litedramcore_sdram_bankmachine1_wrport_adr <= litedramcore_sdram_bankmachine1_produce;
    end
end
assign litedramcore_sdram_bankmachine1_wrport_dat_w = litedramcore_sdram_bankmachine1_syncfifo1_din;
assign litedramcore_sdram_bankmachine1_wrport_we = (litedramcore_sdram_bankmachine1_syncfifo1_we & (litedramcore_sdram_bankmachine1_syncfifo1_writable | litedramcore_sdram_bankmachine1_replace));
assign litedramcore_sdram_bankmachine1_do_read = (litedramcore_sdram_bankmachine1_syncfifo1_readable & litedramcore_sdram_bankmachine1_syncfifo1_re);
assign litedramcore_sdram_bankmachine1_rdport_adr = litedramcore_sdram_bankmachine1_consume;
assign litedramcore_sdram_bankmachine1_syncfifo1_dout = litedramcore_sdram_bankmachine1_rdport_dat_r;
assign litedramcore_sdram_bankmachine1_syncfifo1_writable = (litedramcore_sdram_bankmachine1_level != 5'd16);
assign litedramcore_sdram_bankmachine1_syncfifo1_readable = (litedramcore_sdram_bankmachine1_level != 1'd0);
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_ready = ((~litedramcore_sdram_bankmachine1_pipe_valid_source_valid) | litedramcore_sdram_bankmachine1_pipe_valid_source_ready);
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_valid = litedramcore_sdram_bankmachine1_sink_sink_valid;
assign litedramcore_sdram_bankmachine1_sink_sink_ready = litedramcore_sdram_bankmachine1_pipe_valid_sink_ready;
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_first = litedramcore_sdram_bankmachine1_sink_sink_first;
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_last = litedramcore_sdram_bankmachine1_sink_sink_last;
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we = litedramcore_sdram_bankmachine1_sink_sink_payload_we;
assign litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr = litedramcore_sdram_bankmachine1_sink_sink_payload_addr;
assign litedramcore_sdram_bankmachine1_source_source_valid = litedramcore_sdram_bankmachine1_pipe_valid_source_valid;
assign litedramcore_sdram_bankmachine1_pipe_valid_source_ready = litedramcore_sdram_bankmachine1_source_source_ready;
assign litedramcore_sdram_bankmachine1_source_source_first = litedramcore_sdram_bankmachine1_pipe_valid_source_first;
assign litedramcore_sdram_bankmachine1_source_source_last = litedramcore_sdram_bankmachine1_pipe_valid_source_last;
assign litedramcore_sdram_bankmachine1_source_source_payload_we = litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we;
assign litedramcore_sdram_bankmachine1_source_source_payload_addr = litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine1_next_state <= 3'd0;
    bankmachine1_next_state <= bankmachine1_state;
    case (bankmachine1_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                if (litedramcore_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                bankmachine1_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                if (litedramcore_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if ((~litedramcore_sdram_bankmachine1_refresh_req)) begin
                bankmachine1_next_state <= 1'd0;
            end
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
                bankmachine1_next_state <= 3'd4;
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if ((litedramcore_sdram_bankmachine1_cmd_ready & litedramcore_sdram_bankmachine1_auto_precharge)) begin
                                bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if (litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            litedramcore_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if (litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if (litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if (litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine1_req_wdata_ready <= litedramcore_sdram_bankmachine1_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            if (litedramcore_sdram_bankmachine1_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine1_req_rdata_valid <= litedramcore_sdram_bankmachine1_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_refresh_gnt <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramcore_sdram_bankmachine1_twtpcon_ready) begin
                litedramcore_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_row_open <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                litedramcore_sdram_bankmachine1_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_valid <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            litedramcore_sdram_bankmachine1_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_row_close <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
            litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramcore_sdram_bankmachine1_row_close <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                litedramcore_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine1_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine1_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine1_row_opened) begin
                        if (litedramcore_sdram_bankmachine1_row_hit) begin
                            litedramcore_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    case (bankmachine1_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine1_twtpcon_ready & litedramcore_sdram_bankmachine1_trascon_ready)) begin
                litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine1_trccon_ready) begin
                litedramcore_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
assign litedramcore_sdram_bankmachine2_sink_valid = litedramcore_sdram_bankmachine2_req_valid;
assign litedramcore_sdram_bankmachine2_req_ready = litedramcore_sdram_bankmachine2_sink_ready;
assign litedramcore_sdram_bankmachine2_sink_payload_we = litedramcore_sdram_bankmachine2_req_we;
assign litedramcore_sdram_bankmachine2_sink_payload_addr = litedramcore_sdram_bankmachine2_req_addr;
assign litedramcore_sdram_bankmachine2_sink_sink_valid = litedramcore_sdram_bankmachine2_source_valid;
assign litedramcore_sdram_bankmachine2_source_ready = litedramcore_sdram_bankmachine2_sink_sink_ready;
assign litedramcore_sdram_bankmachine2_sink_sink_first = litedramcore_sdram_bankmachine2_source_first;
assign litedramcore_sdram_bankmachine2_sink_sink_last = litedramcore_sdram_bankmachine2_source_last;
assign litedramcore_sdram_bankmachine2_sink_sink_payload_we = litedramcore_sdram_bankmachine2_source_payload_we;
assign litedramcore_sdram_bankmachine2_sink_sink_payload_addr = litedramcore_sdram_bankmachine2_source_payload_addr;
assign litedramcore_sdram_bankmachine2_source_source_ready = (litedramcore_sdram_bankmachine2_req_wdata_ready | litedramcore_sdram_bankmachine2_req_rdata_valid);
assign litedramcore_sdram_bankmachine2_req_lock = (litedramcore_sdram_bankmachine2_source_valid | litedramcore_sdram_bankmachine2_source_source_valid);
assign litedramcore_sdram_bankmachine2_row_hit = (litedramcore_sdram_bankmachine2_row == litedramcore_sdram_bankmachine2_source_source_payload_addr[21:9]);
assign litedramcore_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_a <= 13'd0;
    if (litedramcore_sdram_bankmachine2_row_col_n_addr_sel) begin
        litedramcore_sdram_bankmachine2_cmd_payload_a <= litedramcore_sdram_bankmachine2_source_source_payload_addr[21:9];
    end else begin
        litedramcore_sdram_bankmachine2_cmd_payload_a <= ((litedramcore_sdram_bankmachine2_auto_precharge <<< 4'd10) | {litedramcore_sdram_bankmachine2_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign litedramcore_sdram_bankmachine2_twtpcon_valid = ((litedramcore_sdram_bankmachine2_cmd_valid & litedramcore_sdram_bankmachine2_cmd_ready) & litedramcore_sdram_bankmachine2_cmd_payload_is_write);
assign litedramcore_sdram_bankmachine2_trccon_valid = ((litedramcore_sdram_bankmachine2_cmd_valid & litedramcore_sdram_bankmachine2_cmd_ready) & litedramcore_sdram_bankmachine2_row_open);
assign litedramcore_sdram_bankmachine2_trascon_valid = ((litedramcore_sdram_bankmachine2_cmd_valid & litedramcore_sdram_bankmachine2_cmd_ready) & litedramcore_sdram_bankmachine2_row_open);
always @(*) begin
    litedramcore_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((litedramcore_sdram_bankmachine2_source_valid & litedramcore_sdram_bankmachine2_source_source_valid)) begin
        if ((litedramcore_sdram_bankmachine2_source_payload_addr[21:9] != litedramcore_sdram_bankmachine2_source_source_payload_addr[21:9])) begin
            litedramcore_sdram_bankmachine2_auto_precharge <= (litedramcore_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign litedramcore_sdram_bankmachine2_syncfifo2_din = {litedramcore_sdram_bankmachine2_fifo_in_last, litedramcore_sdram_bankmachine2_fifo_in_first, litedramcore_sdram_bankmachine2_fifo_in_payload_addr, litedramcore_sdram_bankmachine2_fifo_in_payload_we};
assign {litedramcore_sdram_bankmachine2_fifo_out_last, litedramcore_sdram_bankmachine2_fifo_out_first, litedramcore_sdram_bankmachine2_fifo_out_payload_addr, litedramcore_sdram_bankmachine2_fifo_out_payload_we} = litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {litedramcore_sdram_bankmachine2_fifo_out_last, litedramcore_sdram_bankmachine2_fifo_out_first, litedramcore_sdram_bankmachine2_fifo_out_payload_addr, litedramcore_sdram_bankmachine2_fifo_out_payload_we} = litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {litedramcore_sdram_bankmachine2_fifo_out_last, litedramcore_sdram_bankmachine2_fifo_out_first, litedramcore_sdram_bankmachine2_fifo_out_payload_addr, litedramcore_sdram_bankmachine2_fifo_out_payload_we} = litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign {litedramcore_sdram_bankmachine2_fifo_out_last, litedramcore_sdram_bankmachine2_fifo_out_first, litedramcore_sdram_bankmachine2_fifo_out_payload_addr, litedramcore_sdram_bankmachine2_fifo_out_payload_we} = litedramcore_sdram_bankmachine2_syncfifo2_dout;
assign litedramcore_sdram_bankmachine2_sink_ready = litedramcore_sdram_bankmachine2_syncfifo2_writable;
assign litedramcore_sdram_bankmachine2_syncfifo2_we = litedramcore_sdram_bankmachine2_sink_valid;
assign litedramcore_sdram_bankmachine2_fifo_in_first = litedramcore_sdram_bankmachine2_sink_first;
assign litedramcore_sdram_bankmachine2_fifo_in_last = litedramcore_sdram_bankmachine2_sink_last;
assign litedramcore_sdram_bankmachine2_fifo_in_payload_we = litedramcore_sdram_bankmachine2_sink_payload_we;
assign litedramcore_sdram_bankmachine2_fifo_in_payload_addr = litedramcore_sdram_bankmachine2_sink_payload_addr;
assign litedramcore_sdram_bankmachine2_source_valid = litedramcore_sdram_bankmachine2_syncfifo2_readable;
assign litedramcore_sdram_bankmachine2_source_first = litedramcore_sdram_bankmachine2_fifo_out_first;
assign litedramcore_sdram_bankmachine2_source_last = litedramcore_sdram_bankmachine2_fifo_out_last;
assign litedramcore_sdram_bankmachine2_source_payload_we = litedramcore_sdram_bankmachine2_fifo_out_payload_we;
assign litedramcore_sdram_bankmachine2_source_payload_addr = litedramcore_sdram_bankmachine2_fifo_out_payload_addr;
assign litedramcore_sdram_bankmachine2_syncfifo2_re = litedramcore_sdram_bankmachine2_source_ready;
always @(*) begin
    litedramcore_sdram_bankmachine2_wrport_adr <= 4'd0;
    if (litedramcore_sdram_bankmachine2_replace) begin
        litedramcore_sdram_bankmachine2_wrport_adr <= (litedramcore_sdram_bankmachine2_produce - 1'd1);
    end else begin
        litedramcore_sdram_bankmachine2_wrport_adr <= litedramcore_sdram_bankmachine2_produce;
    end
end
assign litedramcore_sdram_bankmachine2_wrport_dat_w = litedramcore_sdram_bankmachine2_syncfifo2_din;
assign litedramcore_sdram_bankmachine2_wrport_we = (litedramcore_sdram_bankmachine2_syncfifo2_we & (litedramcore_sdram_bankmachine2_syncfifo2_writable | litedramcore_sdram_bankmachine2_replace));
assign litedramcore_sdram_bankmachine2_do_read = (litedramcore_sdram_bankmachine2_syncfifo2_readable & litedramcore_sdram_bankmachine2_syncfifo2_re);
assign litedramcore_sdram_bankmachine2_rdport_adr = litedramcore_sdram_bankmachine2_consume;
assign litedramcore_sdram_bankmachine2_syncfifo2_dout = litedramcore_sdram_bankmachine2_rdport_dat_r;
assign litedramcore_sdram_bankmachine2_syncfifo2_writable = (litedramcore_sdram_bankmachine2_level != 5'd16);
assign litedramcore_sdram_bankmachine2_syncfifo2_readable = (litedramcore_sdram_bankmachine2_level != 1'd0);
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_ready = ((~litedramcore_sdram_bankmachine2_pipe_valid_source_valid) | litedramcore_sdram_bankmachine2_pipe_valid_source_ready);
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_valid = litedramcore_sdram_bankmachine2_sink_sink_valid;
assign litedramcore_sdram_bankmachine2_sink_sink_ready = litedramcore_sdram_bankmachine2_pipe_valid_sink_ready;
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_first = litedramcore_sdram_bankmachine2_sink_sink_first;
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_last = litedramcore_sdram_bankmachine2_sink_sink_last;
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we = litedramcore_sdram_bankmachine2_sink_sink_payload_we;
assign litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr = litedramcore_sdram_bankmachine2_sink_sink_payload_addr;
assign litedramcore_sdram_bankmachine2_source_source_valid = litedramcore_sdram_bankmachine2_pipe_valid_source_valid;
assign litedramcore_sdram_bankmachine2_pipe_valid_source_ready = litedramcore_sdram_bankmachine2_source_source_ready;
assign litedramcore_sdram_bankmachine2_source_source_first = litedramcore_sdram_bankmachine2_pipe_valid_source_first;
assign litedramcore_sdram_bankmachine2_source_source_last = litedramcore_sdram_bankmachine2_pipe_valid_source_last;
assign litedramcore_sdram_bankmachine2_source_source_payload_we = litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we;
assign litedramcore_sdram_bankmachine2_source_source_payload_addr = litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine2_next_state <= 3'd0;
    bankmachine2_next_state <= bankmachine2_state;
    case (bankmachine2_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                if (litedramcore_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                bankmachine2_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                if (litedramcore_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if ((~litedramcore_sdram_bankmachine2_refresh_req)) begin
                bankmachine2_next_state <= 1'd0;
            end
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
                bankmachine2_next_state <= 3'd4;
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if ((litedramcore_sdram_bankmachine2_cmd_ready & litedramcore_sdram_bankmachine2_auto_precharge)) begin
                                bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if (litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine2_req_wdata_ready <= litedramcore_sdram_bankmachine2_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if (litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine2_req_rdata_valid <= litedramcore_sdram_bankmachine2_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_refresh_gnt <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramcore_sdram_bankmachine2_twtpcon_ready) begin
                litedramcore_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_row_open <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                litedramcore_sdram_bankmachine2_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_valid <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            litedramcore_sdram_bankmachine2_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_row_close <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
            litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramcore_sdram_bankmachine2_row_close <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                litedramcore_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            litedramcore_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                litedramcore_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if (litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine2_twtpcon_ready & litedramcore_sdram_bankmachine2_trascon_ready)) begin
                litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine2_trccon_ready) begin
                litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            litedramcore_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if (litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    case (bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine2_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine2_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine2_row_opened) begin
                        if (litedramcore_sdram_bankmachine2_row_hit) begin
                            if (litedramcore_sdram_bankmachine2_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign litedramcore_sdram_bankmachine3_sink_valid = litedramcore_sdram_bankmachine3_req_valid;
assign litedramcore_sdram_bankmachine3_req_ready = litedramcore_sdram_bankmachine3_sink_ready;
assign litedramcore_sdram_bankmachine3_sink_payload_we = litedramcore_sdram_bankmachine3_req_we;
assign litedramcore_sdram_bankmachine3_sink_payload_addr = litedramcore_sdram_bankmachine3_req_addr;
assign litedramcore_sdram_bankmachine3_sink_sink_valid = litedramcore_sdram_bankmachine3_source_valid;
assign litedramcore_sdram_bankmachine3_source_ready = litedramcore_sdram_bankmachine3_sink_sink_ready;
assign litedramcore_sdram_bankmachine3_sink_sink_first = litedramcore_sdram_bankmachine3_source_first;
assign litedramcore_sdram_bankmachine3_sink_sink_last = litedramcore_sdram_bankmachine3_source_last;
assign litedramcore_sdram_bankmachine3_sink_sink_payload_we = litedramcore_sdram_bankmachine3_source_payload_we;
assign litedramcore_sdram_bankmachine3_sink_sink_payload_addr = litedramcore_sdram_bankmachine3_source_payload_addr;
assign litedramcore_sdram_bankmachine3_source_source_ready = (litedramcore_sdram_bankmachine3_req_wdata_ready | litedramcore_sdram_bankmachine3_req_rdata_valid);
assign litedramcore_sdram_bankmachine3_req_lock = (litedramcore_sdram_bankmachine3_source_valid | litedramcore_sdram_bankmachine3_source_source_valid);
assign litedramcore_sdram_bankmachine3_row_hit = (litedramcore_sdram_bankmachine3_row == litedramcore_sdram_bankmachine3_source_source_payload_addr[21:9]);
assign litedramcore_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_a <= 13'd0;
    if (litedramcore_sdram_bankmachine3_row_col_n_addr_sel) begin
        litedramcore_sdram_bankmachine3_cmd_payload_a <= litedramcore_sdram_bankmachine3_source_source_payload_addr[21:9];
    end else begin
        litedramcore_sdram_bankmachine3_cmd_payload_a <= ((litedramcore_sdram_bankmachine3_auto_precharge <<< 4'd10) | {litedramcore_sdram_bankmachine3_source_source_payload_addr[8:0], {0{1'd0}}});
    end
end
assign litedramcore_sdram_bankmachine3_twtpcon_valid = ((litedramcore_sdram_bankmachine3_cmd_valid & litedramcore_sdram_bankmachine3_cmd_ready) & litedramcore_sdram_bankmachine3_cmd_payload_is_write);
assign litedramcore_sdram_bankmachine3_trccon_valid = ((litedramcore_sdram_bankmachine3_cmd_valid & litedramcore_sdram_bankmachine3_cmd_ready) & litedramcore_sdram_bankmachine3_row_open);
assign litedramcore_sdram_bankmachine3_trascon_valid = ((litedramcore_sdram_bankmachine3_cmd_valid & litedramcore_sdram_bankmachine3_cmd_ready) & litedramcore_sdram_bankmachine3_row_open);
always @(*) begin
    litedramcore_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((litedramcore_sdram_bankmachine3_source_valid & litedramcore_sdram_bankmachine3_source_source_valid)) begin
        if ((litedramcore_sdram_bankmachine3_source_payload_addr[21:9] != litedramcore_sdram_bankmachine3_source_source_payload_addr[21:9])) begin
            litedramcore_sdram_bankmachine3_auto_precharge <= (litedramcore_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign litedramcore_sdram_bankmachine3_syncfifo3_din = {litedramcore_sdram_bankmachine3_fifo_in_last, litedramcore_sdram_bankmachine3_fifo_in_first, litedramcore_sdram_bankmachine3_fifo_in_payload_addr, litedramcore_sdram_bankmachine3_fifo_in_payload_we};
assign {litedramcore_sdram_bankmachine3_fifo_out_last, litedramcore_sdram_bankmachine3_fifo_out_first, litedramcore_sdram_bankmachine3_fifo_out_payload_addr, litedramcore_sdram_bankmachine3_fifo_out_payload_we} = litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {litedramcore_sdram_bankmachine3_fifo_out_last, litedramcore_sdram_bankmachine3_fifo_out_first, litedramcore_sdram_bankmachine3_fifo_out_payload_addr, litedramcore_sdram_bankmachine3_fifo_out_payload_we} = litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {litedramcore_sdram_bankmachine3_fifo_out_last, litedramcore_sdram_bankmachine3_fifo_out_first, litedramcore_sdram_bankmachine3_fifo_out_payload_addr, litedramcore_sdram_bankmachine3_fifo_out_payload_we} = litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign {litedramcore_sdram_bankmachine3_fifo_out_last, litedramcore_sdram_bankmachine3_fifo_out_first, litedramcore_sdram_bankmachine3_fifo_out_payload_addr, litedramcore_sdram_bankmachine3_fifo_out_payload_we} = litedramcore_sdram_bankmachine3_syncfifo3_dout;
assign litedramcore_sdram_bankmachine3_sink_ready = litedramcore_sdram_bankmachine3_syncfifo3_writable;
assign litedramcore_sdram_bankmachine3_syncfifo3_we = litedramcore_sdram_bankmachine3_sink_valid;
assign litedramcore_sdram_bankmachine3_fifo_in_first = litedramcore_sdram_bankmachine3_sink_first;
assign litedramcore_sdram_bankmachine3_fifo_in_last = litedramcore_sdram_bankmachine3_sink_last;
assign litedramcore_sdram_bankmachine3_fifo_in_payload_we = litedramcore_sdram_bankmachine3_sink_payload_we;
assign litedramcore_sdram_bankmachine3_fifo_in_payload_addr = litedramcore_sdram_bankmachine3_sink_payload_addr;
assign litedramcore_sdram_bankmachine3_source_valid = litedramcore_sdram_bankmachine3_syncfifo3_readable;
assign litedramcore_sdram_bankmachine3_source_first = litedramcore_sdram_bankmachine3_fifo_out_first;
assign litedramcore_sdram_bankmachine3_source_last = litedramcore_sdram_bankmachine3_fifo_out_last;
assign litedramcore_sdram_bankmachine3_source_payload_we = litedramcore_sdram_bankmachine3_fifo_out_payload_we;
assign litedramcore_sdram_bankmachine3_source_payload_addr = litedramcore_sdram_bankmachine3_fifo_out_payload_addr;
assign litedramcore_sdram_bankmachine3_syncfifo3_re = litedramcore_sdram_bankmachine3_source_ready;
always @(*) begin
    litedramcore_sdram_bankmachine3_wrport_adr <= 4'd0;
    if (litedramcore_sdram_bankmachine3_replace) begin
        litedramcore_sdram_bankmachine3_wrport_adr <= (litedramcore_sdram_bankmachine3_produce - 1'd1);
    end else begin
        litedramcore_sdram_bankmachine3_wrport_adr <= litedramcore_sdram_bankmachine3_produce;
    end
end
assign litedramcore_sdram_bankmachine3_wrport_dat_w = litedramcore_sdram_bankmachine3_syncfifo3_din;
assign litedramcore_sdram_bankmachine3_wrport_we = (litedramcore_sdram_bankmachine3_syncfifo3_we & (litedramcore_sdram_bankmachine3_syncfifo3_writable | litedramcore_sdram_bankmachine3_replace));
assign litedramcore_sdram_bankmachine3_do_read = (litedramcore_sdram_bankmachine3_syncfifo3_readable & litedramcore_sdram_bankmachine3_syncfifo3_re);
assign litedramcore_sdram_bankmachine3_rdport_adr = litedramcore_sdram_bankmachine3_consume;
assign litedramcore_sdram_bankmachine3_syncfifo3_dout = litedramcore_sdram_bankmachine3_rdport_dat_r;
assign litedramcore_sdram_bankmachine3_syncfifo3_writable = (litedramcore_sdram_bankmachine3_level != 5'd16);
assign litedramcore_sdram_bankmachine3_syncfifo3_readable = (litedramcore_sdram_bankmachine3_level != 1'd0);
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_ready = ((~litedramcore_sdram_bankmachine3_pipe_valid_source_valid) | litedramcore_sdram_bankmachine3_pipe_valid_source_ready);
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_valid = litedramcore_sdram_bankmachine3_sink_sink_valid;
assign litedramcore_sdram_bankmachine3_sink_sink_ready = litedramcore_sdram_bankmachine3_pipe_valid_sink_ready;
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_first = litedramcore_sdram_bankmachine3_sink_sink_first;
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_last = litedramcore_sdram_bankmachine3_sink_sink_last;
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we = litedramcore_sdram_bankmachine3_sink_sink_payload_we;
assign litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr = litedramcore_sdram_bankmachine3_sink_sink_payload_addr;
assign litedramcore_sdram_bankmachine3_source_source_valid = litedramcore_sdram_bankmachine3_pipe_valid_source_valid;
assign litedramcore_sdram_bankmachine3_pipe_valid_source_ready = litedramcore_sdram_bankmachine3_source_source_ready;
assign litedramcore_sdram_bankmachine3_source_source_first = litedramcore_sdram_bankmachine3_pipe_valid_source_first;
assign litedramcore_sdram_bankmachine3_source_source_last = litedramcore_sdram_bankmachine3_pipe_valid_source_last;
assign litedramcore_sdram_bankmachine3_source_source_payload_we = litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we;
assign litedramcore_sdram_bankmachine3_source_source_payload_addr = litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine3_next_state <= 3'd0;
    bankmachine3_next_state <= bankmachine3_state;
    case (bankmachine3_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                if (litedramcore_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                bankmachine3_next_state <= 2'd3;
            end
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                if (litedramcore_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if ((~litedramcore_sdram_bankmachine3_refresh_req)) begin
                bankmachine3_next_state <= 1'd0;
            end
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
                bankmachine3_next_state <= 3'd4;
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if ((litedramcore_sdram_bankmachine3_cmd_ready & litedramcore_sdram_bankmachine3_auto_precharge)) begin
                                bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_row_open <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                litedramcore_sdram_bankmachine3_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_valid <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            litedramcore_sdram_bankmachine3_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_row_close <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
            litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramcore_sdram_bankmachine3_row_close <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                litedramcore_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            litedramcore_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                litedramcore_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if (litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
            if ((litedramcore_sdram_bankmachine3_twtpcon_ready & litedramcore_sdram_bankmachine3_trascon_ready)) begin
                litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_sdram_bankmachine3_trccon_ready) begin
                litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            litedramcore_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if (litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if (litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if (litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                                litedramcore_sdram_bankmachine3_req_wdata_ready <= litedramcore_sdram_bankmachine3_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if (litedramcore_sdram_bankmachine3_refresh_req) begin
            end else begin
                if (litedramcore_sdram_bankmachine3_source_source_valid) begin
                    if (litedramcore_sdram_bankmachine3_row_opened) begin
                        if (litedramcore_sdram_bankmachine3_row_hit) begin
                            if (litedramcore_sdram_bankmachine3_source_source_payload_we) begin
                            end else begin
                                litedramcore_sdram_bankmachine3_req_rdata_valid <= litedramcore_sdram_bankmachine3_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_bankmachine3_refresh_gnt <= 1'd0;
    case (bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramcore_sdram_bankmachine3_twtpcon_ready) begin
                litedramcore_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
assign litedramcore_sdram_choose_req_want_cmds = 1'd1;
always @(*) begin
    litedramcore_sdram_choose_req_want_activates <= 1'd0;
    litedramcore_sdram_choose_req_want_activates <= litedramcore_sdram_ras_allowed;
    case (multiplexer_state)
        1'd1: begin
            if (1'd1) begin
            end else begin
                litedramcore_sdram_choose_req_want_activates <= litedramcore_sdram_ras_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
            if (1'd1) begin
            end else begin
                litedramcore_sdram_choose_req_want_activates <= litedramcore_sdram_ras_allowed;
            end
        end
    endcase
end
assign litedramcore_sdram_trrdcon_valid = ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & ((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we)));
assign litedramcore_sdram_tfawcon_valid = ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & ((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we)));
assign litedramcore_sdram_ras_allowed = (litedramcore_sdram_trrdcon_ready & litedramcore_sdram_tfawcon_ready);
assign litedramcore_sdram_tccdcon_valid = ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & (litedramcore_sdram_choose_req_cmd_payload_is_write | litedramcore_sdram_choose_req_cmd_payload_is_read));
assign litedramcore_sdram_cas_allowed = litedramcore_sdram_tccdcon_ready;
assign litedramcore_sdram_twtrcon_valid = ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_is_write);
assign litedramcore_sdram_read_available = ((((litedramcore_sdram_bankmachine0_cmd_valid & litedramcore_sdram_bankmachine0_cmd_payload_is_read) | (litedramcore_sdram_bankmachine1_cmd_valid & litedramcore_sdram_bankmachine1_cmd_payload_is_read)) | (litedramcore_sdram_bankmachine2_cmd_valid & litedramcore_sdram_bankmachine2_cmd_payload_is_read)) | (litedramcore_sdram_bankmachine3_cmd_valid & litedramcore_sdram_bankmachine3_cmd_payload_is_read));
assign litedramcore_sdram_write_available = ((((litedramcore_sdram_bankmachine0_cmd_valid & litedramcore_sdram_bankmachine0_cmd_payload_is_write) | (litedramcore_sdram_bankmachine1_cmd_valid & litedramcore_sdram_bankmachine1_cmd_payload_is_write)) | (litedramcore_sdram_bankmachine2_cmd_valid & litedramcore_sdram_bankmachine2_cmd_payload_is_write)) | (litedramcore_sdram_bankmachine3_cmd_valid & litedramcore_sdram_bankmachine3_cmd_payload_is_write));
assign litedramcore_sdram_max_time0 = (litedramcore_sdram_time0 == 1'd0);
assign litedramcore_sdram_max_time1 = (litedramcore_sdram_time1 == 1'd0);
assign litedramcore_sdram_bankmachine0_refresh_req = litedramcore_sdram_cmd_valid;
assign litedramcore_sdram_bankmachine1_refresh_req = litedramcore_sdram_cmd_valid;
assign litedramcore_sdram_bankmachine2_refresh_req = litedramcore_sdram_cmd_valid;
assign litedramcore_sdram_bankmachine3_refresh_req = litedramcore_sdram_cmd_valid;
assign litedramcore_sdram_go_to_refresh = (((litedramcore_sdram_bankmachine0_refresh_gnt & litedramcore_sdram_bankmachine1_refresh_gnt) & litedramcore_sdram_bankmachine2_refresh_gnt) & litedramcore_sdram_bankmachine3_refresh_gnt);
assign litedramcore_sdram_interface_rdata = {litedramcore_sdram_dfi_p0_rddata};
assign {litedramcore_sdram_dfi_p0_wrdata} = litedramcore_sdram_interface_wdata;
assign {litedramcore_sdram_dfi_p0_wrdata_mask} = (~litedramcore_sdram_interface_wdata_we);
always @(*) begin
    litedramcore_sdram_choose_cmd_valids <= 4'd0;
    litedramcore_sdram_choose_cmd_valids[0] <= (litedramcore_sdram_bankmachine0_cmd_valid & (((litedramcore_sdram_bankmachine0_cmd_payload_is_cmd & litedramcore_sdram_choose_cmd_want_cmds) & ((~((litedramcore_sdram_bankmachine0_cmd_payload_ras & (~litedramcore_sdram_bankmachine0_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine0_cmd_payload_we))) | litedramcore_sdram_choose_cmd_want_activates)) | ((litedramcore_sdram_bankmachine0_cmd_payload_is_read == litedramcore_sdram_choose_cmd_want_reads) & (litedramcore_sdram_bankmachine0_cmd_payload_is_write == litedramcore_sdram_choose_cmd_want_writes))));
    litedramcore_sdram_choose_cmd_valids[1] <= (litedramcore_sdram_bankmachine1_cmd_valid & (((litedramcore_sdram_bankmachine1_cmd_payload_is_cmd & litedramcore_sdram_choose_cmd_want_cmds) & ((~((litedramcore_sdram_bankmachine1_cmd_payload_ras & (~litedramcore_sdram_bankmachine1_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine1_cmd_payload_we))) | litedramcore_sdram_choose_cmd_want_activates)) | ((litedramcore_sdram_bankmachine1_cmd_payload_is_read == litedramcore_sdram_choose_cmd_want_reads) & (litedramcore_sdram_bankmachine1_cmd_payload_is_write == litedramcore_sdram_choose_cmd_want_writes))));
    litedramcore_sdram_choose_cmd_valids[2] <= (litedramcore_sdram_bankmachine2_cmd_valid & (((litedramcore_sdram_bankmachine2_cmd_payload_is_cmd & litedramcore_sdram_choose_cmd_want_cmds) & ((~((litedramcore_sdram_bankmachine2_cmd_payload_ras & (~litedramcore_sdram_bankmachine2_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine2_cmd_payload_we))) | litedramcore_sdram_choose_cmd_want_activates)) | ((litedramcore_sdram_bankmachine2_cmd_payload_is_read == litedramcore_sdram_choose_cmd_want_reads) & (litedramcore_sdram_bankmachine2_cmd_payload_is_write == litedramcore_sdram_choose_cmd_want_writes))));
    litedramcore_sdram_choose_cmd_valids[3] <= (litedramcore_sdram_bankmachine3_cmd_valid & (((litedramcore_sdram_bankmachine3_cmd_payload_is_cmd & litedramcore_sdram_choose_cmd_want_cmds) & ((~((litedramcore_sdram_bankmachine3_cmd_payload_ras & (~litedramcore_sdram_bankmachine3_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine3_cmd_payload_we))) | litedramcore_sdram_choose_cmd_want_activates)) | ((litedramcore_sdram_bankmachine3_cmd_payload_is_read == litedramcore_sdram_choose_cmd_want_reads) & (litedramcore_sdram_bankmachine3_cmd_payload_is_write == litedramcore_sdram_choose_cmd_want_writes))));
end
assign litedramcore_sdram_choose_cmd_request = litedramcore_sdram_choose_cmd_valids;
assign litedramcore_sdram_choose_cmd_cmd_valid = rhs_self8;
assign litedramcore_sdram_choose_cmd_cmd_payload_a = rhs_self9;
assign litedramcore_sdram_choose_cmd_cmd_payload_ba = rhs_self10;
assign litedramcore_sdram_choose_cmd_cmd_payload_is_read = rhs_self11;
assign litedramcore_sdram_choose_cmd_cmd_payload_is_write = rhs_self12;
assign litedramcore_sdram_choose_cmd_cmd_payload_is_cmd = rhs_self13;
always @(*) begin
    litedramcore_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (litedramcore_sdram_choose_cmd_cmd_valid) begin
        litedramcore_sdram_choose_cmd_cmd_payload_cas <= t_self0;
    end
end
always @(*) begin
    litedramcore_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (litedramcore_sdram_choose_cmd_cmd_valid) begin
        litedramcore_sdram_choose_cmd_cmd_payload_ras <= t_self1;
    end
end
always @(*) begin
    litedramcore_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (litedramcore_sdram_choose_cmd_cmd_valid) begin
        litedramcore_sdram_choose_cmd_cmd_payload_we <= t_self2;
    end
end
always @(*) begin
    litedramcore_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((litedramcore_sdram_choose_cmd_cmd_valid & litedramcore_sdram_choose_cmd_cmd_ready) & (litedramcore_sdram_choose_cmd_grant == 1'd0))) begin
        litedramcore_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & (litedramcore_sdram_choose_req_grant == 1'd0))) begin
        litedramcore_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    litedramcore_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((litedramcore_sdram_choose_cmd_cmd_valid & litedramcore_sdram_choose_cmd_cmd_ready) & (litedramcore_sdram_choose_cmd_grant == 1'd1))) begin
        litedramcore_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & (litedramcore_sdram_choose_req_grant == 1'd1))) begin
        litedramcore_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    litedramcore_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((litedramcore_sdram_choose_cmd_cmd_valid & litedramcore_sdram_choose_cmd_cmd_ready) & (litedramcore_sdram_choose_cmd_grant == 2'd2))) begin
        litedramcore_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & (litedramcore_sdram_choose_req_grant == 2'd2))) begin
        litedramcore_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    litedramcore_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((litedramcore_sdram_choose_cmd_cmd_valid & litedramcore_sdram_choose_cmd_cmd_ready) & (litedramcore_sdram_choose_cmd_grant == 2'd3))) begin
        litedramcore_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & (litedramcore_sdram_choose_req_grant == 2'd3))) begin
        litedramcore_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign litedramcore_sdram_choose_cmd_ce = (litedramcore_sdram_choose_cmd_cmd_ready | (~litedramcore_sdram_choose_cmd_cmd_valid));
always @(*) begin
    litedramcore_sdram_choose_req_valids <= 4'd0;
    litedramcore_sdram_choose_req_valids[0] <= (litedramcore_sdram_bankmachine0_cmd_valid & (((litedramcore_sdram_bankmachine0_cmd_payload_is_cmd & litedramcore_sdram_choose_req_want_cmds) & ((~((litedramcore_sdram_bankmachine0_cmd_payload_ras & (~litedramcore_sdram_bankmachine0_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine0_cmd_payload_we))) | litedramcore_sdram_choose_req_want_activates)) | ((litedramcore_sdram_bankmachine0_cmd_payload_is_read == litedramcore_sdram_choose_req_want_reads) & (litedramcore_sdram_bankmachine0_cmd_payload_is_write == litedramcore_sdram_choose_req_want_writes))));
    litedramcore_sdram_choose_req_valids[1] <= (litedramcore_sdram_bankmachine1_cmd_valid & (((litedramcore_sdram_bankmachine1_cmd_payload_is_cmd & litedramcore_sdram_choose_req_want_cmds) & ((~((litedramcore_sdram_bankmachine1_cmd_payload_ras & (~litedramcore_sdram_bankmachine1_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine1_cmd_payload_we))) | litedramcore_sdram_choose_req_want_activates)) | ((litedramcore_sdram_bankmachine1_cmd_payload_is_read == litedramcore_sdram_choose_req_want_reads) & (litedramcore_sdram_bankmachine1_cmd_payload_is_write == litedramcore_sdram_choose_req_want_writes))));
    litedramcore_sdram_choose_req_valids[2] <= (litedramcore_sdram_bankmachine2_cmd_valid & (((litedramcore_sdram_bankmachine2_cmd_payload_is_cmd & litedramcore_sdram_choose_req_want_cmds) & ((~((litedramcore_sdram_bankmachine2_cmd_payload_ras & (~litedramcore_sdram_bankmachine2_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine2_cmd_payload_we))) | litedramcore_sdram_choose_req_want_activates)) | ((litedramcore_sdram_bankmachine2_cmd_payload_is_read == litedramcore_sdram_choose_req_want_reads) & (litedramcore_sdram_bankmachine2_cmd_payload_is_write == litedramcore_sdram_choose_req_want_writes))));
    litedramcore_sdram_choose_req_valids[3] <= (litedramcore_sdram_bankmachine3_cmd_valid & (((litedramcore_sdram_bankmachine3_cmd_payload_is_cmd & litedramcore_sdram_choose_req_want_cmds) & ((~((litedramcore_sdram_bankmachine3_cmd_payload_ras & (~litedramcore_sdram_bankmachine3_cmd_payload_cas)) & (~litedramcore_sdram_bankmachine3_cmd_payload_we))) | litedramcore_sdram_choose_req_want_activates)) | ((litedramcore_sdram_bankmachine3_cmd_payload_is_read == litedramcore_sdram_choose_req_want_reads) & (litedramcore_sdram_bankmachine3_cmd_payload_is_write == litedramcore_sdram_choose_req_want_writes))));
end
assign litedramcore_sdram_choose_req_request = litedramcore_sdram_choose_req_valids;
assign litedramcore_sdram_choose_req_cmd_valid = rhs_self14;
assign litedramcore_sdram_choose_req_cmd_payload_a = rhs_self15;
assign litedramcore_sdram_choose_req_cmd_payload_ba = rhs_self16;
assign litedramcore_sdram_choose_req_cmd_payload_is_read = rhs_self17;
assign litedramcore_sdram_choose_req_cmd_payload_is_write = rhs_self18;
assign litedramcore_sdram_choose_req_cmd_payload_is_cmd = rhs_self19;
always @(*) begin
    litedramcore_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (litedramcore_sdram_choose_req_cmd_valid) begin
        litedramcore_sdram_choose_req_cmd_payload_cas <= t_self3;
    end
end
always @(*) begin
    litedramcore_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (litedramcore_sdram_choose_req_cmd_valid) begin
        litedramcore_sdram_choose_req_cmd_payload_ras <= t_self4;
    end
end
always @(*) begin
    litedramcore_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (litedramcore_sdram_choose_req_cmd_valid) begin
        litedramcore_sdram_choose_req_cmd_payload_we <= t_self5;
    end
end
assign litedramcore_sdram_choose_req_ce = (litedramcore_sdram_choose_req_cmd_ready | (~litedramcore_sdram_choose_req_cmd_valid));
assign litedramcore_sdram_dfi_p0_reset_n = 1'd1;
assign litedramcore_sdram_dfi_p0_cke = {1{litedramcore_sdram_steerer0}};
assign litedramcore_sdram_dfi_p0_odt = {1{litedramcore_sdram_steerer1}};
always @(*) begin
    multiplexer_next_state <= 3'd0;
    multiplexer_next_state <= multiplexer_state;
    case (multiplexer_state)
        1'd1: begin
            if (litedramcore_sdram_read_available) begin
                if (((~litedramcore_sdram_write_available) | litedramcore_sdram_max_time1)) begin
                    multiplexer_next_state <= 2'd3;
                end
            end
            if (litedramcore_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (litedramcore_sdram_cmd_last) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (litedramcore_sdram_twtrcon_ready) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            multiplexer_next_state <= 1'd1;
        end
        default: begin
            if (litedramcore_sdram_write_available) begin
                if (((~litedramcore_sdram_read_available) | litedramcore_sdram_max_time0)) begin
                    multiplexer_next_state <= 3'd4;
                end
            end
            if (litedramcore_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_en0 <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
            litedramcore_sdram_en0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_choose_req_want_reads <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
            litedramcore_sdram_choose_req_want_reads <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_choose_req_want_writes <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
            litedramcore_sdram_choose_req_want_writes <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_cmd_ready <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_sdram_cmd_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_steerer_sel <= 2'd0;
    case (multiplexer_state)
        1'd1: begin
            litedramcore_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                litedramcore_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                litedramcore_sdram_steerer_sel <= 1'd1;
            end
        end
        2'd2: begin
            litedramcore_sdram_steerer_sel <= 2'd3;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
            litedramcore_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                litedramcore_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                litedramcore_sdram_steerer_sel <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_choose_req_cmd_ready <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
            if (1'd1) begin
                litedramcore_sdram_choose_req_cmd_ready <= (litedramcore_sdram_cas_allowed & ((~((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we))) | litedramcore_sdram_ras_allowed));
            end else begin
                litedramcore_sdram_choose_req_cmd_ready <= ((~((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we))) | litedramcore_sdram_ras_allowed);
                litedramcore_sdram_choose_req_cmd_ready <= litedramcore_sdram_cas_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
            if (1'd1) begin
                litedramcore_sdram_choose_req_cmd_ready <= (litedramcore_sdram_cas_allowed & ((~((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we))) | litedramcore_sdram_ras_allowed));
            end else begin
                litedramcore_sdram_choose_req_cmd_ready <= ((~((litedramcore_sdram_choose_req_cmd_payload_ras & (~litedramcore_sdram_choose_req_cmd_payload_cas)) & (~litedramcore_sdram_choose_req_cmd_payload_we))) | litedramcore_sdram_ras_allowed);
                litedramcore_sdram_choose_req_cmd_ready <= litedramcore_sdram_cas_allowed;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_en1 <= 1'd0;
    case (multiplexer_state)
        1'd1: begin
            litedramcore_sdram_en1 <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        default: begin
        end
    endcase
end
assign roundrobin0_request = {(((litedramnativeport3_cmd_payload_addr[10:9] == 1'd0) & (~(((locked4 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid), (((litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid), (((litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid), (((litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid), (((litedramcore_port_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid)};
assign roundrobin0_ce = ((~litedramcore_sdram_interface_bank0_valid) & (~litedramcore_sdram_interface_bank0_lock));
assign litedramcore_sdram_interface_bank0_addr = rhs_self20;
assign litedramcore_sdram_interface_bank0_we = rhs_self21;
assign litedramcore_sdram_interface_bank0_valid = rhs_self22;
assign roundrobin1_request = {(((litedramnativeport3_cmd_payload_addr[10:9] == 1'd1) & (~(((locked9 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid), (((litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked8 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid), (((litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid), (((litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid), (((litedramcore_port_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid)};
assign roundrobin1_ce = ((~litedramcore_sdram_interface_bank1_valid) & (~litedramcore_sdram_interface_bank1_lock));
assign litedramcore_sdram_interface_bank1_addr = rhs_self23;
assign litedramcore_sdram_interface_bank1_we = rhs_self24;
assign litedramcore_sdram_interface_bank1_valid = rhs_self25;
assign roundrobin2_request = {(((litedramnativeport3_cmd_payload_addr[10:9] == 2'd2) & (~(((locked14 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid), (((litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked13 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid), (((litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked12 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid), (((litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid), (((litedramcore_port_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid)};
assign roundrobin2_ce = ((~litedramcore_sdram_interface_bank2_valid) & (~litedramcore_sdram_interface_bank2_lock));
assign litedramcore_sdram_interface_bank2_addr = rhs_self26;
assign litedramcore_sdram_interface_bank2_we = rhs_self27;
assign litedramcore_sdram_interface_bank2_valid = rhs_self28;
assign roundrobin3_request = {(((litedramnativeport3_cmd_payload_addr[10:9] == 2'd3) & (~(((locked19 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))))) & litedramnativeport3_cmd_valid), (((litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked18 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))))) & litedramnativeport2_cmd_valid), (((litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked17 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))))) & litedramnativeport1_cmd_valid), (((litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked16 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))))) & litedramnativeport0_cmd_valid), (((litedramcore_port_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & litedramcore_port_cmd_valid)};
assign roundrobin3_ce = ((~litedramcore_sdram_interface_bank3_valid) & (~litedramcore_sdram_interface_bank3_lock));
assign litedramcore_sdram_interface_bank3_addr = rhs_self29;
assign litedramcore_sdram_interface_bank3_we = rhs_self30;
assign litedramcore_sdram_interface_bank3_valid = rhs_self31;
assign litedramcore_port_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 1'd0) & ((litedramcore_port_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & litedramcore_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 1'd0) & ((litedramcore_port_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & litedramcore_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 1'd0) & ((litedramcore_port_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & litedramcore_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 1'd0) & ((litedramcore_port_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0)))))) & litedramcore_sdram_interface_bank3_ready));
assign litedramnativeport0_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 1'd1) & ((litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & litedramcore_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 1'd1) & ((litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & litedramcore_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 1'd1) & ((litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & litedramcore_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 1'd1) & ((litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked16 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1)))))) & litedramcore_sdram_interface_bank3_ready));
assign litedramnativeport1_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 2'd2) & ((litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & litedramcore_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 2'd2) & ((litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & litedramcore_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 2'd2) & ((litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked12 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & litedramcore_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 2'd2) & ((litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked17 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2)))))) & litedramcore_sdram_interface_bank3_ready));
assign litedramnativeport2_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 2'd3) & ((litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & litedramcore_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 2'd3) & ((litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked8 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & litedramcore_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 2'd3) & ((litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked13 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & litedramcore_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 2'd3) & ((litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked18 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3)))))) & litedramcore_sdram_interface_bank3_ready));
assign litedramnativeport3_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 3'd4) & ((litedramnativeport3_cmd_payload_addr[10:9] == 1'd0) & (~(((locked4 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4)))))) & litedramcore_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 3'd4) & ((litedramnativeport3_cmd_payload_addr[10:9] == 1'd1) & (~(((locked9 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4)))))) & litedramcore_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 3'd4) & ((litedramnativeport3_cmd_payload_addr[10:9] == 2'd2) & (~(((locked14 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4)))))) & litedramcore_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 3'd4) & ((litedramnativeport3_cmd_payload_addr[10:9] == 2'd3) & (~(((locked19 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4)))))) & litedramcore_sdram_interface_bank3_ready));
assign litedramcore_port_wdata_ready = new_master_wdata_ready0;
assign litedramnativeport0_wdata_ready = new_master_wdata_ready1;
assign litedramnativeport1_wdata_ready = new_master_wdata_ready2;
assign litedramnativeport2_wdata_ready = new_master_wdata_ready3;
assign litedramnativeport3_wdata_ready = new_master_wdata_ready4;
assign litedramcore_port_rdata_valid = new_master_rdata_valid3;
assign litedramnativeport0_rdata_valid = new_master_rdata_valid7;
assign litedramnativeport1_rdata_valid = new_master_rdata_valid11;
assign litedramnativeport2_rdata_valid = new_master_rdata_valid15;
assign litedramnativeport3_rdata_valid = new_master_rdata_valid19;
always @(*) begin
    litedramcore_sdram_interface_wdata <= 16'd0;
    case ({new_master_wdata_ready4, new_master_wdata_ready3, new_master_wdata_ready2, new_master_wdata_ready1, new_master_wdata_ready0})
        1'd1: begin
            litedramcore_sdram_interface_wdata <= litedramcore_port_wdata_payload_data;
        end
        2'd2: begin
            litedramcore_sdram_interface_wdata <= litedramnativeport0_wdata_payload_data;
        end
        3'd4: begin
            litedramcore_sdram_interface_wdata <= litedramnativeport1_wdata_payload_data;
        end
        4'd8: begin
            litedramcore_sdram_interface_wdata <= litedramnativeport2_wdata_payload_data;
        end
        5'd16: begin
            litedramcore_sdram_interface_wdata <= litedramnativeport3_wdata_payload_data;
        end
        default: begin
            litedramcore_sdram_interface_wdata <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramcore_sdram_interface_wdata_we <= 2'd0;
    case ({new_master_wdata_ready4, new_master_wdata_ready3, new_master_wdata_ready2, new_master_wdata_ready1, new_master_wdata_ready0})
        1'd1: begin
            litedramcore_sdram_interface_wdata_we <= litedramcore_port_wdata_payload_we;
        end
        2'd2: begin
            litedramcore_sdram_interface_wdata_we <= litedramnativeport0_wdata_payload_we;
        end
        3'd4: begin
            litedramcore_sdram_interface_wdata_we <= litedramnativeport1_wdata_payload_we;
        end
        4'd8: begin
            litedramcore_sdram_interface_wdata_we <= litedramnativeport2_wdata_payload_we;
        end
        5'd16: begin
            litedramcore_sdram_interface_wdata_we <= litedramnativeport3_wdata_payload_we;
        end
        default: begin
            litedramcore_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign litedramcore_port_rdata_payload_data = litedramcore_sdram_interface_rdata;
assign litedramnativeport0_rdata_payload_data = litedramcore_sdram_interface_rdata;
assign litedramnativeport1_rdata_payload_data = litedramcore_sdram_interface_rdata;
assign litedramnativeport2_rdata_payload_data = litedramcore_sdram_interface_rdata;
assign litedramnativeport3_rdata_payload_data = litedramcore_sdram_interface_rdata;
assign litedramcore_cache_data_port_adr = litedramcore_wb_sdram_adr[0];
always @(*) begin
    litedramcore_cache_data_port_we <= 4'd0;
    if (litedramcore_cache_write_from_slave) begin
        litedramcore_cache_data_port_we <= {({2{(litedramcore_cache == 1'd1)}} & {2{1'd1}}), ({2{(litedramcore_cache == 1'd0)}} & {2{1'd1}})};
    end else begin
        if ((((litedramcore_wb_sdram_cyc & litedramcore_wb_sdram_stb) & litedramcore_wb_sdram_we) & litedramcore_wb_sdram_ack)) begin
            litedramcore_cache_data_port_we <= litedramcore_wb_sdram_sel;
        end
    end
end
always @(*) begin
    litedramcore_cache_data_port_dat_w <= 32'd0;
    if (litedramcore_cache_write_from_slave) begin
        litedramcore_cache_data_port_dat_w <= {({16{(litedramcore_cache == 1'd1)}} & litedramcore_interface_dat_r), ({16{(litedramcore_cache == 1'd0)}} & litedramcore_interface_dat_r)};
    end else begin
        litedramcore_cache_data_port_dat_w <= {1{litedramcore_wb_sdram_dat_w}};
    end
end
always @(*) begin
    litedramcore_interface_dat_w <= 16'd0;
    case (litedramcore_cache)
        1'd0: begin
            litedramcore_interface_dat_w <= litedramcore_cache_data_port_dat_r[15:0];
        end
        default: begin
            litedramcore_interface_dat_w <= litedramcore_cache_data_port_dat_r[31:16];
        end
    endcase
end
assign litedramcore_interface_sel = 2'd3;
assign litedramcore_wb_sdram_dat_r = litedramcore_cache_data_port_dat_r;
assign {litedramcore_cache_tag_do_dirty, litedramcore_cache_tag_do_tag} = litedramcore_cache_tag_port_dat_r;
assign {litedramcore_cache_tag_do_dirty, litedramcore_cache_tag_do_tag} = litedramcore_cache_tag_port_dat_r;
assign litedramcore_cache_tag_port_dat_w = {litedramcore_cache_tag_di_dirty, litedramcore_cache_tag_di_tag};
assign litedramcore_cache_tag_port_adr = litedramcore_wb_sdram_adr[0];
assign litedramcore_cache_tag_di_tag = litedramcore_wb_sdram_adr[29:1];
assign litedramcore_interface_adr = {litedramcore_cache_tag_do_tag, litedramcore_wb_sdram_adr[0], litedramcore_cache};
always @(*) begin
    fullmemorywe_next_state <= 2'd0;
    fullmemorywe_next_state <= fullmemorywe_state;
    case (fullmemorywe_state)
        1'd1: begin
            if ((litedramcore_cache_tag_do_tag == litedramcore_wb_sdram_adr[29:1])) begin
                fullmemorywe_next_state <= 1'd0;
            end else begin
                if (litedramcore_cache_tag_do_dirty) begin
                    fullmemorywe_next_state <= 2'd2;
                end else begin
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            if (litedramcore_interface_ack) begin
                if ((litedramcore_cache == 1'd1)) begin
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            if (litedramcore_interface_ack) begin
                if ((litedramcore_cache == 1'd1)) begin
                    fullmemorywe_next_state <= 1'd1;
                end else begin
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((litedramcore_wb_sdram_cyc & litedramcore_wb_sdram_stb)) begin
                fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_interface_stb <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_interface_stb <= 1'd1;
        end
        2'd3: begin
            litedramcore_interface_stb <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_interface_we <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_interface_we <= 1'd1;
        end
        2'd3: begin
            litedramcore_interface_we <= 1'd0;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_cache_tag_di_dirty <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
            if ((litedramcore_cache_tag_do_tag == litedramcore_wb_sdram_adr[29:1])) begin
                if (litedramcore_wb_sdram_we) begin
                    litedramcore_cache_tag_di_dirty <= 1'd1;
                end
            end else begin
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_wb_sdram_ack <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
            if ((litedramcore_cache_tag_do_tag == litedramcore_wb_sdram_adr[29:1])) begin
                litedramcore_wb_sdram_ack <= 1'd1;
            end else begin
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_cache_word_clr <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
            litedramcore_cache_word_clr <= 1'd1;
            if ((litedramcore_cache_tag_do_tag == litedramcore_wb_sdram_adr[29:1])) begin
            end else begin
                if (litedramcore_cache_tag_do_dirty) begin
                end else begin
                    litedramcore_cache_word_clr <= 1'd1;
                end
            end
        end
        2'd2: begin
            if (litedramcore_interface_ack) begin
                if ((litedramcore_cache == 1'd1)) begin
                    litedramcore_cache_word_clr <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_cache_word_inc <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramcore_interface_ack) begin
                litedramcore_cache_word_inc <= 1'd1;
            end
        end
        2'd3: begin
            if (litedramcore_interface_ack) begin
                litedramcore_cache_word_inc <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_cache_write_from_slave <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (litedramcore_interface_ack) begin
                litedramcore_cache_write_from_slave <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_interface_cyc <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_interface_cyc <= 1'd1;
        end
        2'd3: begin
            litedramcore_interface_cyc <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_cache_tag_port_we <= 1'd0;
    case (fullmemorywe_state)
        1'd1: begin
            if ((litedramcore_cache_tag_do_tag == litedramcore_wb_sdram_adr[29:1])) begin
                if (litedramcore_wb_sdram_we) begin
                    litedramcore_cache_tag_port_we <= 1'd1;
                end
            end else begin
                if (litedramcore_cache_tag_do_dirty) begin
                end else begin
                    litedramcore_cache_tag_port_we <= 1'd1;
                end
            end
        end
        2'd2: begin
            if (litedramcore_interface_ack) begin
                if ((litedramcore_cache == 1'd1)) begin
                    litedramcore_cache_tag_port_we <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
assign litedramcore_port_cmd_payload_addr = (litedramcore_interface_adr - 30'd536870912);
assign litedramcore_port_cmd_payload_we = litedramcore_interface_we;
assign litedramcore_port_cmd_last = (~litedramcore_interface_we);
assign litedramcore_port_flush = (~litedramcore_interface_cyc);
always @(*) begin
    litedramcore_port_wdata_valid <= 1'd0;
    litedramcore_port_wdata_valid <= (litedramcore_interface_stb & litedramcore_interface_we);
    if (1'd1) begin
        if ((~litedramcore_is_ongoing)) begin
            litedramcore_port_wdata_valid <= 1'd0;
        end
    end
end
assign litedramcore_port_wdata_payload_data = litedramcore_interface_dat_w;
assign litedramcore_port_wdata_payload_we = litedramcore_interface_sel;
assign litedramcore_port_rdata_ready = 1'd1;
always @(*) begin
    litedramwishbone2native_next_state <= 2'd0;
    litedramwishbone2native_next_state <= litedramwishbone2native_state;
    case (litedramwishbone2native_state)
        1'd1: begin
            if ((litedramcore_port_wdata_valid & litedramcore_port_wdata_ready)) begin
                litedramwishbone2native_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (litedramcore_port_rdata_valid) begin
                litedramwishbone2native_next_state <= 1'd0;
            end
        end
        default: begin
            if (((litedramcore_port_cmd_valid & litedramcore_port_cmd_ready) & litedramcore_interface_we)) begin
                litedramwishbone2native_next_state <= 1'd1;
            end
            if (((litedramcore_port_cmd_valid & litedramcore_port_cmd_ready) & (~litedramcore_interface_we))) begin
                litedramwishbone2native_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_interface_ack <= 1'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
            if ((litedramcore_port_wdata_valid & litedramcore_port_wdata_ready)) begin
                litedramcore_interface_ack <= (litedramcore_interface_cyc & (~litedramcore_aborted));
            end
        end
        2'd2: begin
            if (litedramcore_port_rdata_valid) begin
                litedramcore_interface_ack <= (litedramcore_interface_cyc & (~litedramcore_aborted));
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_aborted_litedramwishbone2native_next_value <= 1'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
            litedramcore_aborted_litedramwishbone2native_next_value <= ((~litedramcore_interface_cyc) | litedramcore_aborted);
        end
        2'd2: begin
            litedramcore_aborted_litedramwishbone2native_next_value <= ((~litedramcore_interface_cyc) | litedramcore_aborted);
        end
        default: begin
            litedramcore_aborted_litedramwishbone2native_next_value <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramcore_interface_dat_r <= 16'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramcore_port_rdata_valid) begin
                litedramcore_interface_dat_r <= litedramcore_port_rdata_payload_data;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_is_ongoing <= 1'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
            litedramcore_is_ongoing <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
            litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        2'd2: begin
            litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        default: begin
            litedramcore_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramcore_port_cmd_valid <= 1'd0;
    case (litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            litedramcore_port_cmd_valid <= (litedramcore_interface_cyc & litedramcore_interface_stb);
        end
    endcase
end
assign litedramavalonmm2native0_address_offset = 1'd0;
always @(*) begin
    litedramavalonmm2native0_next_state <= 3'd0;
    litedramavalonmm2native0_next_state <= litedramavalonmm2native0_state;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            if (litedramnativeport0_wdata_ready) begin
                litedramavalonmm2native0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (litedramnativeport0_rdata_valid) begin
                litedramavalonmm2native0_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
            end else begin
                if ((((litedramavalonmm2native0_cmd_fifo_level == 1'd0) & (litedramavalonmm2native0_wdata_fifo_level == 1'd1)) & litedramnativeport0_wdata_ready)) begin
                    litedramavalonmm2native0_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if (litedramnativeport0_rdata_valid) begin
                if ((litedramavalonmm2native0_burst_count == 1'd1)) begin
                    litedramavalonmm2native0_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface0_avalon_port_write) begin
                        litedramavalonmm2native0_next_state <= 2'd3;
                    end
                    if (avalonmminterface0_avalon_port_read) begin
                        litedramavalonmm2native0_next_state <= 3'd4;
                    end
                end else begin
                    if (litedramnativeport0_cmd_ready) begin
                        if (litedramnativeport0_cmd_payload_we) begin
                            litedramavalonmm2native0_next_state <= 1'd1;
                        end else begin
                            litedramavalonmm2native0_next_state <= 2'd2;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_cmd_fifo_sink_valid <= (avalonmminterface0_avalon_port_write & (~avalonmminterface0_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_fifo_sink_payload_address <= 24'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_cmd_fifo_sink_payload_address <= litedramavalonmm2native0_address;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_cmd_fifo_source_ready <= litedramnativeport0_cmd_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value0 <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                if ((litedramavalonmm2native0_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value_ce0 <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                if ((litedramavalonmm2native0_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value_ce0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value1 <= 9'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value1 <= (litedramavalonmm2native0_cmd_ready_count - 1'd1);
            end
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface0_avalon_port_read) begin
                        litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value1 <= avalonmminterface0_avalon_port_burstcount;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value_ce1 <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface0_avalon_port_read) begin
                        litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value_ce1 <= 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport0_cmd_valid <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_cmd_valid <= (litedramavalonmm2native0_cmd_fifo_source_valid & (litedramavalonmm2native0_wdata_fifo_level > 1'd0));
        end
        3'd4: begin
            litedramnativeport0_cmd_valid <= (~litedramavalonmm2native0_cmd_ready_seen);
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport0_cmd_valid <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport0_cmd_last <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport0_cmd_last <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport0_cmd_payload_we <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_cmd_payload_we <= litedramnativeport0_cmd_valid;
        end
        3'd4: begin
            litedramnativeport0_cmd_payload_we <= 1'd0;
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport0_cmd_payload_we <= avalonmminterface0_avalon_port_write;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport0_cmd_payload_addr <= 24'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_cmd_payload_addr <= litedramavalonmm2native0_cmd_fifo_source_payload_address;
        end
        3'd4: begin
            litedramnativeport0_cmd_payload_addr <= litedramavalonmm2native0_address;
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport0_cmd_payload_addr <= (avalonmminterface0_avalon_port_address - litedramavalonmm2native0_address_offset);
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value2 <= 9'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native0_cmd_fifo_sink_ready & litedramavalonmm2native0_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value2 <= (litedramavalonmm2native0_burst_count - 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport0_rdata_valid) begin
                litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value2 <= (litedramavalonmm2native0_burst_count - 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport0_wdata_valid <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            litedramnativeport0_wdata_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_wdata_valid <= litedramavalonmm2native0_wdata_fifo_source_valid;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value_ce2 <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native0_cmd_fifo_sink_ready & litedramavalonmm2native0_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value_ce2 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport0_rdata_valid) begin
                litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_address_litedramavalonmm2native0_next_value3 <= 24'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native0_cmd_fifo_sink_ready & litedramavalonmm2native0_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native0_address_litedramavalonmm2native0_next_value3 <= (litedramavalonmm2native0_address + 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                litedramavalonmm2native0_address_litedramavalonmm2native0_next_value3 <= (litedramavalonmm2native0_address + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_address_litedramavalonmm2native0_next_value_ce3 <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native0_cmd_fifo_sink_ready & litedramavalonmm2native0_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native0_address_litedramavalonmm2native0_next_value_ce3 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport0_cmd_ready) begin
                litedramavalonmm2native0_address_litedramavalonmm2native0_next_value_ce3 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport0_wdata_payload_data <= 16'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            litedramnativeport0_wdata_payload_data <= litedramavalonmm2native0_writedata;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_wdata_payload_data <= litedramavalonmm2native0_wdata_fifo_source_payload_data;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport0_wdata_payload_we <= 2'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            litedramnativeport0_wdata_payload_we <= litedramavalonmm2native0_byteenable;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport0_wdata_payload_we <= litedramavalonmm2native0_wdata_fifo_source_payload_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport0_rdata_ready <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            litedramnativeport0_rdata_ready <= 1'd0;
        end
        2'd2: begin
            litedramnativeport0_rdata_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramnativeport0_rdata_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface0_avalon_port_readdata <= 16'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport0_rdata_valid) begin
                avalonmminterface0_avalon_port_readdata <= litedramnativeport0_rdata_payload_data;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface0_avalon_port_readdata <= litedramnativeport0_rdata_payload_data;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface0_avalon_port_readdatavalid <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport0_rdata_valid) begin
                avalonmminterface0_avalon_port_readdatavalid <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface0_avalon_port_readdatavalid <= litedramnativeport0_rdata_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface0_avalon_port_waitrequest <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
            avalonmminterface0_avalon_port_waitrequest <= 1'd1;
        end
        2'd2: begin
            avalonmminterface0_avalon_port_waitrequest <= 1'd1;
        end
        2'd3: begin
            avalonmminterface0_avalon_port_waitrequest <= (~(litedramavalonmm2native0_cmd_fifo_sink_ready & litedramavalonmm2native0_wdata_fifo_sink_ready));
            if ((avalonmminterface0_avalon_port_write & (litedramavalonmm2native0_burst_count > 1'd0))) begin
            end else begin
                avalonmminterface0_avalon_port_waitrequest <= 1'd1;
            end
        end
        3'd4: begin
            avalonmminterface0_avalon_port_waitrequest <= 1'd1;
        end
        default: begin
            avalonmminterface0_avalon_port_waitrequest <= 1'd1;
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                if ((avalonmminterface0_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface0_avalon_port_read) begin
                        avalonmminterface0_avalon_port_waitrequest <= 1'd0;
                    end
                end else begin
                    if (litedramnativeport0_cmd_ready) begin
                        avalonmminterface0_avalon_port_waitrequest <= 1'd0;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_wdata_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_wdata_fifo_sink_valid <= (avalonmminterface0_avalon_port_write & (~avalonmminterface0_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_latch <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface0_avalon_port_read | avalonmminterface0_avalon_port_write)) begin
                litedramavalonmm2native0_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_wdata_fifo_sink_payload_data <= 16'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_wdata_fifo_sink_payload_data <= avalonmminterface0_avalon_port_writedata;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_wdata_fifo_sink_payload_byteenable <= 2'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_wdata_fifo_sink_payload_byteenable <= avalonmminterface0_avalon_port_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native0_wdata_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native0_wdata_fifo_source_ready <= litedramnativeport0_wdata_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_din = {litedramavalonmm2native0_cmd_fifo_fifo_in_last, litedramavalonmm2native0_cmd_fifo_fifo_in_first, litedramavalonmm2native0_cmd_fifo_fifo_in_payload_address};
assign {litedramavalonmm2native0_cmd_fifo_fifo_out_last, litedramavalonmm2native0_cmd_fifo_fifo_out_first, litedramavalonmm2native0_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native0_cmd_fifo_syncfifo0_dout;
assign {litedramavalonmm2native0_cmd_fifo_fifo_out_last, litedramavalonmm2native0_cmd_fifo_fifo_out_first, litedramavalonmm2native0_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native0_cmd_fifo_syncfifo0_dout;
assign {litedramavalonmm2native0_cmd_fifo_fifo_out_last, litedramavalonmm2native0_cmd_fifo_fifo_out_first, litedramavalonmm2native0_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native0_cmd_fifo_syncfifo0_dout;
assign litedramavalonmm2native0_cmd_fifo_sink_ready = litedramavalonmm2native0_cmd_fifo_syncfifo0_writable;
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_we = litedramavalonmm2native0_cmd_fifo_sink_valid;
assign litedramavalonmm2native0_cmd_fifo_fifo_in_first = litedramavalonmm2native0_cmd_fifo_sink_first;
assign litedramavalonmm2native0_cmd_fifo_fifo_in_last = litedramavalonmm2native0_cmd_fifo_sink_last;
assign litedramavalonmm2native0_cmd_fifo_fifo_in_payload_address = litedramavalonmm2native0_cmd_fifo_sink_payload_address;
assign litedramavalonmm2native0_cmd_fifo_source_valid = litedramavalonmm2native0_cmd_fifo_syncfifo0_readable;
assign litedramavalonmm2native0_cmd_fifo_source_first = litedramavalonmm2native0_cmd_fifo_fifo_out_first;
assign litedramavalonmm2native0_cmd_fifo_source_last = litedramavalonmm2native0_cmd_fifo_fifo_out_last;
assign litedramavalonmm2native0_cmd_fifo_source_payload_address = litedramavalonmm2native0_cmd_fifo_fifo_out_payload_address;
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_re = litedramavalonmm2native0_cmd_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native0_cmd_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native0_cmd_fifo_replace) begin
        litedramavalonmm2native0_cmd_fifo_wrport_adr <= (litedramavalonmm2native0_cmd_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native0_cmd_fifo_wrport_adr <= litedramavalonmm2native0_cmd_fifo_produce;
    end
end
assign litedramavalonmm2native0_cmd_fifo_wrport_dat_w = litedramavalonmm2native0_cmd_fifo_syncfifo0_din;
assign litedramavalonmm2native0_cmd_fifo_wrport_we = (litedramavalonmm2native0_cmd_fifo_syncfifo0_we & (litedramavalonmm2native0_cmd_fifo_syncfifo0_writable | litedramavalonmm2native0_cmd_fifo_replace));
assign litedramavalonmm2native0_cmd_fifo_do_read = (litedramavalonmm2native0_cmd_fifo_syncfifo0_readable & litedramavalonmm2native0_cmd_fifo_syncfifo0_re);
assign litedramavalonmm2native0_cmd_fifo_rdport_adr = litedramavalonmm2native0_cmd_fifo_consume;
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_dout = litedramavalonmm2native0_cmd_fifo_rdport_dat_r;
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_writable = (litedramavalonmm2native0_cmd_fifo_level != 5'd16);
assign litedramavalonmm2native0_cmd_fifo_syncfifo0_readable = (litedramavalonmm2native0_cmd_fifo_level != 1'd0);
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_din = {litedramavalonmm2native0_wdata_fifo_fifo_in_last, litedramavalonmm2native0_wdata_fifo_fifo_in_first, litedramavalonmm2native0_wdata_fifo_fifo_in_payload_byteenable, litedramavalonmm2native0_wdata_fifo_fifo_in_payload_data};
assign {litedramavalonmm2native0_wdata_fifo_fifo_out_last, litedramavalonmm2native0_wdata_fifo_fifo_out_first, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native0_wdata_fifo_syncfifo0_dout;
assign {litedramavalonmm2native0_wdata_fifo_fifo_out_last, litedramavalonmm2native0_wdata_fifo_fifo_out_first, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native0_wdata_fifo_syncfifo0_dout;
assign {litedramavalonmm2native0_wdata_fifo_fifo_out_last, litedramavalonmm2native0_wdata_fifo_fifo_out_first, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native0_wdata_fifo_syncfifo0_dout;
assign {litedramavalonmm2native0_wdata_fifo_fifo_out_last, litedramavalonmm2native0_wdata_fifo_fifo_out_first, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native0_wdata_fifo_syncfifo0_dout;
assign litedramavalonmm2native0_wdata_fifo_sink_ready = litedramavalonmm2native0_wdata_fifo_syncfifo0_writable;
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_we = litedramavalonmm2native0_wdata_fifo_sink_valid;
assign litedramavalonmm2native0_wdata_fifo_fifo_in_first = litedramavalonmm2native0_wdata_fifo_sink_first;
assign litedramavalonmm2native0_wdata_fifo_fifo_in_last = litedramavalonmm2native0_wdata_fifo_sink_last;
assign litedramavalonmm2native0_wdata_fifo_fifo_in_payload_data = litedramavalonmm2native0_wdata_fifo_sink_payload_data;
assign litedramavalonmm2native0_wdata_fifo_fifo_in_payload_byteenable = litedramavalonmm2native0_wdata_fifo_sink_payload_byteenable;
assign litedramavalonmm2native0_wdata_fifo_source_valid = litedramavalonmm2native0_wdata_fifo_syncfifo0_readable;
assign litedramavalonmm2native0_wdata_fifo_source_first = litedramavalonmm2native0_wdata_fifo_fifo_out_first;
assign litedramavalonmm2native0_wdata_fifo_source_last = litedramavalonmm2native0_wdata_fifo_fifo_out_last;
assign litedramavalonmm2native0_wdata_fifo_source_payload_data = litedramavalonmm2native0_wdata_fifo_fifo_out_payload_data;
assign litedramavalonmm2native0_wdata_fifo_source_payload_byteenable = litedramavalonmm2native0_wdata_fifo_fifo_out_payload_byteenable;
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_re = litedramavalonmm2native0_wdata_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native0_wdata_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native0_wdata_fifo_replace) begin
        litedramavalonmm2native0_wdata_fifo_wrport_adr <= (litedramavalonmm2native0_wdata_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native0_wdata_fifo_wrport_adr <= litedramavalonmm2native0_wdata_fifo_produce;
    end
end
assign litedramavalonmm2native0_wdata_fifo_wrport_dat_w = litedramavalonmm2native0_wdata_fifo_syncfifo0_din;
assign litedramavalonmm2native0_wdata_fifo_wrport_we = (litedramavalonmm2native0_wdata_fifo_syncfifo0_we & (litedramavalonmm2native0_wdata_fifo_syncfifo0_writable | litedramavalonmm2native0_wdata_fifo_replace));
assign litedramavalonmm2native0_wdata_fifo_do_read = (litedramavalonmm2native0_wdata_fifo_syncfifo0_readable & litedramavalonmm2native0_wdata_fifo_syncfifo0_re);
assign litedramavalonmm2native0_wdata_fifo_rdport_adr = litedramavalonmm2native0_wdata_fifo_consume;
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_dout = litedramavalonmm2native0_wdata_fifo_rdport_dat_r;
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_writable = (litedramavalonmm2native0_wdata_fifo_level != 5'd16);
assign litedramavalonmm2native0_wdata_fifo_syncfifo0_readable = (litedramavalonmm2native0_wdata_fifo_level != 1'd0);
assign litedramavalonmm2native1_address_offset = 1'd0;
always @(*) begin
    litedramavalonmm2native1_next_state <= 3'd0;
    litedramavalonmm2native1_next_state <= litedramavalonmm2native1_state;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            if (litedramnativeport1_wdata_ready) begin
                litedramavalonmm2native1_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (litedramnativeport1_rdata_valid) begin
                litedramavalonmm2native1_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
            end else begin
                if ((((litedramavalonmm2native1_cmd_fifo_level == 1'd0) & (litedramavalonmm2native1_wdata_fifo_level == 1'd1)) & litedramnativeport1_wdata_ready)) begin
                    litedramavalonmm2native1_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if (litedramnativeport1_rdata_valid) begin
                if ((litedramavalonmm2native1_burst_count == 1'd1)) begin
                    litedramavalonmm2native1_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface1_avalon_port_write) begin
                        litedramavalonmm2native1_next_state <= 2'd3;
                    end
                    if (avalonmminterface1_avalon_port_read) begin
                        litedramavalonmm2native1_next_state <= 3'd4;
                    end
                end else begin
                    if (litedramnativeport1_cmd_ready) begin
                        if (litedramnativeport1_cmd_payload_we) begin
                            litedramavalonmm2native1_next_state <= 1'd1;
                        end else begin
                            litedramavalonmm2native1_next_state <= 2'd2;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport1_cmd_valid <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_cmd_valid <= (litedramavalonmm2native1_cmd_fifo_source_valid & (litedramavalonmm2native1_wdata_fifo_level > 1'd0));
        end
        3'd4: begin
            litedramnativeport1_cmd_valid <= (~litedramavalonmm2native1_cmd_ready_seen);
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport1_cmd_valid <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport1_cmd_last <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport1_cmd_last <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport1_cmd_payload_we <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_cmd_payload_we <= litedramnativeport1_cmd_valid;
        end
        3'd4: begin
            litedramnativeport1_cmd_payload_we <= 1'd0;
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport1_cmd_payload_we <= avalonmminterface1_avalon_port_write;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport1_cmd_payload_addr <= 24'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_cmd_payload_addr <= litedramavalonmm2native1_cmd_fifo_source_payload_address;
        end
        3'd4: begin
            litedramnativeport1_cmd_payload_addr <= litedramavalonmm2native1_address;
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport1_cmd_payload_addr <= (avalonmminterface1_avalon_port_address - litedramavalonmm2native1_address_offset);
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport1_wdata_valid <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            litedramnativeport1_wdata_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_wdata_valid <= litedramavalonmm2native1_wdata_fifo_source_valid;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport1_wdata_payload_data <= 16'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            litedramnativeport1_wdata_payload_data <= litedramavalonmm2native1_writedata;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_wdata_payload_data <= litedramavalonmm2native1_wdata_fifo_source_payload_data;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport1_wdata_payload_we <= 2'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            litedramnativeport1_wdata_payload_we <= litedramavalonmm2native1_byteenable;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport1_wdata_payload_we <= litedramavalonmm2native1_wdata_fifo_source_payload_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport1_rdata_ready <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            litedramnativeport1_rdata_ready <= 1'd0;
        end
        2'd2: begin
            litedramnativeport1_rdata_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramnativeport1_rdata_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface1_avalon_port_readdata <= 16'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport1_rdata_valid) begin
                avalonmminterface1_avalon_port_readdata <= litedramnativeport1_rdata_payload_data;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface1_avalon_port_readdata <= litedramnativeport1_rdata_payload_data;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface1_avalon_port_readdatavalid <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport1_rdata_valid) begin
                avalonmminterface1_avalon_port_readdatavalid <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface1_avalon_port_readdatavalid <= litedramnativeport1_rdata_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface1_avalon_port_waitrequest <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
            avalonmminterface1_avalon_port_waitrequest <= 1'd1;
        end
        2'd2: begin
            avalonmminterface1_avalon_port_waitrequest <= 1'd1;
        end
        2'd3: begin
            avalonmminterface1_avalon_port_waitrequest <= (~(litedramavalonmm2native1_cmd_fifo_sink_ready & litedramavalonmm2native1_wdata_fifo_sink_ready));
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
            end else begin
                avalonmminterface1_avalon_port_waitrequest <= 1'd1;
            end
        end
        3'd4: begin
            avalonmminterface1_avalon_port_waitrequest <= 1'd1;
        end
        default: begin
            avalonmminterface1_avalon_port_waitrequest <= 1'd1;
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface1_avalon_port_read) begin
                        avalonmminterface1_avalon_port_waitrequest <= 1'd0;
                    end
                end else begin
                    if (litedramnativeport1_cmd_ready) begin
                        avalonmminterface1_avalon_port_waitrequest <= 1'd0;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_wdata_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_wdata_fifo_sink_valid <= (avalonmminterface1_avalon_port_write & (~avalonmminterface1_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_latch <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                litedramavalonmm2native1_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_wdata_fifo_sink_payload_data <= 16'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_wdata_fifo_sink_payload_data <= avalonmminterface1_avalon_port_writedata;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_wdata_fifo_sink_payload_byteenable <= 2'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_wdata_fifo_sink_payload_byteenable <= avalonmminterface1_avalon_port_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value0 <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                if ((litedramavalonmm2native1_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_wdata_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_wdata_fifo_source_ready <= litedramnativeport1_wdata_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value_ce0 <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                if ((litedramavalonmm2native1_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value_ce0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value1 <= 9'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value1 <= (litedramavalonmm2native1_cmd_ready_count - 1'd1);
            end
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface1_avalon_port_read) begin
                        litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value1 <= avalonmminterface1_avalon_port_burstcount;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value_ce1 <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            if ((avalonmminterface1_avalon_port_read | avalonmminterface1_avalon_port_write)) begin
                if ((avalonmminterface1_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface1_avalon_port_read) begin
                        litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value_ce1 <= 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_cmd_fifo_sink_valid <= (avalonmminterface1_avalon_port_write & (~avalonmminterface1_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_fifo_sink_payload_address <= 24'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_cmd_fifo_sink_payload_address <= litedramavalonmm2native1_address;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value2 <= 9'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native1_cmd_fifo_sink_ready & litedramavalonmm2native1_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value2 <= (litedramavalonmm2native1_burst_count - 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport1_rdata_valid) begin
                litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value2 <= (litedramavalonmm2native1_burst_count - 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_cmd_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native1_cmd_fifo_source_ready <= litedramnativeport1_cmd_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value_ce2 <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native1_cmd_fifo_sink_ready & litedramavalonmm2native1_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value_ce2 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport1_rdata_valid) begin
                litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_address_litedramavalonmm2native1_next_value3 <= 24'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native1_cmd_fifo_sink_ready & litedramavalonmm2native1_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native1_address_litedramavalonmm2native1_next_value3 <= (litedramavalonmm2native1_address + 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                litedramavalonmm2native1_address_litedramavalonmm2native1_next_value3 <= (litedramavalonmm2native1_address + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native1_address_litedramavalonmm2native1_next_value_ce3 <= 1'd0;
    case (litedramavalonmm2native1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface1_avalon_port_write & (litedramavalonmm2native1_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native1_cmd_fifo_sink_ready & litedramavalonmm2native1_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native1_address_litedramavalonmm2native1_next_value_ce3 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport1_cmd_ready) begin
                litedramavalonmm2native1_address_litedramavalonmm2native1_next_value_ce3 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_din = {litedramavalonmm2native1_cmd_fifo_fifo_in_last, litedramavalonmm2native1_cmd_fifo_fifo_in_first, litedramavalonmm2native1_cmd_fifo_fifo_in_payload_address};
assign {litedramavalonmm2native1_cmd_fifo_fifo_out_last, litedramavalonmm2native1_cmd_fifo_fifo_out_first, litedramavalonmm2native1_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native1_cmd_fifo_syncfifo1_dout;
assign {litedramavalonmm2native1_cmd_fifo_fifo_out_last, litedramavalonmm2native1_cmd_fifo_fifo_out_first, litedramavalonmm2native1_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native1_cmd_fifo_syncfifo1_dout;
assign {litedramavalonmm2native1_cmd_fifo_fifo_out_last, litedramavalonmm2native1_cmd_fifo_fifo_out_first, litedramavalonmm2native1_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native1_cmd_fifo_syncfifo1_dout;
assign litedramavalonmm2native1_cmd_fifo_sink_ready = litedramavalonmm2native1_cmd_fifo_syncfifo1_writable;
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_we = litedramavalonmm2native1_cmd_fifo_sink_valid;
assign litedramavalonmm2native1_cmd_fifo_fifo_in_first = litedramavalonmm2native1_cmd_fifo_sink_first;
assign litedramavalonmm2native1_cmd_fifo_fifo_in_last = litedramavalonmm2native1_cmd_fifo_sink_last;
assign litedramavalonmm2native1_cmd_fifo_fifo_in_payload_address = litedramavalonmm2native1_cmd_fifo_sink_payload_address;
assign litedramavalonmm2native1_cmd_fifo_source_valid = litedramavalonmm2native1_cmd_fifo_syncfifo1_readable;
assign litedramavalonmm2native1_cmd_fifo_source_first = litedramavalonmm2native1_cmd_fifo_fifo_out_first;
assign litedramavalonmm2native1_cmd_fifo_source_last = litedramavalonmm2native1_cmd_fifo_fifo_out_last;
assign litedramavalonmm2native1_cmd_fifo_source_payload_address = litedramavalonmm2native1_cmd_fifo_fifo_out_payload_address;
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_re = litedramavalonmm2native1_cmd_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native1_cmd_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native1_cmd_fifo_replace) begin
        litedramavalonmm2native1_cmd_fifo_wrport_adr <= (litedramavalonmm2native1_cmd_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native1_cmd_fifo_wrport_adr <= litedramavalonmm2native1_cmd_fifo_produce;
    end
end
assign litedramavalonmm2native1_cmd_fifo_wrport_dat_w = litedramavalonmm2native1_cmd_fifo_syncfifo1_din;
assign litedramavalonmm2native1_cmd_fifo_wrport_we = (litedramavalonmm2native1_cmd_fifo_syncfifo1_we & (litedramavalonmm2native1_cmd_fifo_syncfifo1_writable | litedramavalonmm2native1_cmd_fifo_replace));
assign litedramavalonmm2native1_cmd_fifo_do_read = (litedramavalonmm2native1_cmd_fifo_syncfifo1_readable & litedramavalonmm2native1_cmd_fifo_syncfifo1_re);
assign litedramavalonmm2native1_cmd_fifo_rdport_adr = litedramavalonmm2native1_cmd_fifo_consume;
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_dout = litedramavalonmm2native1_cmd_fifo_rdport_dat_r;
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_writable = (litedramavalonmm2native1_cmd_fifo_level != 5'd16);
assign litedramavalonmm2native1_cmd_fifo_syncfifo1_readable = (litedramavalonmm2native1_cmd_fifo_level != 1'd0);
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_din = {litedramavalonmm2native1_wdata_fifo_fifo_in_last, litedramavalonmm2native1_wdata_fifo_fifo_in_first, litedramavalonmm2native1_wdata_fifo_fifo_in_payload_byteenable, litedramavalonmm2native1_wdata_fifo_fifo_in_payload_data};
assign {litedramavalonmm2native1_wdata_fifo_fifo_out_last, litedramavalonmm2native1_wdata_fifo_fifo_out_first, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native1_wdata_fifo_syncfifo1_dout;
assign {litedramavalonmm2native1_wdata_fifo_fifo_out_last, litedramavalonmm2native1_wdata_fifo_fifo_out_first, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native1_wdata_fifo_syncfifo1_dout;
assign {litedramavalonmm2native1_wdata_fifo_fifo_out_last, litedramavalonmm2native1_wdata_fifo_fifo_out_first, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native1_wdata_fifo_syncfifo1_dout;
assign {litedramavalonmm2native1_wdata_fifo_fifo_out_last, litedramavalonmm2native1_wdata_fifo_fifo_out_first, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native1_wdata_fifo_syncfifo1_dout;
assign litedramavalonmm2native1_wdata_fifo_sink_ready = litedramavalonmm2native1_wdata_fifo_syncfifo1_writable;
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_we = litedramavalonmm2native1_wdata_fifo_sink_valid;
assign litedramavalonmm2native1_wdata_fifo_fifo_in_first = litedramavalonmm2native1_wdata_fifo_sink_first;
assign litedramavalonmm2native1_wdata_fifo_fifo_in_last = litedramavalonmm2native1_wdata_fifo_sink_last;
assign litedramavalonmm2native1_wdata_fifo_fifo_in_payload_data = litedramavalonmm2native1_wdata_fifo_sink_payload_data;
assign litedramavalonmm2native1_wdata_fifo_fifo_in_payload_byteenable = litedramavalonmm2native1_wdata_fifo_sink_payload_byteenable;
assign litedramavalonmm2native1_wdata_fifo_source_valid = litedramavalonmm2native1_wdata_fifo_syncfifo1_readable;
assign litedramavalonmm2native1_wdata_fifo_source_first = litedramavalonmm2native1_wdata_fifo_fifo_out_first;
assign litedramavalonmm2native1_wdata_fifo_source_last = litedramavalonmm2native1_wdata_fifo_fifo_out_last;
assign litedramavalonmm2native1_wdata_fifo_source_payload_data = litedramavalonmm2native1_wdata_fifo_fifo_out_payload_data;
assign litedramavalonmm2native1_wdata_fifo_source_payload_byteenable = litedramavalonmm2native1_wdata_fifo_fifo_out_payload_byteenable;
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_re = litedramavalonmm2native1_wdata_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native1_wdata_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native1_wdata_fifo_replace) begin
        litedramavalonmm2native1_wdata_fifo_wrport_adr <= (litedramavalonmm2native1_wdata_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native1_wdata_fifo_wrport_adr <= litedramavalonmm2native1_wdata_fifo_produce;
    end
end
assign litedramavalonmm2native1_wdata_fifo_wrport_dat_w = litedramavalonmm2native1_wdata_fifo_syncfifo1_din;
assign litedramavalonmm2native1_wdata_fifo_wrport_we = (litedramavalonmm2native1_wdata_fifo_syncfifo1_we & (litedramavalonmm2native1_wdata_fifo_syncfifo1_writable | litedramavalonmm2native1_wdata_fifo_replace));
assign litedramavalonmm2native1_wdata_fifo_do_read = (litedramavalonmm2native1_wdata_fifo_syncfifo1_readable & litedramavalonmm2native1_wdata_fifo_syncfifo1_re);
assign litedramavalonmm2native1_wdata_fifo_rdport_adr = litedramavalonmm2native1_wdata_fifo_consume;
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_dout = litedramavalonmm2native1_wdata_fifo_rdport_dat_r;
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_writable = (litedramavalonmm2native1_wdata_fifo_level != 5'd16);
assign litedramavalonmm2native1_wdata_fifo_syncfifo1_readable = (litedramavalonmm2native1_wdata_fifo_level != 1'd0);
assign litedramavalonmm2native2_address_offset = 1'd0;
always @(*) begin
    litedramavalonmm2native2_next_state <= 3'd0;
    litedramavalonmm2native2_next_state <= litedramavalonmm2native2_state;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            if (litedramnativeport2_wdata_ready) begin
                litedramavalonmm2native2_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (litedramnativeport2_rdata_valid) begin
                litedramavalonmm2native2_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
            end else begin
                if ((((litedramavalonmm2native2_cmd_fifo_level == 1'd0) & (litedramavalonmm2native2_wdata_fifo_level == 1'd1)) & litedramnativeport2_wdata_ready)) begin
                    litedramavalonmm2native2_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if (litedramnativeport2_rdata_valid) begin
                if ((litedramavalonmm2native2_burst_count == 1'd1)) begin
                    litedramavalonmm2native2_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface2_avalon_port_write) begin
                        litedramavalonmm2native2_next_state <= 2'd3;
                    end
                    if (avalonmminterface2_avalon_port_read) begin
                        litedramavalonmm2native2_next_state <= 3'd4;
                    end
                end else begin
                    if (litedramnativeport2_cmd_ready) begin
                        if (litedramnativeport2_cmd_payload_we) begin
                            litedramavalonmm2native2_next_state <= 1'd1;
                        end else begin
                            litedramavalonmm2native2_next_state <= 2'd2;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport2_cmd_payload_addr <= 24'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_cmd_payload_addr <= litedramavalonmm2native2_cmd_fifo_source_payload_address;
        end
        3'd4: begin
            litedramnativeport2_cmd_payload_addr <= litedramavalonmm2native2_address;
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport2_cmd_payload_addr <= (avalonmminterface2_avalon_port_address - litedramavalonmm2native2_address_offset);
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport2_wdata_valid <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            litedramnativeport2_wdata_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_wdata_valid <= litedramavalonmm2native2_wdata_fifo_source_valid;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport2_wdata_payload_data <= 16'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            litedramnativeport2_wdata_payload_data <= litedramavalonmm2native2_writedata;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_wdata_payload_data <= litedramavalonmm2native2_wdata_fifo_source_payload_data;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport2_wdata_payload_we <= 2'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            litedramnativeport2_wdata_payload_we <= litedramavalonmm2native2_byteenable;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_wdata_payload_we <= litedramavalonmm2native2_wdata_fifo_source_payload_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport2_rdata_ready <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            litedramnativeport2_rdata_ready <= 1'd0;
        end
        2'd2: begin
            litedramnativeport2_rdata_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramnativeport2_rdata_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value0 <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                if ((litedramavalonmm2native2_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value_ce0 <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                if ((litedramavalonmm2native2_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value_ce0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    avalonmminterface2_avalon_port_readdata <= 16'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport2_rdata_valid) begin
                avalonmminterface2_avalon_port_readdata <= litedramnativeport2_rdata_payload_data;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface2_avalon_port_readdata <= litedramnativeport2_rdata_payload_data;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface2_avalon_port_readdatavalid <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport2_rdata_valid) begin
                avalonmminterface2_avalon_port_readdatavalid <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface2_avalon_port_readdatavalid <= litedramnativeport2_rdata_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value1 <= 9'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value1 <= (litedramavalonmm2native2_cmd_ready_count - 1'd1);
            end
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface2_avalon_port_read) begin
                        litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value1 <= avalonmminterface2_avalon_port_burstcount;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value_ce1 <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface2_avalon_port_read) begin
                        litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value_ce1 <= 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    avalonmminterface2_avalon_port_waitrequest <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
            avalonmminterface2_avalon_port_waitrequest <= 1'd1;
        end
        2'd2: begin
            avalonmminterface2_avalon_port_waitrequest <= 1'd1;
        end
        2'd3: begin
            avalonmminterface2_avalon_port_waitrequest <= (~(litedramavalonmm2native2_cmd_fifo_sink_ready & litedramavalonmm2native2_wdata_fifo_sink_ready));
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
            end else begin
                avalonmminterface2_avalon_port_waitrequest <= 1'd1;
            end
        end
        3'd4: begin
            avalonmminterface2_avalon_port_waitrequest <= 1'd1;
        end
        default: begin
            avalonmminterface2_avalon_port_waitrequest <= 1'd1;
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface2_avalon_port_read) begin
                        avalonmminterface2_avalon_port_waitrequest <= 1'd0;
                    end
                end else begin
                    if (litedramnativeport2_cmd_ready) begin
                        avalonmminterface2_avalon_port_waitrequest <= 1'd0;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_wdata_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_wdata_fifo_sink_valid <= (avalonmminterface2_avalon_port_write & (~avalonmminterface2_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value2 <= 9'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native2_cmd_fifo_sink_ready & litedramavalonmm2native2_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value2 <= (litedramavalonmm2native2_burst_count - 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport2_rdata_valid) begin
                litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value2 <= (litedramavalonmm2native2_burst_count - 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_latch <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                litedramavalonmm2native2_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_wdata_fifo_sink_payload_data <= 16'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_wdata_fifo_sink_payload_data <= avalonmminterface2_avalon_port_writedata;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value_ce2 <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native2_cmd_fifo_sink_ready & litedramavalonmm2native2_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value_ce2 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport2_rdata_valid) begin
                litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_wdata_fifo_sink_payload_byteenable <= 2'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_wdata_fifo_sink_payload_byteenable <= avalonmminterface2_avalon_port_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_address_litedramavalonmm2native2_next_value3 <= 24'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native2_cmd_fifo_sink_ready & litedramavalonmm2native2_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native2_address_litedramavalonmm2native2_next_value3 <= (litedramavalonmm2native2_address + 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                litedramavalonmm2native2_address_litedramavalonmm2native2_next_value3 <= (litedramavalonmm2native2_address + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_address_litedramavalonmm2native2_next_value_ce3 <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface2_avalon_port_write & (litedramavalonmm2native2_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native2_cmd_fifo_sink_ready & litedramavalonmm2native2_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native2_address_litedramavalonmm2native2_next_value_ce3 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport2_cmd_ready) begin
                litedramavalonmm2native2_address_litedramavalonmm2native2_next_value_ce3 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_wdata_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_wdata_fifo_source_ready <= litedramnativeport2_wdata_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_cmd_fifo_sink_valid <= (avalonmminterface2_avalon_port_write & (~avalonmminterface2_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_fifo_sink_payload_address <= 24'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_cmd_fifo_sink_payload_address <= litedramavalonmm2native2_address;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native2_cmd_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native2_cmd_fifo_source_ready <= litedramnativeport2_cmd_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport2_cmd_valid <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_cmd_valid <= (litedramavalonmm2native2_cmd_fifo_source_valid & (litedramavalonmm2native2_wdata_fifo_level > 1'd0));
        end
        3'd4: begin
            litedramnativeport2_cmd_valid <= (~litedramavalonmm2native2_cmd_ready_seen);
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport2_cmd_valid <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport2_cmd_last <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport2_cmd_last <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport2_cmd_payload_we <= 1'd0;
    case (litedramavalonmm2native2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport2_cmd_payload_we <= litedramnativeport2_cmd_valid;
        end
        3'd4: begin
            litedramnativeport2_cmd_payload_we <= 1'd0;
        end
        default: begin
            if ((avalonmminterface2_avalon_port_read | avalonmminterface2_avalon_port_write)) begin
                if ((avalonmminterface2_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport2_cmd_payload_we <= avalonmminterface2_avalon_port_write;
                end
            end
        end
    endcase
end
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_din = {litedramavalonmm2native2_cmd_fifo_fifo_in_last, litedramavalonmm2native2_cmd_fifo_fifo_in_first, litedramavalonmm2native2_cmd_fifo_fifo_in_payload_address};
assign {litedramavalonmm2native2_cmd_fifo_fifo_out_last, litedramavalonmm2native2_cmd_fifo_fifo_out_first, litedramavalonmm2native2_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native2_cmd_fifo_syncfifo2_dout;
assign {litedramavalonmm2native2_cmd_fifo_fifo_out_last, litedramavalonmm2native2_cmd_fifo_fifo_out_first, litedramavalonmm2native2_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native2_cmd_fifo_syncfifo2_dout;
assign {litedramavalonmm2native2_cmd_fifo_fifo_out_last, litedramavalonmm2native2_cmd_fifo_fifo_out_first, litedramavalonmm2native2_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native2_cmd_fifo_syncfifo2_dout;
assign litedramavalonmm2native2_cmd_fifo_sink_ready = litedramavalonmm2native2_cmd_fifo_syncfifo2_writable;
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_we = litedramavalonmm2native2_cmd_fifo_sink_valid;
assign litedramavalonmm2native2_cmd_fifo_fifo_in_first = litedramavalonmm2native2_cmd_fifo_sink_first;
assign litedramavalonmm2native2_cmd_fifo_fifo_in_last = litedramavalonmm2native2_cmd_fifo_sink_last;
assign litedramavalonmm2native2_cmd_fifo_fifo_in_payload_address = litedramavalonmm2native2_cmd_fifo_sink_payload_address;
assign litedramavalonmm2native2_cmd_fifo_source_valid = litedramavalonmm2native2_cmd_fifo_syncfifo2_readable;
assign litedramavalonmm2native2_cmd_fifo_source_first = litedramavalonmm2native2_cmd_fifo_fifo_out_first;
assign litedramavalonmm2native2_cmd_fifo_source_last = litedramavalonmm2native2_cmd_fifo_fifo_out_last;
assign litedramavalonmm2native2_cmd_fifo_source_payload_address = litedramavalonmm2native2_cmd_fifo_fifo_out_payload_address;
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_re = litedramavalonmm2native2_cmd_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native2_cmd_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native2_cmd_fifo_replace) begin
        litedramavalonmm2native2_cmd_fifo_wrport_adr <= (litedramavalonmm2native2_cmd_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native2_cmd_fifo_wrport_adr <= litedramavalonmm2native2_cmd_fifo_produce;
    end
end
assign litedramavalonmm2native2_cmd_fifo_wrport_dat_w = litedramavalonmm2native2_cmd_fifo_syncfifo2_din;
assign litedramavalonmm2native2_cmd_fifo_wrport_we = (litedramavalonmm2native2_cmd_fifo_syncfifo2_we & (litedramavalonmm2native2_cmd_fifo_syncfifo2_writable | litedramavalonmm2native2_cmd_fifo_replace));
assign litedramavalonmm2native2_cmd_fifo_do_read = (litedramavalonmm2native2_cmd_fifo_syncfifo2_readable & litedramavalonmm2native2_cmd_fifo_syncfifo2_re);
assign litedramavalonmm2native2_cmd_fifo_rdport_adr = litedramavalonmm2native2_cmd_fifo_consume;
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_dout = litedramavalonmm2native2_cmd_fifo_rdport_dat_r;
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_writable = (litedramavalonmm2native2_cmd_fifo_level != 5'd16);
assign litedramavalonmm2native2_cmd_fifo_syncfifo2_readable = (litedramavalonmm2native2_cmd_fifo_level != 1'd0);
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_din = {litedramavalonmm2native2_wdata_fifo_fifo_in_last, litedramavalonmm2native2_wdata_fifo_fifo_in_first, litedramavalonmm2native2_wdata_fifo_fifo_in_payload_byteenable, litedramavalonmm2native2_wdata_fifo_fifo_in_payload_data};
assign {litedramavalonmm2native2_wdata_fifo_fifo_out_last, litedramavalonmm2native2_wdata_fifo_fifo_out_first, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native2_wdata_fifo_syncfifo2_dout;
assign {litedramavalonmm2native2_wdata_fifo_fifo_out_last, litedramavalonmm2native2_wdata_fifo_fifo_out_first, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native2_wdata_fifo_syncfifo2_dout;
assign {litedramavalonmm2native2_wdata_fifo_fifo_out_last, litedramavalonmm2native2_wdata_fifo_fifo_out_first, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native2_wdata_fifo_syncfifo2_dout;
assign {litedramavalonmm2native2_wdata_fifo_fifo_out_last, litedramavalonmm2native2_wdata_fifo_fifo_out_first, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native2_wdata_fifo_syncfifo2_dout;
assign litedramavalonmm2native2_wdata_fifo_sink_ready = litedramavalonmm2native2_wdata_fifo_syncfifo2_writable;
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_we = litedramavalonmm2native2_wdata_fifo_sink_valid;
assign litedramavalonmm2native2_wdata_fifo_fifo_in_first = litedramavalonmm2native2_wdata_fifo_sink_first;
assign litedramavalonmm2native2_wdata_fifo_fifo_in_last = litedramavalonmm2native2_wdata_fifo_sink_last;
assign litedramavalonmm2native2_wdata_fifo_fifo_in_payload_data = litedramavalonmm2native2_wdata_fifo_sink_payload_data;
assign litedramavalonmm2native2_wdata_fifo_fifo_in_payload_byteenable = litedramavalonmm2native2_wdata_fifo_sink_payload_byteenable;
assign litedramavalonmm2native2_wdata_fifo_source_valid = litedramavalonmm2native2_wdata_fifo_syncfifo2_readable;
assign litedramavalonmm2native2_wdata_fifo_source_first = litedramavalonmm2native2_wdata_fifo_fifo_out_first;
assign litedramavalonmm2native2_wdata_fifo_source_last = litedramavalonmm2native2_wdata_fifo_fifo_out_last;
assign litedramavalonmm2native2_wdata_fifo_source_payload_data = litedramavalonmm2native2_wdata_fifo_fifo_out_payload_data;
assign litedramavalonmm2native2_wdata_fifo_source_payload_byteenable = litedramavalonmm2native2_wdata_fifo_fifo_out_payload_byteenable;
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_re = litedramavalonmm2native2_wdata_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native2_wdata_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native2_wdata_fifo_replace) begin
        litedramavalonmm2native2_wdata_fifo_wrport_adr <= (litedramavalonmm2native2_wdata_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native2_wdata_fifo_wrport_adr <= litedramavalonmm2native2_wdata_fifo_produce;
    end
end
assign litedramavalonmm2native2_wdata_fifo_wrport_dat_w = litedramavalonmm2native2_wdata_fifo_syncfifo2_din;
assign litedramavalonmm2native2_wdata_fifo_wrport_we = (litedramavalonmm2native2_wdata_fifo_syncfifo2_we & (litedramavalonmm2native2_wdata_fifo_syncfifo2_writable | litedramavalonmm2native2_wdata_fifo_replace));
assign litedramavalonmm2native2_wdata_fifo_do_read = (litedramavalonmm2native2_wdata_fifo_syncfifo2_readable & litedramavalonmm2native2_wdata_fifo_syncfifo2_re);
assign litedramavalonmm2native2_wdata_fifo_rdport_adr = litedramavalonmm2native2_wdata_fifo_consume;
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_dout = litedramavalonmm2native2_wdata_fifo_rdport_dat_r;
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_writable = (litedramavalonmm2native2_wdata_fifo_level != 5'd16);
assign litedramavalonmm2native2_wdata_fifo_syncfifo2_readable = (litedramavalonmm2native2_wdata_fifo_level != 1'd0);
assign litedramavalonmm2native3_address_offset = 1'd0;
always @(*) begin
    litedramavalonmm2native3_next_state <= 3'd0;
    litedramavalonmm2native3_next_state <= litedramavalonmm2native3_state;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            if (litedramnativeport3_wdata_ready) begin
                litedramavalonmm2native3_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (litedramnativeport3_rdata_valid) begin
                litedramavalonmm2native3_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
            end else begin
                if ((((litedramavalonmm2native3_cmd_fifo_level == 1'd0) & (litedramavalonmm2native3_wdata_fifo_level == 1'd1)) & litedramnativeport3_wdata_ready)) begin
                    litedramavalonmm2native3_next_state <= 1'd0;
                end
            end
        end
        3'd4: begin
            if (litedramnativeport3_rdata_valid) begin
                if ((litedramavalonmm2native3_burst_count == 1'd1)) begin
                    litedramavalonmm2native3_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface3_avalon_port_write) begin
                        litedramavalonmm2native3_next_state <= 2'd3;
                    end
                    if (avalonmminterface3_avalon_port_read) begin
                        litedramavalonmm2native3_next_state <= 3'd4;
                    end
                end else begin
                    if (litedramnativeport3_cmd_ready) begin
                        if (litedramnativeport3_cmd_payload_we) begin
                            litedramavalonmm2native3_next_state <= 1'd1;
                        end else begin
                            litedramavalonmm2native3_next_state <= 2'd2;
                        end
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_address_litedramavalonmm2native3_next_value_ce3 <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native3_cmd_fifo_sink_ready & litedramavalonmm2native3_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native3_address_litedramavalonmm2native3_next_value_ce3 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                litedramavalonmm2native3_address_litedramavalonmm2native3_next_value_ce3 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface3_avalon_port_readdata <= 16'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport3_rdata_valid) begin
                avalonmminterface3_avalon_port_readdata <= litedramnativeport3_rdata_payload_data;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface3_avalon_port_readdata <= litedramnativeport3_rdata_payload_data;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface3_avalon_port_readdatavalid <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeport3_rdata_valid) begin
                avalonmminterface3_avalon_port_readdatavalid <= 1'd1;
            end
        end
        2'd3: begin
        end
        3'd4: begin
            avalonmminterface3_avalon_port_readdatavalid <= litedramnativeport3_rdata_valid;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    avalonmminterface3_avalon_port_waitrequest <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            avalonmminterface3_avalon_port_waitrequest <= 1'd1;
        end
        2'd2: begin
            avalonmminterface3_avalon_port_waitrequest <= 1'd1;
        end
        2'd3: begin
            avalonmminterface3_avalon_port_waitrequest <= (~(litedramavalonmm2native3_cmd_fifo_sink_ready & litedramavalonmm2native3_wdata_fifo_sink_ready));
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
            end else begin
                avalonmminterface3_avalon_port_waitrequest <= 1'd1;
            end
        end
        3'd4: begin
            avalonmminterface3_avalon_port_waitrequest <= 1'd1;
        end
        default: begin
            avalonmminterface3_avalon_port_waitrequest <= 1'd1;
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface3_avalon_port_read) begin
                        avalonmminterface3_avalon_port_waitrequest <= 1'd0;
                    end
                end else begin
                    if (litedramnativeport3_cmd_ready) begin
                        avalonmminterface3_avalon_port_waitrequest <= 1'd0;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_wdata_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_wdata_fifo_sink_valid <= (avalonmminterface3_avalon_port_write & (~avalonmminterface3_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_latch <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                litedramavalonmm2native3_latch <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_wdata_fifo_sink_payload_data <= 16'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_wdata_fifo_sink_payload_data <= avalonmminterface3_avalon_port_writedata;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_wdata_fifo_sink_payload_byteenable <= 2'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_wdata_fifo_sink_payload_byteenable <= avalonmminterface3_avalon_port_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_wdata_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_wdata_fifo_source_ready <= litedramnativeport3_wdata_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_fifo_sink_valid <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_cmd_fifo_sink_valid <= (avalonmminterface3_avalon_port_write & (~avalonmminterface3_avalon_port_waitrequest));
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_fifo_sink_payload_address <= 24'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_cmd_fifo_sink_payload_address <= litedramavalonmm2native3_address;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_fifo_source_ready <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramavalonmm2native3_cmd_fifo_source_ready <= litedramnativeport3_cmd_ready;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value0 <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                if ((litedramavalonmm2native3_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value0 <= 1'd0;
        end
    endcase
end
always @(*) begin
    litedramnativeport3_cmd_valid <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_cmd_valid <= (litedramavalonmm2native3_cmd_fifo_source_valid & (litedramavalonmm2native3_wdata_fifo_level > 1'd0));
        end
        3'd4: begin
            litedramnativeport3_cmd_valid <= (~litedramavalonmm2native3_cmd_ready_seen);
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport3_cmd_valid <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value_ce0 <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                if ((litedramavalonmm2native3_cmd_ready_count == 1'd1)) begin
                    litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value_ce0 <= 1'd1;
                end
            end
        end
        default: begin
            litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    litedramnativeport3_cmd_last <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport3_cmd_last <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value1 <= 9'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value1 <= (litedramavalonmm2native3_cmd_ready_count - 1'd1);
            end
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface3_avalon_port_read) begin
                        litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value1 <= avalonmminterface3_avalon_port_burstcount;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport3_cmd_payload_we <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_cmd_payload_we <= litedramnativeport3_cmd_valid;
        end
        3'd4: begin
            litedramnativeport3_cmd_payload_we <= 1'd0;
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport3_cmd_payload_we <= avalonmminterface3_avalon_port_write;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value_ce1 <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value_ce1 <= 1'd1;
            end
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                    if (avalonmminterface3_avalon_port_read) begin
                        litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value_ce1 <= 1'd1;
                    end
                end else begin
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport3_cmd_payload_addr <= 24'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_cmd_payload_addr <= litedramavalonmm2native3_cmd_fifo_source_payload_address;
        end
        3'd4: begin
            litedramnativeport3_cmd_payload_addr <= litedramavalonmm2native3_address;
        end
        default: begin
            if ((avalonmminterface3_avalon_port_read | avalonmminterface3_avalon_port_write)) begin
                if ((avalonmminterface3_avalon_port_burstcount > 1'd1)) begin
                end else begin
                    litedramnativeport3_cmd_payload_addr <= (avalonmminterface3_avalon_port_address - litedramavalonmm2native3_address_offset);
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeport3_wdata_valid <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            litedramnativeport3_wdata_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_wdata_valid <= litedramavalonmm2native3_wdata_fifo_source_valid;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport3_wdata_payload_data <= 16'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            litedramnativeport3_wdata_payload_data <= litedramavalonmm2native3_writedata;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_wdata_payload_data <= litedramavalonmm2native3_wdata_fifo_source_payload_data;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport3_wdata_payload_we <= 2'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            litedramnativeport3_wdata_payload_we <= litedramavalonmm2native3_byteenable;
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeport3_wdata_payload_we <= litedramavalonmm2native3_wdata_fifo_source_payload_byteenable;
        end
        3'd4: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeport3_rdata_ready <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
            litedramnativeport3_rdata_ready <= 1'd0;
        end
        2'd2: begin
            litedramnativeport3_rdata_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            litedramnativeport3_rdata_ready <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value2 <= 9'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native3_cmd_fifo_sink_ready & litedramavalonmm2native3_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value2 <= (litedramavalonmm2native3_burst_count - 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport3_rdata_valid) begin
                litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value2 <= (litedramavalonmm2native3_burst_count - 1'd1);
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value_ce2 <= 1'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native3_cmd_fifo_sink_ready & litedramavalonmm2native3_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value_ce2 <= 1'd1;
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport3_rdata_valid) begin
                litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value_ce2 <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramavalonmm2native3_address_litedramavalonmm2native3_next_value3 <= 24'd0;
    case (litedramavalonmm2native3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if ((avalonmminterface3_avalon_port_write & (litedramavalonmm2native3_burst_count > 1'd0))) begin
                if ((litedramavalonmm2native3_cmd_fifo_sink_ready & litedramavalonmm2native3_cmd_fifo_sink_valid)) begin
                    litedramavalonmm2native3_address_litedramavalonmm2native3_next_value3 <= (litedramavalonmm2native3_address + 1'd1);
                end
            end else begin
            end
        end
        3'd4: begin
            if (litedramnativeport3_cmd_ready) begin
                litedramavalonmm2native3_address_litedramavalonmm2native3_next_value3 <= (litedramavalonmm2native3_address + 1'd1);
            end
        end
        default: begin
        end
    endcase
end
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_din = {litedramavalonmm2native3_cmd_fifo_fifo_in_last, litedramavalonmm2native3_cmd_fifo_fifo_in_first, litedramavalonmm2native3_cmd_fifo_fifo_in_payload_address};
assign {litedramavalonmm2native3_cmd_fifo_fifo_out_last, litedramavalonmm2native3_cmd_fifo_fifo_out_first, litedramavalonmm2native3_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native3_cmd_fifo_syncfifo3_dout;
assign {litedramavalonmm2native3_cmd_fifo_fifo_out_last, litedramavalonmm2native3_cmd_fifo_fifo_out_first, litedramavalonmm2native3_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native3_cmd_fifo_syncfifo3_dout;
assign {litedramavalonmm2native3_cmd_fifo_fifo_out_last, litedramavalonmm2native3_cmd_fifo_fifo_out_first, litedramavalonmm2native3_cmd_fifo_fifo_out_payload_address} = litedramavalonmm2native3_cmd_fifo_syncfifo3_dout;
assign litedramavalonmm2native3_cmd_fifo_sink_ready = litedramavalonmm2native3_cmd_fifo_syncfifo3_writable;
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_we = litedramavalonmm2native3_cmd_fifo_sink_valid;
assign litedramavalonmm2native3_cmd_fifo_fifo_in_first = litedramavalonmm2native3_cmd_fifo_sink_first;
assign litedramavalonmm2native3_cmd_fifo_fifo_in_last = litedramavalonmm2native3_cmd_fifo_sink_last;
assign litedramavalonmm2native3_cmd_fifo_fifo_in_payload_address = litedramavalonmm2native3_cmd_fifo_sink_payload_address;
assign litedramavalonmm2native3_cmd_fifo_source_valid = litedramavalonmm2native3_cmd_fifo_syncfifo3_readable;
assign litedramavalonmm2native3_cmd_fifo_source_first = litedramavalonmm2native3_cmd_fifo_fifo_out_first;
assign litedramavalonmm2native3_cmd_fifo_source_last = litedramavalonmm2native3_cmd_fifo_fifo_out_last;
assign litedramavalonmm2native3_cmd_fifo_source_payload_address = litedramavalonmm2native3_cmd_fifo_fifo_out_payload_address;
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_re = litedramavalonmm2native3_cmd_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native3_cmd_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native3_cmd_fifo_replace) begin
        litedramavalonmm2native3_cmd_fifo_wrport_adr <= (litedramavalonmm2native3_cmd_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native3_cmd_fifo_wrport_adr <= litedramavalonmm2native3_cmd_fifo_produce;
    end
end
assign litedramavalonmm2native3_cmd_fifo_wrport_dat_w = litedramavalonmm2native3_cmd_fifo_syncfifo3_din;
assign litedramavalonmm2native3_cmd_fifo_wrport_we = (litedramavalonmm2native3_cmd_fifo_syncfifo3_we & (litedramavalonmm2native3_cmd_fifo_syncfifo3_writable | litedramavalonmm2native3_cmd_fifo_replace));
assign litedramavalonmm2native3_cmd_fifo_do_read = (litedramavalonmm2native3_cmd_fifo_syncfifo3_readable & litedramavalonmm2native3_cmd_fifo_syncfifo3_re);
assign litedramavalonmm2native3_cmd_fifo_rdport_adr = litedramavalonmm2native3_cmd_fifo_consume;
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_dout = litedramavalonmm2native3_cmd_fifo_rdport_dat_r;
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_writable = (litedramavalonmm2native3_cmd_fifo_level != 5'd16);
assign litedramavalonmm2native3_cmd_fifo_syncfifo3_readable = (litedramavalonmm2native3_cmd_fifo_level != 1'd0);
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_din = {litedramavalonmm2native3_wdata_fifo_fifo_in_last, litedramavalonmm2native3_wdata_fifo_fifo_in_first, litedramavalonmm2native3_wdata_fifo_fifo_in_payload_byteenable, litedramavalonmm2native3_wdata_fifo_fifo_in_payload_data};
assign {litedramavalonmm2native3_wdata_fifo_fifo_out_last, litedramavalonmm2native3_wdata_fifo_fifo_out_first, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native3_wdata_fifo_syncfifo3_dout;
assign {litedramavalonmm2native3_wdata_fifo_fifo_out_last, litedramavalonmm2native3_wdata_fifo_fifo_out_first, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native3_wdata_fifo_syncfifo3_dout;
assign {litedramavalonmm2native3_wdata_fifo_fifo_out_last, litedramavalonmm2native3_wdata_fifo_fifo_out_first, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native3_wdata_fifo_syncfifo3_dout;
assign {litedramavalonmm2native3_wdata_fifo_fifo_out_last, litedramavalonmm2native3_wdata_fifo_fifo_out_first, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable, litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data} = litedramavalonmm2native3_wdata_fifo_syncfifo3_dout;
assign litedramavalonmm2native3_wdata_fifo_sink_ready = litedramavalonmm2native3_wdata_fifo_syncfifo3_writable;
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_we = litedramavalonmm2native3_wdata_fifo_sink_valid;
assign litedramavalonmm2native3_wdata_fifo_fifo_in_first = litedramavalonmm2native3_wdata_fifo_sink_first;
assign litedramavalonmm2native3_wdata_fifo_fifo_in_last = litedramavalonmm2native3_wdata_fifo_sink_last;
assign litedramavalonmm2native3_wdata_fifo_fifo_in_payload_data = litedramavalonmm2native3_wdata_fifo_sink_payload_data;
assign litedramavalonmm2native3_wdata_fifo_fifo_in_payload_byteenable = litedramavalonmm2native3_wdata_fifo_sink_payload_byteenable;
assign litedramavalonmm2native3_wdata_fifo_source_valid = litedramavalonmm2native3_wdata_fifo_syncfifo3_readable;
assign litedramavalonmm2native3_wdata_fifo_source_first = litedramavalonmm2native3_wdata_fifo_fifo_out_first;
assign litedramavalonmm2native3_wdata_fifo_source_last = litedramavalonmm2native3_wdata_fifo_fifo_out_last;
assign litedramavalonmm2native3_wdata_fifo_source_payload_data = litedramavalonmm2native3_wdata_fifo_fifo_out_payload_data;
assign litedramavalonmm2native3_wdata_fifo_source_payload_byteenable = litedramavalonmm2native3_wdata_fifo_fifo_out_payload_byteenable;
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_re = litedramavalonmm2native3_wdata_fifo_source_ready;
always @(*) begin
    litedramavalonmm2native3_wdata_fifo_wrport_adr <= 4'd0;
    if (litedramavalonmm2native3_wdata_fifo_replace) begin
        litedramavalonmm2native3_wdata_fifo_wrport_adr <= (litedramavalonmm2native3_wdata_fifo_produce - 1'd1);
    end else begin
        litedramavalonmm2native3_wdata_fifo_wrport_adr <= litedramavalonmm2native3_wdata_fifo_produce;
    end
end
assign litedramavalonmm2native3_wdata_fifo_wrport_dat_w = litedramavalonmm2native3_wdata_fifo_syncfifo3_din;
assign litedramavalonmm2native3_wdata_fifo_wrport_we = (litedramavalonmm2native3_wdata_fifo_syncfifo3_we & (litedramavalonmm2native3_wdata_fifo_syncfifo3_writable | litedramavalonmm2native3_wdata_fifo_replace));
assign litedramavalonmm2native3_wdata_fifo_do_read = (litedramavalonmm2native3_wdata_fifo_syncfifo3_readable & litedramavalonmm2native3_wdata_fifo_syncfifo3_re);
assign litedramavalonmm2native3_wdata_fifo_rdport_adr = litedramavalonmm2native3_wdata_fifo_consume;
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_dout = litedramavalonmm2native3_wdata_fifo_rdport_dat_r;
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_writable = (litedramavalonmm2native3_wdata_fifo_level != 5'd16);
assign litedramavalonmm2native3_wdata_fifo_syncfifo3_readable = (litedramavalonmm2native3_wdata_fifo_level != 1'd0);
always @(*) begin
    wishbone2csr_next_state <= 2'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface1_dat_w_wishbone2csr_next_value0 <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            interface1_dat_w_wishbone2csr_next_value0 <= interface0_dat_w;
        end
    endcase
end
always @(*) begin
    interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    interface0_dat_r <= 32'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            interface0_dat_r <= interface1_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface1_adr_wishbone2csr_next_value1 <= 14'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_adr_wishbone2csr_next_value1 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr_wishbone2csr_next_value1 <= interface0_adr[29:0];
            end
        end
    endcase
end
always @(*) begin
    interface1_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    interface1_we_wishbone2csr_next_value2 <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_we_wishbone2csr_next_value2 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we_wishbone2csr_next_value2 <= (interface0_we & (interface0_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    interface0_ack <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            interface0_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    interface1_we_wishbone2csr_next_value_ce2 <= 1'd0;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_we_wishbone2csr_next_value_ce2 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((interface0_cyc & interface0_stb)) begin
                interface1_we_wishbone2csr_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
    end
end
always @(*) begin
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_we <= (~interface0_bank_bus_we);
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_we <= (~interface0_bank_bus_we);
    end
end
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_we <= (~interface0_bank_bus_we);
    end
end
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
    end
end
always @(*) begin
    litedramcore_soc_rst <= 1'd0;
    if (litedramcore_reset_re) begin
        litedramcore_soc_rst <= litedramcore_reset_storage[0];
    end
end
assign litedramcore_cpu_rst = litedramcore_reset_storage[1];
assign csrbank0_reset0_w = litedramcore_reset_storage[1:0];
assign csrbank0_scratch0_w = litedramcore_scratch_storage[31:0];
assign csrbank0_bus_errors_w = litedramcore_bus_errors_status[31:0];
assign litedramcore_bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_init_done0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_init_done0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_init_done0_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    csrbank1_init_done0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_init_done0_re <= interface1_bank_bus_we;
    end
end
assign csrbank1_init_error0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_init_error0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_init_error0_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_init_error0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_init_error0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_init_done0_w = init_done_storage;
assign csrbank1_init_error0_w = init_error_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_dfii_control0_r = interface2_bank_bus_dat_w[3:0];
always @(*) begin
    csrbank2_dfii_control0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_dfii_control0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_control0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_dfii_control0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_dfii_pi0_command0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_dfii_pi0_command0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi0_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_dfii_pi0_command0_we <= (~interface2_bank_bus_we);
    end
end
assign litedramcore_sdram_command_issue_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    litedramcore_sdram_command_issue_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        litedramcore_sdram_command_issue_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    litedramcore_sdram_command_issue_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        litedramcore_sdram_command_issue_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_address0_r = interface2_bank_bus_dat_w[12:0];
always @(*) begin
    csrbank2_dfii_pi0_address0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_dfii_pi0_address0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_address0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_dfii_pi0_address0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi0_baddress0_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank2_dfii_pi0_baddress0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank2_dfii_pi0_baddress0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi0_baddress0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank2_dfii_pi0_baddress0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_wrdata0_r = interface2_bank_bus_dat_w[15:0];
always @(*) begin
    csrbank2_dfii_pi0_wrdata0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank2_dfii_pi0_wrdata0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_wrdata0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank2_dfii_pi0_wrdata0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi0_rddata_r = interface2_bank_bus_dat_w[15:0];
always @(*) begin
    csrbank2_dfii_pi0_rddata_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank2_dfii_pi0_rddata_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_rddata_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank2_dfii_pi0_rddata_re <= interface2_bank_bus_we;
    end
end
assign litedramcore_sdram_sel = litedramcore_sdram_storage[0];
assign litedramcore_sdram_cke = litedramcore_sdram_storage[1];
assign litedramcore_sdram_odt = litedramcore_sdram_storage[2];
assign litedramcore_sdram_reset_n = litedramcore_sdram_storage[3];
assign csrbank2_dfii_control0_w = litedramcore_sdram_storage[3:0];
assign litedramcore_sdram_csrfield_cs = litedramcore_sdram_command_storage[0];
assign litedramcore_sdram_csrfield_we = litedramcore_sdram_command_storage[1];
assign litedramcore_sdram_csrfield_cas = litedramcore_sdram_command_storage[2];
assign litedramcore_sdram_csrfield_ras = litedramcore_sdram_command_storage[3];
assign litedramcore_sdram_csrfield_wren = litedramcore_sdram_command_storage[4];
assign litedramcore_sdram_csrfield_rden = litedramcore_sdram_command_storage[5];
assign litedramcore_sdram_csrfield_cs_top = litedramcore_sdram_command_storage[6];
assign litedramcore_sdram_csrfield_cs_bottom = litedramcore_sdram_command_storage[7];
assign csrbank2_dfii_pi0_command0_w = litedramcore_sdram_command_storage[7:0];
assign csrbank2_dfii_pi0_address0_w = litedramcore_sdram_address_storage[12:0];
assign csrbank2_dfii_pi0_baddress0_w = litedramcore_sdram_baddress_storage[1:0];
assign csrbank2_dfii_pi0_wrdata0_w = litedramcore_sdram_wrdata_storage[15:0];
assign csrbank2_dfii_pi0_rddata_w = litedramcore_sdram_rddata_status[15:0];
assign litedramcore_sdram_rddata_we = csrbank2_dfii_pi0_rddata_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd3);
assign csrbank3_load0_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank3_load0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_load0_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank3_load0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_load0_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_reload0_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank3_reload0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_reload0_we <= (~interface3_bank_bus_we);
    end
end
always @(*) begin
    csrbank3_reload0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank3_reload0_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_en0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_en0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_en0_we <= (~interface3_bank_bus_we);
    end
end
always @(*) begin
    csrbank3_en0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank3_en0_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_update_value0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_update_value0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank3_update_value0_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank3_update_value0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank3_update_value0_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_value_r = interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank3_value_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank3_value_we <= (~interface3_bank_bus_we);
    end
end
always @(*) begin
    csrbank3_value_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank3_value_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_ev_status_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_ev_status_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank3_ev_status_we <= (~interface3_bank_bus_we);
    end
end
always @(*) begin
    csrbank3_ev_status_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank3_ev_status_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_ev_pending_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_ev_pending_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank3_ev_pending_re <= interface3_bank_bus_we;
    end
end
always @(*) begin
    csrbank3_ev_pending_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank3_ev_pending_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_ev_enable0_r = interface3_bank_bus_dat_w[0];
always @(*) begin
    csrbank3_ev_enable0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank3_ev_enable0_we <= (~interface3_bank_bus_we);
    end
end
always @(*) begin
    csrbank3_ev_enable0_re <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank3_ev_enable0_re <= interface3_bank_bus_we;
    end
end
assign csrbank3_load0_w = litedramcore_load_storage[31:0];
assign csrbank3_reload0_w = litedramcore_reload_storage[31:0];
assign csrbank3_en0_w = litedramcore_en_storage;
assign csrbank3_update_value0_w = litedramcore_update_value_storage;
assign csrbank3_value_w = litedramcore_value_status[31:0];
assign litedramcore_value_we = csrbank3_value_we;
always @(*) begin
    litedramcore_status_status <= 1'd0;
    litedramcore_status_status <= litedramcore_zero0;
end
assign csrbank3_ev_status_w = litedramcore_status_status;
assign litedramcore_status_we = csrbank3_ev_status_we;
always @(*) begin
    litedramcore_pending_status <= 1'd0;
    litedramcore_pending_status <= litedramcore_zero1;
end
assign csrbank3_ev_pending_w = litedramcore_pending_status;
assign litedramcore_pending_we = csrbank3_ev_pending_we;
assign litedramcore_zero2 = litedramcore_enable_storage;
assign csrbank3_ev_enable0_w = litedramcore_enable_storage;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd4);
assign uart_rxtx_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_we <= (~interface4_bank_bus_we);
    end
end
always @(*) begin
    uart_rxtx_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_txfull_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_txfull_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_txfull_we <= (~interface4_bank_bus_we);
    end
end
always @(*) begin
    csrbank4_txfull_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_txfull_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_rxempty_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_rxempty_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_rxempty_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_rxempty_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_rxempty_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_ev_status_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank4_ev_status_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_ev_status_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_ev_status_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_ev_status_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_ev_pending_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank4_ev_pending_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_ev_pending_we <= (~interface4_bank_bus_we);
    end
end
always @(*) begin
    csrbank4_ev_pending_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_ev_pending_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_ev_enable0_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank4_ev_enable0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_ev_enable0_we <= (~interface4_bank_bus_we);
    end
end
always @(*) begin
    csrbank4_ev_enable0_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_ev_enable0_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_txempty_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_txempty_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_txempty_re <= interface4_bank_bus_we;
    end
end
always @(*) begin
    csrbank4_txempty_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_txempty_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_rxfull_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_rxfull_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_rxfull_we <= (~interface4_bank_bus_we);
    end
end
always @(*) begin
    csrbank4_rxfull_re <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_rxfull_re <= interface4_bank_bus_we;
    end
end
assign csrbank4_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank4_txfull_we;
assign csrbank4_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank4_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx0;
    uart_status_status[1] <= uart_rx0;
end
assign csrbank4_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank4_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx1;
    uart_pending_status[1] <= uart_rx1;
end
assign csrbank4_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank4_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank4_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank4_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank4_txempty_we;
assign csrbank4_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank4_rxfull_we;
assign adr = interface1_adr;
assign we = interface1_we;
assign dat_w = interface1_dat_w;
assign interface1_dat_r = dat_r;
assign interface0_bank_bus_adr = adr;
assign interface1_bank_bus_adr = adr;
assign interface2_bank_bus_adr = adr;
assign interface3_bank_bus_adr = adr;
assign interface4_bank_bus_adr = adr;
assign interface0_bank_bus_we = we;
assign interface1_bank_bus_we = we;
assign interface2_bank_bus_we = we;
assign interface3_bank_bus_we = we;
assign interface4_bank_bus_we = we;
assign interface0_bank_bus_dat_w = dat_w;
assign interface1_bank_bus_dat_w = dat_w;
assign interface2_bank_bus_dat_w = dat_w;
assign interface3_bank_bus_dat_w = dat_w;
assign interface4_bank_bus_dat_w = dat_w;
assign dat_r = ((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r);
always @(*) begin
    rhs_self0 <= 30'd0;
    case (grant)
        1'd0: begin
            rhs_self0 <= litedramcore_ibus_adr;
        end
        default: begin
            rhs_self0 <= litedramcore_dbus_adr;
        end
    endcase
end
always @(*) begin
    rhs_self1 <= 32'd0;
    case (grant)
        1'd0: begin
            rhs_self1 <= litedramcore_ibus_dat_w;
        end
        default: begin
            rhs_self1 <= litedramcore_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    rhs_self2 <= 4'd0;
    case (grant)
        1'd0: begin
            rhs_self2 <= litedramcore_ibus_sel;
        end
        default: begin
            rhs_self2 <= litedramcore_dbus_sel;
        end
    endcase
end
always @(*) begin
    rhs_self3 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self3 <= litedramcore_ibus_cyc;
        end
        default: begin
            rhs_self3 <= litedramcore_dbus_cyc;
        end
    endcase
end
always @(*) begin
    rhs_self4 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self4 <= litedramcore_ibus_stb;
        end
        default: begin
            rhs_self4 <= litedramcore_dbus_stb;
        end
    endcase
end
always @(*) begin
    rhs_self5 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self5 <= litedramcore_ibus_we;
        end
        default: begin
            rhs_self5 <= litedramcore_dbus_we;
        end
    endcase
end
always @(*) begin
    rhs_self6 <= 3'd0;
    case (grant)
        1'd0: begin
            rhs_self6 <= litedramcore_ibus_cti;
        end
        default: begin
            rhs_self6 <= litedramcore_dbus_cti;
        end
    endcase
end
always @(*) begin
    rhs_self7 <= 2'd0;
    case (grant)
        1'd0: begin
            rhs_self7 <= litedramcore_ibus_bte;
        end
        default: begin
            rhs_self7 <= litedramcore_dbus_bte;
        end
    endcase
end
always @(*) begin
    rhs_self8 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self8 <= litedramcore_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            rhs_self8 <= litedramcore_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            rhs_self8 <= litedramcore_sdram_choose_cmd_valids[2];
        end
        default: begin
            rhs_self8 <= litedramcore_sdram_choose_cmd_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_self9 <= 13'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self9 <= litedramcore_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_self9 <= litedramcore_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_self9 <= litedramcore_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_self9 <= litedramcore_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_self10 <= 2'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self10 <= litedramcore_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_self10 <= litedramcore_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_self10 <= litedramcore_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_self10 <= litedramcore_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_self11 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self11 <= litedramcore_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_self11 <= litedramcore_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_self11 <= litedramcore_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_self11 <= litedramcore_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_self12 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self12 <= litedramcore_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_self12 <= litedramcore_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_self12 <= litedramcore_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_self12 <= litedramcore_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_self13 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self13 <= litedramcore_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_self13 <= litedramcore_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_self13 <= litedramcore_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_self13 <= litedramcore_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_self0 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            t_self0 <= litedramcore_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_self0 <= litedramcore_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_self0 <= litedramcore_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_self0 <= litedramcore_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_self1 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            t_self1 <= litedramcore_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_self1 <= litedramcore_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_self1 <= litedramcore_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_self1 <= litedramcore_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_self2 <= 1'd0;
    case (litedramcore_sdram_choose_cmd_grant)
        1'd0: begin
            t_self2 <= litedramcore_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_self2 <= litedramcore_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_self2 <= litedramcore_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_self2 <= litedramcore_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self14 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self14 <= litedramcore_sdram_choose_req_valids[0];
        end
        1'd1: begin
            rhs_self14 <= litedramcore_sdram_choose_req_valids[1];
        end
        2'd2: begin
            rhs_self14 <= litedramcore_sdram_choose_req_valids[2];
        end
        default: begin
            rhs_self14 <= litedramcore_sdram_choose_req_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_self15 <= 13'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self15 <= litedramcore_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_self15 <= litedramcore_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_self15 <= litedramcore_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_self15 <= litedramcore_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_self16 <= 2'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self16 <= litedramcore_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_self16 <= litedramcore_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_self16 <= litedramcore_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_self16 <= litedramcore_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_self17 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self17 <= litedramcore_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_self17 <= litedramcore_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_self17 <= litedramcore_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_self17 <= litedramcore_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_self18 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self18 <= litedramcore_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_self18 <= litedramcore_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_self18 <= litedramcore_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_self18 <= litedramcore_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_self19 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            rhs_self19 <= litedramcore_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_self19 <= litedramcore_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_self19 <= litedramcore_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_self19 <= litedramcore_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_self3 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            t_self3 <= litedramcore_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_self3 <= litedramcore_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_self3 <= litedramcore_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_self3 <= litedramcore_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_self4 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            t_self4 <= litedramcore_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_self4 <= litedramcore_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_self4 <= litedramcore_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_self4 <= litedramcore_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_self5 <= 1'd0;
    case (litedramcore_sdram_choose_req_grant)
        1'd0: begin
            t_self5 <= litedramcore_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_self5 <= litedramcore_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_self5 <= litedramcore_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_self5 <= litedramcore_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self20 <= 22'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self20 <= {litedramcore_port_cmd_payload_addr[23:11], litedramcore_port_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self20 <= {litedramnativeport0_cmd_payload_addr[23:11], litedramnativeport0_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self20 <= {litedramnativeport1_cmd_payload_addr[23:11], litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd3: begin
            rhs_self20 <= {litedramnativeport2_cmd_payload_addr[23:11], litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self20 <= {litedramnativeport3_cmd_payload_addr[23:11], litedramnativeport3_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self21 <= 1'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self21 <= litedramcore_port_cmd_payload_we;
        end
        1'd1: begin
            rhs_self21 <= litedramnativeport0_cmd_payload_we;
        end
        2'd2: begin
            rhs_self21 <= litedramnativeport1_cmd_payload_we;
        end
        2'd3: begin
            rhs_self21 <= litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self21 <= litedramnativeport3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self22 <= 1'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self22 <= (((litedramcore_port_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid);
        end
        1'd1: begin
            rhs_self22 <= (((litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid);
        end
        2'd2: begin
            rhs_self22 <= (((litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid);
        end
        2'd3: begin
            rhs_self22 <= (((litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self22 <= (((litedramnativeport3_cmd_payload_addr[10:9] == 1'd0) & (~(((locked4 | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self23 <= 22'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self23 <= {litedramcore_port_cmd_payload_addr[23:11], litedramcore_port_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self23 <= {litedramnativeport0_cmd_payload_addr[23:11], litedramnativeport0_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self23 <= {litedramnativeport1_cmd_payload_addr[23:11], litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd3: begin
            rhs_self23 <= {litedramnativeport2_cmd_payload_addr[23:11], litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self23 <= {litedramnativeport3_cmd_payload_addr[23:11], litedramnativeport3_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self24 <= 1'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self24 <= litedramcore_port_cmd_payload_we;
        end
        1'd1: begin
            rhs_self24 <= litedramnativeport0_cmd_payload_we;
        end
        2'd2: begin
            rhs_self24 <= litedramnativeport1_cmd_payload_we;
        end
        2'd3: begin
            rhs_self24 <= litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self24 <= litedramnativeport3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self25 <= 1'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self25 <= (((litedramcore_port_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid);
        end
        1'd1: begin
            rhs_self25 <= (((litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid);
        end
        2'd2: begin
            rhs_self25 <= (((litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid);
        end
        2'd3: begin
            rhs_self25 <= (((litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked8 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self25 <= (((litedramnativeport3_cmd_payload_addr[10:9] == 1'd1) & (~(((locked9 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self26 <= 22'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self26 <= {litedramcore_port_cmd_payload_addr[23:11], litedramcore_port_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self26 <= {litedramnativeport0_cmd_payload_addr[23:11], litedramnativeport0_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self26 <= {litedramnativeport1_cmd_payload_addr[23:11], litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd3: begin
            rhs_self26 <= {litedramnativeport2_cmd_payload_addr[23:11], litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self26 <= {litedramnativeport3_cmd_payload_addr[23:11], litedramnativeport3_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self27 <= 1'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self27 <= litedramcore_port_cmd_payload_we;
        end
        1'd1: begin
            rhs_self27 <= litedramnativeport0_cmd_payload_we;
        end
        2'd2: begin
            rhs_self27 <= litedramnativeport1_cmd_payload_we;
        end
        2'd3: begin
            rhs_self27 <= litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self27 <= litedramnativeport3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self28 <= 1'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self28 <= (((litedramcore_port_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & litedramcore_port_cmd_valid);
        end
        1'd1: begin
            rhs_self28 <= (((litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & litedramnativeport0_cmd_valid);
        end
        2'd2: begin
            rhs_self28 <= (((litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked12 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & litedramnativeport1_cmd_valid);
        end
        2'd3: begin
            rhs_self28 <= (((litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked13 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self28 <= (((litedramnativeport3_cmd_payload_addr[10:9] == 2'd2) & (~(((locked14 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank3_lock & (roundrobin3_grant == 3'd4))))) & litedramnativeport3_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self29 <= 22'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self29 <= {litedramcore_port_cmd_payload_addr[23:11], litedramcore_port_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self29 <= {litedramnativeport0_cmd_payload_addr[23:11], litedramnativeport0_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self29 <= {litedramnativeport1_cmd_payload_addr[23:11], litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd3: begin
            rhs_self29 <= {litedramnativeport2_cmd_payload_addr[23:11], litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self29 <= {litedramnativeport3_cmd_payload_addr[23:11], litedramnativeport3_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self30 <= 1'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self30 <= litedramcore_port_cmd_payload_we;
        end
        1'd1: begin
            rhs_self30 <= litedramnativeport0_cmd_payload_we;
        end
        2'd2: begin
            rhs_self30 <= litedramnativeport1_cmd_payload_we;
        end
        2'd3: begin
            rhs_self30 <= litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self30 <= litedramnativeport3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self31 <= 1'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self31 <= (((litedramcore_port_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & litedramcore_port_cmd_valid);
        end
        1'd1: begin
            rhs_self31 <= (((litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked16 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))))) & litedramnativeport0_cmd_valid);
        end
        2'd2: begin
            rhs_self31 <= (((litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked17 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))))) & litedramnativeport1_cmd_valid);
        end
        2'd3: begin
            rhs_self31 <= (((litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked18 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))))) & litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self31 <= (((litedramnativeport3_cmd_payload_addr[10:9] == 2'd3) & (~(((locked19 | (litedramcore_sdram_interface_bank0_lock & (roundrobin0_grant == 3'd4))) | (litedramcore_sdram_interface_bank1_lock & (roundrobin1_grant == 3'd4))) | (litedramcore_sdram_interface_bank2_lock & (roundrobin2_grant == 3'd4))))) & litedramnativeport3_cmd_valid);
        end
    endcase
end
always @(*) begin
    self0 <= 2'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self0 <= litedramcore_sdram_nop_ba[1:0];
        end
        1'd1: begin
            self0 <= litedramcore_sdram_choose_req_cmd_payload_ba[1:0];
        end
        2'd2: begin
            self0 <= litedramcore_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            self0 <= litedramcore_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    self1 <= 13'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self1 <= litedramcore_sdram_nop_a;
        end
        1'd1: begin
            self1 <= litedramcore_sdram_choose_req_cmd_payload_a;
        end
        2'd2: begin
            self1 <= litedramcore_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            self1 <= litedramcore_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    self2 <= 1'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self2 <= 1'd0;
        end
        1'd1: begin
            self2 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        2'd2: begin
            self2 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            self2 <= ((litedramcore_sdram_cmd_valid & litedramcore_sdram_cmd_ready) & litedramcore_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self3 <= 1'd0;
        end
        1'd1: begin
            self3 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        2'd2: begin
            self3 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            self3 <= ((litedramcore_sdram_cmd_valid & litedramcore_sdram_cmd_ready) & litedramcore_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self4 <= 1'd0;
        end
        1'd1: begin
            self4 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_we);
        end
        2'd2: begin
            self4 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            self4 <= ((litedramcore_sdram_cmd_valid & litedramcore_sdram_cmd_ready) & litedramcore_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self5 <= 1'd0;
        end
        1'd1: begin
            self5 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        2'd2: begin
            self5 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            self5 <= ((litedramcore_sdram_cmd_valid & litedramcore_sdram_cmd_ready) & litedramcore_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    self6 <= 1'd0;
    case (litedramcore_sdram_steerer_sel)
        1'd0: begin
            self6 <= 1'd0;
        end
        1'd1: begin
            self6 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        2'd2: begin
            self6 <= ((litedramcore_sdram_choose_req_cmd_valid & litedramcore_sdram_choose_req_cmd_ready) & litedramcore_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            self6 <= ((litedramcore_sdram_cmd_valid & litedramcore_sdram_cmd_ready) & litedramcore_sdram_cmd_payload_is_write);
        end
    endcase
end
assign rx_rx = regs1;
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign sdrio_clk_4 = sys_clk;
assign sdrio_clk_5 = sys_clk;
assign sdrio_clk_6 = sys_clk;
assign sdrio_clk_7 = sys_clk;
assign sdrio_clk_8 = sys_clk;
assign sdrio_clk_9 = sys_clk;
assign sdrio_clk_10 = sys_clk;
assign sdrio_clk_11 = sys_clk;
assign sdrio_clk_12 = sys_clk;
assign sdrio_clk_13 = sys_clk;
assign sdrio_clk_14 = sys_clk;
assign sdrio_clk_15 = sys_clk;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sdrio_clk) begin
    inferedsdrtristate0_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate1_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate2_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate3_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate4_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate5_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate6_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate7_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate8_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate9_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate10_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate11_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate12_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate13_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate14_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate15_oe <= dfi_p0_wrdata_en;
end

always @(posedge sys_clk) begin
    user_enable0 <= (init_done_storage & (~init_error_storage));
    user_enable1 <= (init_done_storage & (~init_error_storage));
    user_enable2 <= (init_done_storage & (~init_error_storage));
    user_enable3 <= (init_done_storage & (~init_error_storage));
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slaves <= master;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((litedramcore_bus_errors != 32'd4294967295)) begin
        if (litedramcore_bus_error) begin
            litedramcore_bus_errors <= (litedramcore_bus_errors + 1'd1);
        end
    end
    litedramcore_litedramcore_ram_bus_ack <= 1'd0;
    if (((litedramcore_litedramcore_ram_bus_cyc & litedramcore_litedramcore_ram_bus_stb) & ((~litedramcore_litedramcore_ram_bus_ack) | litedramcore_litedramcore_adr_burst))) begin
        litedramcore_litedramcore_ram_bus_ack <= 1'd1;
    end
    litedramcore_ram_bus_ram_bus_ack <= 1'd0;
    if (((litedramcore_ram_bus_ram_bus_cyc & litedramcore_ram_bus_ram_bus_stb) & ((~litedramcore_ram_bus_ram_bus_ack) | litedramcore_ram_adr_burst))) begin
        litedramcore_ram_bus_ram_bus_ack <= 1'd1;
    end
    if (litedramcore_en_storage) begin
        if ((litedramcore_value == 1'd0)) begin
            litedramcore_value <= litedramcore_reload_storage;
        end else begin
            litedramcore_value <= (litedramcore_value - 1'd1);
        end
    end else begin
        litedramcore_value <= litedramcore_load_storage;
    end
    if (litedramcore_update_value_re) begin
        litedramcore_value_status <= litedramcore_value;
    end
    if (litedramcore_zero_clear) begin
        litedramcore_zero_pending <= 1'd0;
    end
    litedramcore_zero_trigger_d <= litedramcore_zero_trigger;
    if ((litedramcore_zero_trigger & (~litedramcore_zero_trigger_d))) begin
        litedramcore_zero_pending <= 1'd1;
    end
    {tx_tick, tx_phase} <= 24'd9895604;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 24'd9895604);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (latticeplatform_obj_uart_tx_rs232phytx_next_value_ce1) begin
        uart_tx <= latticeplatform_obj_uart_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 24'd9895604);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    rddata_en <= {rddata_en, dfi_p0_rddata_en};
    dfi_p0_rddata_valid <= rddata_en[2];
    if (litedramcore_sdram_csr_dfi_p0_rddata_valid) begin
        litedramcore_sdram_rddata_status <= litedramcore_sdram_csr_dfi_p0_rddata;
    end
    if ((litedramcore_sdram_timer_wait & (~litedramcore_sdram_timer_done0))) begin
        litedramcore_sdram_timer_count1 <= (litedramcore_sdram_timer_count1 - 1'd1);
    end else begin
        litedramcore_sdram_timer_count1 <= 9'd390;
    end
    litedramcore_sdram_postponer_req_o <= 1'd0;
    if (litedramcore_sdram_postponer_req_i) begin
        litedramcore_sdram_postponer_count <= (litedramcore_sdram_postponer_count - 1'd1);
        if ((litedramcore_sdram_postponer_count == 1'd0)) begin
            litedramcore_sdram_postponer_count <= 1'd0;
            litedramcore_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (litedramcore_sdram_sequencer_start0) begin
        litedramcore_sdram_sequencer_count <= 1'd0;
    end else begin
        if (litedramcore_sdram_sequencer_done1) begin
            if ((litedramcore_sdram_sequencer_count != 1'd0)) begin
                litedramcore_sdram_sequencer_count <= (litedramcore_sdram_sequencer_count - 1'd1);
            end
        end
    end
    litedramcore_sdram_cmd_payload_a <= 1'd0;
    litedramcore_sdram_cmd_payload_ba <= 1'd0;
    litedramcore_sdram_cmd_payload_cas <= 1'd0;
    litedramcore_sdram_cmd_payload_ras <= 1'd0;
    litedramcore_sdram_cmd_payload_we <= 1'd0;
    litedramcore_sdram_sequencer_done1 <= 1'd0;
    if ((litedramcore_sdram_sequencer_start1 & (litedramcore_sdram_sequencer_trigger == 1'd0))) begin
        litedramcore_sdram_cmd_payload_a <= 11'd1024;
        litedramcore_sdram_cmd_payload_ba <= 1'd0;
        litedramcore_sdram_cmd_payload_cas <= 1'd0;
        litedramcore_sdram_cmd_payload_ras <= 1'd1;
        litedramcore_sdram_cmd_payload_we <= 1'd1;
    end
    if ((litedramcore_sdram_sequencer_trigger == 1'd1)) begin
        litedramcore_sdram_cmd_payload_a <= 11'd1024;
        litedramcore_sdram_cmd_payload_ba <= 1'd0;
        litedramcore_sdram_cmd_payload_cas <= 1'd1;
        litedramcore_sdram_cmd_payload_ras <= 1'd1;
        litedramcore_sdram_cmd_payload_we <= 1'd0;
    end
    if ((litedramcore_sdram_sequencer_trigger == 3'd5)) begin
        litedramcore_sdram_cmd_payload_a <= 1'd0;
        litedramcore_sdram_cmd_payload_ba <= 1'd0;
        litedramcore_sdram_cmd_payload_cas <= 1'd0;
        litedramcore_sdram_cmd_payload_ras <= 1'd0;
        litedramcore_sdram_cmd_payload_we <= 1'd0;
        litedramcore_sdram_sequencer_done1 <= 1'd1;
    end
    if ((litedramcore_sdram_sequencer_trigger == 3'd5)) begin
        litedramcore_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((litedramcore_sdram_sequencer_trigger != 1'd0)) begin
            litedramcore_sdram_sequencer_trigger <= (litedramcore_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (litedramcore_sdram_sequencer_start1) begin
                litedramcore_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    refresher_state <= refresher_next_state;
    if (litedramcore_sdram_bankmachine0_row_close) begin
        litedramcore_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (litedramcore_sdram_bankmachine0_row_open) begin
            litedramcore_sdram_bankmachine0_row_opened <= 1'd1;
            litedramcore_sdram_bankmachine0_row <= litedramcore_sdram_bankmachine0_source_source_payload_addr[21:9];
        end
    end
    if (((litedramcore_sdram_bankmachine0_syncfifo0_we & litedramcore_sdram_bankmachine0_syncfifo0_writable) & (~litedramcore_sdram_bankmachine0_replace))) begin
        litedramcore_sdram_bankmachine0_produce <= (litedramcore_sdram_bankmachine0_produce + 1'd1);
    end
    if (litedramcore_sdram_bankmachine0_do_read) begin
        litedramcore_sdram_bankmachine0_consume <= (litedramcore_sdram_bankmachine0_consume + 1'd1);
    end
    if (((litedramcore_sdram_bankmachine0_syncfifo0_we & litedramcore_sdram_bankmachine0_syncfifo0_writable) & (~litedramcore_sdram_bankmachine0_replace))) begin
        if ((~litedramcore_sdram_bankmachine0_do_read)) begin
            litedramcore_sdram_bankmachine0_level <= (litedramcore_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (litedramcore_sdram_bankmachine0_do_read) begin
            litedramcore_sdram_bankmachine0_level <= (litedramcore_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~litedramcore_sdram_bankmachine0_pipe_valid_source_valid) | litedramcore_sdram_bankmachine0_pipe_valid_source_ready)) begin
        litedramcore_sdram_bankmachine0_pipe_valid_source_valid <= litedramcore_sdram_bankmachine0_pipe_valid_sink_valid;
        litedramcore_sdram_bankmachine0_pipe_valid_source_first <= litedramcore_sdram_bankmachine0_pipe_valid_sink_first;
        litedramcore_sdram_bankmachine0_pipe_valid_source_last <= litedramcore_sdram_bankmachine0_pipe_valid_sink_last;
        litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we <= litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_we;
        litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr <= litedramcore_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (litedramcore_sdram_bankmachine0_twtpcon_valid) begin
        litedramcore_sdram_bankmachine0_twtpcon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine0_twtpcon_ready)) begin
            litedramcore_sdram_bankmachine0_twtpcon_count <= (litedramcore_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine0_trccon_valid) begin
        litedramcore_sdram_bankmachine0_trccon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine0_trccon_ready)) begin
            litedramcore_sdram_bankmachine0_trccon_count <= (litedramcore_sdram_bankmachine0_trccon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine0_trccon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine0_trascon_valid) begin
        litedramcore_sdram_bankmachine0_trascon_count <= 2'd2;
        if (1'd0) begin
            litedramcore_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine0_trascon_ready)) begin
            litedramcore_sdram_bankmachine0_trascon_count <= (litedramcore_sdram_bankmachine0_trascon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine0_trascon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine0_state <= bankmachine0_next_state;
    if (litedramcore_sdram_bankmachine1_row_close) begin
        litedramcore_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (litedramcore_sdram_bankmachine1_row_open) begin
            litedramcore_sdram_bankmachine1_row_opened <= 1'd1;
            litedramcore_sdram_bankmachine1_row <= litedramcore_sdram_bankmachine1_source_source_payload_addr[21:9];
        end
    end
    if (((litedramcore_sdram_bankmachine1_syncfifo1_we & litedramcore_sdram_bankmachine1_syncfifo1_writable) & (~litedramcore_sdram_bankmachine1_replace))) begin
        litedramcore_sdram_bankmachine1_produce <= (litedramcore_sdram_bankmachine1_produce + 1'd1);
    end
    if (litedramcore_sdram_bankmachine1_do_read) begin
        litedramcore_sdram_bankmachine1_consume <= (litedramcore_sdram_bankmachine1_consume + 1'd1);
    end
    if (((litedramcore_sdram_bankmachine1_syncfifo1_we & litedramcore_sdram_bankmachine1_syncfifo1_writable) & (~litedramcore_sdram_bankmachine1_replace))) begin
        if ((~litedramcore_sdram_bankmachine1_do_read)) begin
            litedramcore_sdram_bankmachine1_level <= (litedramcore_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (litedramcore_sdram_bankmachine1_do_read) begin
            litedramcore_sdram_bankmachine1_level <= (litedramcore_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~litedramcore_sdram_bankmachine1_pipe_valid_source_valid) | litedramcore_sdram_bankmachine1_pipe_valid_source_ready)) begin
        litedramcore_sdram_bankmachine1_pipe_valid_source_valid <= litedramcore_sdram_bankmachine1_pipe_valid_sink_valid;
        litedramcore_sdram_bankmachine1_pipe_valid_source_first <= litedramcore_sdram_bankmachine1_pipe_valid_sink_first;
        litedramcore_sdram_bankmachine1_pipe_valid_source_last <= litedramcore_sdram_bankmachine1_pipe_valid_sink_last;
        litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we <= litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_we;
        litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr <= litedramcore_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (litedramcore_sdram_bankmachine1_twtpcon_valid) begin
        litedramcore_sdram_bankmachine1_twtpcon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine1_twtpcon_ready)) begin
            litedramcore_sdram_bankmachine1_twtpcon_count <= (litedramcore_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine1_trccon_valid) begin
        litedramcore_sdram_bankmachine1_trccon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine1_trccon_ready)) begin
            litedramcore_sdram_bankmachine1_trccon_count <= (litedramcore_sdram_bankmachine1_trccon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine1_trccon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine1_trascon_valid) begin
        litedramcore_sdram_bankmachine1_trascon_count <= 2'd2;
        if (1'd0) begin
            litedramcore_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine1_trascon_ready)) begin
            litedramcore_sdram_bankmachine1_trascon_count <= (litedramcore_sdram_bankmachine1_trascon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine1_trascon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine1_state <= bankmachine1_next_state;
    if (litedramcore_sdram_bankmachine2_row_close) begin
        litedramcore_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (litedramcore_sdram_bankmachine2_row_open) begin
            litedramcore_sdram_bankmachine2_row_opened <= 1'd1;
            litedramcore_sdram_bankmachine2_row <= litedramcore_sdram_bankmachine2_source_source_payload_addr[21:9];
        end
    end
    if (((litedramcore_sdram_bankmachine2_syncfifo2_we & litedramcore_sdram_bankmachine2_syncfifo2_writable) & (~litedramcore_sdram_bankmachine2_replace))) begin
        litedramcore_sdram_bankmachine2_produce <= (litedramcore_sdram_bankmachine2_produce + 1'd1);
    end
    if (litedramcore_sdram_bankmachine2_do_read) begin
        litedramcore_sdram_bankmachine2_consume <= (litedramcore_sdram_bankmachine2_consume + 1'd1);
    end
    if (((litedramcore_sdram_bankmachine2_syncfifo2_we & litedramcore_sdram_bankmachine2_syncfifo2_writable) & (~litedramcore_sdram_bankmachine2_replace))) begin
        if ((~litedramcore_sdram_bankmachine2_do_read)) begin
            litedramcore_sdram_bankmachine2_level <= (litedramcore_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (litedramcore_sdram_bankmachine2_do_read) begin
            litedramcore_sdram_bankmachine2_level <= (litedramcore_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~litedramcore_sdram_bankmachine2_pipe_valid_source_valid) | litedramcore_sdram_bankmachine2_pipe_valid_source_ready)) begin
        litedramcore_sdram_bankmachine2_pipe_valid_source_valid <= litedramcore_sdram_bankmachine2_pipe_valid_sink_valid;
        litedramcore_sdram_bankmachine2_pipe_valid_source_first <= litedramcore_sdram_bankmachine2_pipe_valid_sink_first;
        litedramcore_sdram_bankmachine2_pipe_valid_source_last <= litedramcore_sdram_bankmachine2_pipe_valid_sink_last;
        litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we <= litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_we;
        litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr <= litedramcore_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (litedramcore_sdram_bankmachine2_twtpcon_valid) begin
        litedramcore_sdram_bankmachine2_twtpcon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine2_twtpcon_ready)) begin
            litedramcore_sdram_bankmachine2_twtpcon_count <= (litedramcore_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine2_trccon_valid) begin
        litedramcore_sdram_bankmachine2_trccon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine2_trccon_ready)) begin
            litedramcore_sdram_bankmachine2_trccon_count <= (litedramcore_sdram_bankmachine2_trccon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine2_trccon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine2_trascon_valid) begin
        litedramcore_sdram_bankmachine2_trascon_count <= 2'd2;
        if (1'd0) begin
            litedramcore_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine2_trascon_ready)) begin
            litedramcore_sdram_bankmachine2_trascon_count <= (litedramcore_sdram_bankmachine2_trascon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine2_trascon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine2_state <= bankmachine2_next_state;
    if (litedramcore_sdram_bankmachine3_row_close) begin
        litedramcore_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (litedramcore_sdram_bankmachine3_row_open) begin
            litedramcore_sdram_bankmachine3_row_opened <= 1'd1;
            litedramcore_sdram_bankmachine3_row <= litedramcore_sdram_bankmachine3_source_source_payload_addr[21:9];
        end
    end
    if (((litedramcore_sdram_bankmachine3_syncfifo3_we & litedramcore_sdram_bankmachine3_syncfifo3_writable) & (~litedramcore_sdram_bankmachine3_replace))) begin
        litedramcore_sdram_bankmachine3_produce <= (litedramcore_sdram_bankmachine3_produce + 1'd1);
    end
    if (litedramcore_sdram_bankmachine3_do_read) begin
        litedramcore_sdram_bankmachine3_consume <= (litedramcore_sdram_bankmachine3_consume + 1'd1);
    end
    if (((litedramcore_sdram_bankmachine3_syncfifo3_we & litedramcore_sdram_bankmachine3_syncfifo3_writable) & (~litedramcore_sdram_bankmachine3_replace))) begin
        if ((~litedramcore_sdram_bankmachine3_do_read)) begin
            litedramcore_sdram_bankmachine3_level <= (litedramcore_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (litedramcore_sdram_bankmachine3_do_read) begin
            litedramcore_sdram_bankmachine3_level <= (litedramcore_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~litedramcore_sdram_bankmachine3_pipe_valid_source_valid) | litedramcore_sdram_bankmachine3_pipe_valid_source_ready)) begin
        litedramcore_sdram_bankmachine3_pipe_valid_source_valid <= litedramcore_sdram_bankmachine3_pipe_valid_sink_valid;
        litedramcore_sdram_bankmachine3_pipe_valid_source_first <= litedramcore_sdram_bankmachine3_pipe_valid_sink_first;
        litedramcore_sdram_bankmachine3_pipe_valid_source_last <= litedramcore_sdram_bankmachine3_pipe_valid_sink_last;
        litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we <= litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_we;
        litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr <= litedramcore_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (litedramcore_sdram_bankmachine3_twtpcon_valid) begin
        litedramcore_sdram_bankmachine3_twtpcon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine3_twtpcon_ready)) begin
            litedramcore_sdram_bankmachine3_twtpcon_count <= (litedramcore_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine3_trccon_valid) begin
        litedramcore_sdram_bankmachine3_trccon_count <= 2'd3;
        if (1'd0) begin
            litedramcore_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine3_trccon_ready)) begin
            litedramcore_sdram_bankmachine3_trccon_count <= (litedramcore_sdram_bankmachine3_trccon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine3_trccon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_bankmachine3_trascon_valid) begin
        litedramcore_sdram_bankmachine3_trascon_count <= 2'd2;
        if (1'd0) begin
            litedramcore_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_bankmachine3_trascon_ready)) begin
            litedramcore_sdram_bankmachine3_trascon_count <= (litedramcore_sdram_bankmachine3_trascon_count - 1'd1);
            if ((litedramcore_sdram_bankmachine3_trascon_count == 1'd1)) begin
                litedramcore_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine3_state <= bankmachine3_next_state;
    if ((~litedramcore_sdram_en0)) begin
        litedramcore_sdram_time0 <= 5'd31;
    end else begin
        if ((~litedramcore_sdram_max_time0)) begin
            litedramcore_sdram_time0 <= (litedramcore_sdram_time0 - 1'd1);
        end
    end
    if ((~litedramcore_sdram_en1)) begin
        litedramcore_sdram_time1 <= 4'd15;
    end else begin
        if ((~litedramcore_sdram_max_time1)) begin
            litedramcore_sdram_time1 <= (litedramcore_sdram_time1 - 1'd1);
        end
    end
    if (litedramcore_sdram_choose_cmd_ce) begin
        case (litedramcore_sdram_choose_cmd_grant)
            1'd0: begin
                if (litedramcore_sdram_choose_cmd_request[1]) begin
                    litedramcore_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (litedramcore_sdram_choose_cmd_request[2]) begin
                        litedramcore_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (litedramcore_sdram_choose_cmd_request[3]) begin
                            litedramcore_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (litedramcore_sdram_choose_cmd_request[2]) begin
                    litedramcore_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (litedramcore_sdram_choose_cmd_request[3]) begin
                        litedramcore_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (litedramcore_sdram_choose_cmd_request[0]) begin
                            litedramcore_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (litedramcore_sdram_choose_cmd_request[3]) begin
                    litedramcore_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (litedramcore_sdram_choose_cmd_request[0]) begin
                        litedramcore_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (litedramcore_sdram_choose_cmd_request[1]) begin
                            litedramcore_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (litedramcore_sdram_choose_cmd_request[0]) begin
                    litedramcore_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (litedramcore_sdram_choose_cmd_request[1]) begin
                        litedramcore_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (litedramcore_sdram_choose_cmd_request[2]) begin
                            litedramcore_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (litedramcore_sdram_choose_req_ce) begin
        case (litedramcore_sdram_choose_req_grant)
            1'd0: begin
                if (litedramcore_sdram_choose_req_request[1]) begin
                    litedramcore_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (litedramcore_sdram_choose_req_request[2]) begin
                        litedramcore_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (litedramcore_sdram_choose_req_request[3]) begin
                            litedramcore_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (litedramcore_sdram_choose_req_request[2]) begin
                    litedramcore_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (litedramcore_sdram_choose_req_request[3]) begin
                        litedramcore_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (litedramcore_sdram_choose_req_request[0]) begin
                            litedramcore_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (litedramcore_sdram_choose_req_request[3]) begin
                    litedramcore_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (litedramcore_sdram_choose_req_request[0]) begin
                        litedramcore_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (litedramcore_sdram_choose_req_request[1]) begin
                            litedramcore_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (litedramcore_sdram_choose_req_request[0]) begin
                    litedramcore_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (litedramcore_sdram_choose_req_request[1]) begin
                        litedramcore_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (litedramcore_sdram_choose_req_request[2]) begin
                            litedramcore_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    litedramcore_sdram_dfi_p0_cs_n <= 1'd0;
    litedramcore_sdram_dfi_p0_bank <= self0;
    litedramcore_sdram_dfi_p0_address <= self1;
    litedramcore_sdram_dfi_p0_cas_n <= (~self2);
    litedramcore_sdram_dfi_p0_ras_n <= (~self3);
    litedramcore_sdram_dfi_p0_we_n <= (~self4);
    litedramcore_sdram_dfi_p0_rddata_en <= self5;
    litedramcore_sdram_dfi_p0_wrdata_en <= self6;
    if (litedramcore_sdram_trrdcon_valid) begin
        litedramcore_sdram_trrdcon_count <= 1'd0;
        if (1'd1) begin
            litedramcore_sdram_trrdcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_trrdcon_ready)) begin
            litedramcore_sdram_trrdcon_count <= (litedramcore_sdram_trrdcon_count - 1'd1);
            if ((litedramcore_sdram_trrdcon_count == 1'd1)) begin
                litedramcore_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_tccdcon_valid) begin
        litedramcore_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            litedramcore_sdram_tccdcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_tccdcon_ready)) begin
            litedramcore_sdram_tccdcon_count <= (litedramcore_sdram_tccdcon_count - 1'd1);
            if ((litedramcore_sdram_tccdcon_count == 1'd1)) begin
                litedramcore_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (litedramcore_sdram_twtrcon_valid) begin
        litedramcore_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            litedramcore_sdram_twtrcon_ready <= 1'd1;
        end else begin
            litedramcore_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~litedramcore_sdram_twtrcon_ready)) begin
            litedramcore_sdram_twtrcon_count <= (litedramcore_sdram_twtrcon_count - 1'd1);
            if ((litedramcore_sdram_twtrcon_count == 1'd1)) begin
                litedramcore_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    multiplexer_state <= multiplexer_next_state;
    new_master_wdata_ready0 <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & litedramcore_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 1'd0) & litedramcore_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 1'd0) & litedramcore_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 1'd0) & litedramcore_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready1 <= ((((1'd0 | ((roundrobin0_grant == 1'd1) & litedramcore_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 1'd1) & litedramcore_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 1'd1) & litedramcore_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 1'd1) & litedramcore_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready2 <= ((((1'd0 | ((roundrobin0_grant == 2'd2) & litedramcore_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 2'd2) & litedramcore_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 2'd2) & litedramcore_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 2'd2) & litedramcore_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready3 <= ((((1'd0 | ((roundrobin0_grant == 2'd3) & litedramcore_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 2'd3) & litedramcore_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 2'd3) & litedramcore_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 2'd3) & litedramcore_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready4 <= ((((1'd0 | ((roundrobin0_grant == 3'd4) & litedramcore_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 3'd4) & litedramcore_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 3'd4) & litedramcore_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 3'd4) & litedramcore_sdram_interface_bank3_wdata_ready));
    new_master_rdata_valid0 <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & litedramcore_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 1'd0) & litedramcore_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 1'd0) & litedramcore_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 1'd0) & litedramcore_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid1 <= new_master_rdata_valid0;
    new_master_rdata_valid2 <= new_master_rdata_valid1;
    new_master_rdata_valid3 <= new_master_rdata_valid2;
    new_master_rdata_valid4 <= ((((1'd0 | ((roundrobin0_grant == 1'd1) & litedramcore_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 1'd1) & litedramcore_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 1'd1) & litedramcore_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 1'd1) & litedramcore_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid5 <= new_master_rdata_valid4;
    new_master_rdata_valid6 <= new_master_rdata_valid5;
    new_master_rdata_valid7 <= new_master_rdata_valid6;
    new_master_rdata_valid8 <= ((((1'd0 | ((roundrobin0_grant == 2'd2) & litedramcore_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 2'd2) & litedramcore_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 2'd2) & litedramcore_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 2'd2) & litedramcore_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid9 <= new_master_rdata_valid8;
    new_master_rdata_valid10 <= new_master_rdata_valid9;
    new_master_rdata_valid11 <= new_master_rdata_valid10;
    new_master_rdata_valid12 <= ((((1'd0 | ((roundrobin0_grant == 2'd3) & litedramcore_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 2'd3) & litedramcore_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 2'd3) & litedramcore_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 2'd3) & litedramcore_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid13 <= new_master_rdata_valid12;
    new_master_rdata_valid14 <= new_master_rdata_valid13;
    new_master_rdata_valid15 <= new_master_rdata_valid14;
    new_master_rdata_valid16 <= ((((1'd0 | ((roundrobin0_grant == 3'd4) & litedramcore_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 3'd4) & litedramcore_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 3'd4) & litedramcore_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 3'd4) & litedramcore_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid17 <= new_master_rdata_valid16;
    new_master_rdata_valid18 <= new_master_rdata_valid17;
    new_master_rdata_valid19 <= new_master_rdata_valid18;
    if (roundrobin0_ce) begin
        case (roundrobin0_grant)
            1'd0: begin
                if (roundrobin0_request[1]) begin
                    roundrobin0_grant <= 1'd1;
                end else begin
                    if (roundrobin0_request[2]) begin
                        roundrobin0_grant <= 2'd2;
                    end else begin
                        if (roundrobin0_request[3]) begin
                            roundrobin0_grant <= 2'd3;
                        end else begin
                            if (roundrobin0_request[4]) begin
                                roundrobin0_grant <= 3'd4;
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin0_request[2]) begin
                    roundrobin0_grant <= 2'd2;
                end else begin
                    if (roundrobin0_request[3]) begin
                        roundrobin0_grant <= 2'd3;
                    end else begin
                        if (roundrobin0_request[4]) begin
                            roundrobin0_grant <= 3'd4;
                        end else begin
                            if (roundrobin0_request[0]) begin
                                roundrobin0_grant <= 1'd0;
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin0_request[3]) begin
                    roundrobin0_grant <= 2'd3;
                end else begin
                    if (roundrobin0_request[4]) begin
                        roundrobin0_grant <= 3'd4;
                    end else begin
                        if (roundrobin0_request[0]) begin
                            roundrobin0_grant <= 1'd0;
                        end else begin
                            if (roundrobin0_request[1]) begin
                                roundrobin0_grant <= 1'd1;
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin0_request[4]) begin
                    roundrobin0_grant <= 3'd4;
                end else begin
                    if (roundrobin0_request[0]) begin
                        roundrobin0_grant <= 1'd0;
                    end else begin
                        if (roundrobin0_request[1]) begin
                            roundrobin0_grant <= 1'd1;
                        end else begin
                            if (roundrobin0_request[2]) begin
                                roundrobin0_grant <= 2'd2;
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (roundrobin0_request[0]) begin
                    roundrobin0_grant <= 1'd0;
                end else begin
                    if (roundrobin0_request[1]) begin
                        roundrobin0_grant <= 1'd1;
                    end else begin
                        if (roundrobin0_request[2]) begin
                            roundrobin0_grant <= 2'd2;
                        end else begin
                            if (roundrobin0_request[3]) begin
                                roundrobin0_grant <= 2'd3;
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin1_ce) begin
        case (roundrobin1_grant)
            1'd0: begin
                if (roundrobin1_request[1]) begin
                    roundrobin1_grant <= 1'd1;
                end else begin
                    if (roundrobin1_request[2]) begin
                        roundrobin1_grant <= 2'd2;
                    end else begin
                        if (roundrobin1_request[3]) begin
                            roundrobin1_grant <= 2'd3;
                        end else begin
                            if (roundrobin1_request[4]) begin
                                roundrobin1_grant <= 3'd4;
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin1_request[2]) begin
                    roundrobin1_grant <= 2'd2;
                end else begin
                    if (roundrobin1_request[3]) begin
                        roundrobin1_grant <= 2'd3;
                    end else begin
                        if (roundrobin1_request[4]) begin
                            roundrobin1_grant <= 3'd4;
                        end else begin
                            if (roundrobin1_request[0]) begin
                                roundrobin1_grant <= 1'd0;
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin1_request[3]) begin
                    roundrobin1_grant <= 2'd3;
                end else begin
                    if (roundrobin1_request[4]) begin
                        roundrobin1_grant <= 3'd4;
                    end else begin
                        if (roundrobin1_request[0]) begin
                            roundrobin1_grant <= 1'd0;
                        end else begin
                            if (roundrobin1_request[1]) begin
                                roundrobin1_grant <= 1'd1;
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin1_request[4]) begin
                    roundrobin1_grant <= 3'd4;
                end else begin
                    if (roundrobin1_request[0]) begin
                        roundrobin1_grant <= 1'd0;
                    end else begin
                        if (roundrobin1_request[1]) begin
                            roundrobin1_grant <= 1'd1;
                        end else begin
                            if (roundrobin1_request[2]) begin
                                roundrobin1_grant <= 2'd2;
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (roundrobin1_request[0]) begin
                    roundrobin1_grant <= 1'd0;
                end else begin
                    if (roundrobin1_request[1]) begin
                        roundrobin1_grant <= 1'd1;
                    end else begin
                        if (roundrobin1_request[2]) begin
                            roundrobin1_grant <= 2'd2;
                        end else begin
                            if (roundrobin1_request[3]) begin
                                roundrobin1_grant <= 2'd3;
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin2_ce) begin
        case (roundrobin2_grant)
            1'd0: begin
                if (roundrobin2_request[1]) begin
                    roundrobin2_grant <= 1'd1;
                end else begin
                    if (roundrobin2_request[2]) begin
                        roundrobin2_grant <= 2'd2;
                    end else begin
                        if (roundrobin2_request[3]) begin
                            roundrobin2_grant <= 2'd3;
                        end else begin
                            if (roundrobin2_request[4]) begin
                                roundrobin2_grant <= 3'd4;
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin2_request[2]) begin
                    roundrobin2_grant <= 2'd2;
                end else begin
                    if (roundrobin2_request[3]) begin
                        roundrobin2_grant <= 2'd3;
                    end else begin
                        if (roundrobin2_request[4]) begin
                            roundrobin2_grant <= 3'd4;
                        end else begin
                            if (roundrobin2_request[0]) begin
                                roundrobin2_grant <= 1'd0;
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin2_request[3]) begin
                    roundrobin2_grant <= 2'd3;
                end else begin
                    if (roundrobin2_request[4]) begin
                        roundrobin2_grant <= 3'd4;
                    end else begin
                        if (roundrobin2_request[0]) begin
                            roundrobin2_grant <= 1'd0;
                        end else begin
                            if (roundrobin2_request[1]) begin
                                roundrobin2_grant <= 1'd1;
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin2_request[4]) begin
                    roundrobin2_grant <= 3'd4;
                end else begin
                    if (roundrobin2_request[0]) begin
                        roundrobin2_grant <= 1'd0;
                    end else begin
                        if (roundrobin2_request[1]) begin
                            roundrobin2_grant <= 1'd1;
                        end else begin
                            if (roundrobin2_request[2]) begin
                                roundrobin2_grant <= 2'd2;
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (roundrobin2_request[0]) begin
                    roundrobin2_grant <= 1'd0;
                end else begin
                    if (roundrobin2_request[1]) begin
                        roundrobin2_grant <= 1'd1;
                    end else begin
                        if (roundrobin2_request[2]) begin
                            roundrobin2_grant <= 2'd2;
                        end else begin
                            if (roundrobin2_request[3]) begin
                                roundrobin2_grant <= 2'd3;
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin3_ce) begin
        case (roundrobin3_grant)
            1'd0: begin
                if (roundrobin3_request[1]) begin
                    roundrobin3_grant <= 1'd1;
                end else begin
                    if (roundrobin3_request[2]) begin
                        roundrobin3_grant <= 2'd2;
                    end else begin
                        if (roundrobin3_request[3]) begin
                            roundrobin3_grant <= 2'd3;
                        end else begin
                            if (roundrobin3_request[4]) begin
                                roundrobin3_grant <= 3'd4;
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin3_request[2]) begin
                    roundrobin3_grant <= 2'd2;
                end else begin
                    if (roundrobin3_request[3]) begin
                        roundrobin3_grant <= 2'd3;
                    end else begin
                        if (roundrobin3_request[4]) begin
                            roundrobin3_grant <= 3'd4;
                        end else begin
                            if (roundrobin3_request[0]) begin
                                roundrobin3_grant <= 1'd0;
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin3_request[3]) begin
                    roundrobin3_grant <= 2'd3;
                end else begin
                    if (roundrobin3_request[4]) begin
                        roundrobin3_grant <= 3'd4;
                    end else begin
                        if (roundrobin3_request[0]) begin
                            roundrobin3_grant <= 1'd0;
                        end else begin
                            if (roundrobin3_request[1]) begin
                                roundrobin3_grant <= 1'd1;
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin3_request[4]) begin
                    roundrobin3_grant <= 3'd4;
                end else begin
                    if (roundrobin3_request[0]) begin
                        roundrobin3_grant <= 1'd0;
                    end else begin
                        if (roundrobin3_request[1]) begin
                            roundrobin3_grant <= 1'd1;
                        end else begin
                            if (roundrobin3_request[2]) begin
                                roundrobin3_grant <= 2'd2;
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (roundrobin3_request[0]) begin
                    roundrobin3_grant <= 1'd0;
                end else begin
                    if (roundrobin3_request[1]) begin
                        roundrobin3_grant <= 1'd1;
                    end else begin
                        if (roundrobin3_request[2]) begin
                            roundrobin3_grant <= 2'd2;
                        end else begin
                            if (roundrobin3_request[3]) begin
                                roundrobin3_grant <= 2'd3;
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (litedramcore_cache_word_clr) begin
        litedramcore_cache <= 1'd0;
    end else begin
        if (litedramcore_cache_word_inc) begin
            litedramcore_cache <= (litedramcore_cache + 1'd1);
        end
    end
    fullmemorywe_state <= fullmemorywe_next_state;
    litedramwishbone2native_state <= litedramwishbone2native_next_state;
    if (litedramcore_aborted_litedramwishbone2native_next_value_ce) begin
        litedramcore_aborted <= litedramcore_aborted_litedramwishbone2native_next_value;
    end
    if (litedramavalonmm2native0_latch) begin
        litedramavalonmm2native0_byteenable <= avalonmminterface0_avalon_port_byteenable;
        litedramavalonmm2native0_writedata <= avalonmminterface0_avalon_port_writedata;
        litedramavalonmm2native0_burst_count <= avalonmminterface0_avalon_port_burstcount;
        litedramavalonmm2native0_address <= (avalonmminterface0_avalon_port_address - litedramavalonmm2native0_address_offset);
    end
    litedramavalonmm2native0_state <= litedramavalonmm2native0_next_state;
    if (litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value_ce0) begin
        litedramavalonmm2native0_cmd_ready_seen <= litedramavalonmm2native0_cmd_ready_seen_litedramavalonmm2native0_next_value0;
    end
    if (litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value_ce1) begin
        litedramavalonmm2native0_cmd_ready_count <= litedramavalonmm2native0_cmd_ready_count_litedramavalonmm2native0_next_value1;
    end
    if (litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value_ce2) begin
        litedramavalonmm2native0_burst_count <= litedramavalonmm2native0_burst_count_litedramavalonmm2native0_next_value2;
    end
    if (litedramavalonmm2native0_address_litedramavalonmm2native0_next_value_ce3) begin
        litedramavalonmm2native0_address <= litedramavalonmm2native0_address_litedramavalonmm2native0_next_value3;
    end
    if (((litedramavalonmm2native0_cmd_fifo_syncfifo0_we & litedramavalonmm2native0_cmd_fifo_syncfifo0_writable) & (~litedramavalonmm2native0_cmd_fifo_replace))) begin
        litedramavalonmm2native0_cmd_fifo_produce <= (litedramavalonmm2native0_cmd_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native0_cmd_fifo_do_read) begin
        litedramavalonmm2native0_cmd_fifo_consume <= (litedramavalonmm2native0_cmd_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native0_cmd_fifo_syncfifo0_we & litedramavalonmm2native0_cmd_fifo_syncfifo0_writable) & (~litedramavalonmm2native0_cmd_fifo_replace))) begin
        if ((~litedramavalonmm2native0_cmd_fifo_do_read)) begin
            litedramavalonmm2native0_cmd_fifo_level <= (litedramavalonmm2native0_cmd_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native0_cmd_fifo_do_read) begin
            litedramavalonmm2native0_cmd_fifo_level <= (litedramavalonmm2native0_cmd_fifo_level - 1'd1);
        end
    end
    if (((litedramavalonmm2native0_wdata_fifo_syncfifo0_we & litedramavalonmm2native0_wdata_fifo_syncfifo0_writable) & (~litedramavalonmm2native0_wdata_fifo_replace))) begin
        litedramavalonmm2native0_wdata_fifo_produce <= (litedramavalonmm2native0_wdata_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native0_wdata_fifo_do_read) begin
        litedramavalonmm2native0_wdata_fifo_consume <= (litedramavalonmm2native0_wdata_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native0_wdata_fifo_syncfifo0_we & litedramavalonmm2native0_wdata_fifo_syncfifo0_writable) & (~litedramavalonmm2native0_wdata_fifo_replace))) begin
        if ((~litedramavalonmm2native0_wdata_fifo_do_read)) begin
            litedramavalonmm2native0_wdata_fifo_level <= (litedramavalonmm2native0_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native0_wdata_fifo_do_read) begin
            litedramavalonmm2native0_wdata_fifo_level <= (litedramavalonmm2native0_wdata_fifo_level - 1'd1);
        end
    end
    if (litedramavalonmm2native1_latch) begin
        litedramavalonmm2native1_byteenable <= avalonmminterface1_avalon_port_byteenable;
        litedramavalonmm2native1_writedata <= avalonmminterface1_avalon_port_writedata;
        litedramavalonmm2native1_burst_count <= avalonmminterface1_avalon_port_burstcount;
        litedramavalonmm2native1_address <= (avalonmminterface1_avalon_port_address - litedramavalonmm2native1_address_offset);
    end
    litedramavalonmm2native1_state <= litedramavalonmm2native1_next_state;
    if (litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value_ce0) begin
        litedramavalonmm2native1_cmd_ready_seen <= litedramavalonmm2native1_cmd_ready_seen_litedramavalonmm2native1_next_value0;
    end
    if (litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value_ce1) begin
        litedramavalonmm2native1_cmd_ready_count <= litedramavalonmm2native1_cmd_ready_count_litedramavalonmm2native1_next_value1;
    end
    if (litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value_ce2) begin
        litedramavalonmm2native1_burst_count <= litedramavalonmm2native1_burst_count_litedramavalonmm2native1_next_value2;
    end
    if (litedramavalonmm2native1_address_litedramavalonmm2native1_next_value_ce3) begin
        litedramavalonmm2native1_address <= litedramavalonmm2native1_address_litedramavalonmm2native1_next_value3;
    end
    if (((litedramavalonmm2native1_cmd_fifo_syncfifo1_we & litedramavalonmm2native1_cmd_fifo_syncfifo1_writable) & (~litedramavalonmm2native1_cmd_fifo_replace))) begin
        litedramavalonmm2native1_cmd_fifo_produce <= (litedramavalonmm2native1_cmd_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native1_cmd_fifo_do_read) begin
        litedramavalonmm2native1_cmd_fifo_consume <= (litedramavalonmm2native1_cmd_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native1_cmd_fifo_syncfifo1_we & litedramavalonmm2native1_cmd_fifo_syncfifo1_writable) & (~litedramavalonmm2native1_cmd_fifo_replace))) begin
        if ((~litedramavalonmm2native1_cmd_fifo_do_read)) begin
            litedramavalonmm2native1_cmd_fifo_level <= (litedramavalonmm2native1_cmd_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native1_cmd_fifo_do_read) begin
            litedramavalonmm2native1_cmd_fifo_level <= (litedramavalonmm2native1_cmd_fifo_level - 1'd1);
        end
    end
    if (((litedramavalonmm2native1_wdata_fifo_syncfifo1_we & litedramavalonmm2native1_wdata_fifo_syncfifo1_writable) & (~litedramavalonmm2native1_wdata_fifo_replace))) begin
        litedramavalonmm2native1_wdata_fifo_produce <= (litedramavalonmm2native1_wdata_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native1_wdata_fifo_do_read) begin
        litedramavalonmm2native1_wdata_fifo_consume <= (litedramavalonmm2native1_wdata_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native1_wdata_fifo_syncfifo1_we & litedramavalonmm2native1_wdata_fifo_syncfifo1_writable) & (~litedramavalonmm2native1_wdata_fifo_replace))) begin
        if ((~litedramavalonmm2native1_wdata_fifo_do_read)) begin
            litedramavalonmm2native1_wdata_fifo_level <= (litedramavalonmm2native1_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native1_wdata_fifo_do_read) begin
            litedramavalonmm2native1_wdata_fifo_level <= (litedramavalonmm2native1_wdata_fifo_level - 1'd1);
        end
    end
    if (litedramavalonmm2native2_latch) begin
        litedramavalonmm2native2_byteenable <= avalonmminterface2_avalon_port_byteenable;
        litedramavalonmm2native2_writedata <= avalonmminterface2_avalon_port_writedata;
        litedramavalonmm2native2_burst_count <= avalonmminterface2_avalon_port_burstcount;
        litedramavalonmm2native2_address <= (avalonmminterface2_avalon_port_address - litedramavalonmm2native2_address_offset);
    end
    litedramavalonmm2native2_state <= litedramavalonmm2native2_next_state;
    if (litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value_ce0) begin
        litedramavalonmm2native2_cmd_ready_seen <= litedramavalonmm2native2_cmd_ready_seen_litedramavalonmm2native2_next_value0;
    end
    if (litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value_ce1) begin
        litedramavalonmm2native2_cmd_ready_count <= litedramavalonmm2native2_cmd_ready_count_litedramavalonmm2native2_next_value1;
    end
    if (litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value_ce2) begin
        litedramavalonmm2native2_burst_count <= litedramavalonmm2native2_burst_count_litedramavalonmm2native2_next_value2;
    end
    if (litedramavalonmm2native2_address_litedramavalonmm2native2_next_value_ce3) begin
        litedramavalonmm2native2_address <= litedramavalonmm2native2_address_litedramavalonmm2native2_next_value3;
    end
    if (((litedramavalonmm2native2_cmd_fifo_syncfifo2_we & litedramavalonmm2native2_cmd_fifo_syncfifo2_writable) & (~litedramavalonmm2native2_cmd_fifo_replace))) begin
        litedramavalonmm2native2_cmd_fifo_produce <= (litedramavalonmm2native2_cmd_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native2_cmd_fifo_do_read) begin
        litedramavalonmm2native2_cmd_fifo_consume <= (litedramavalonmm2native2_cmd_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native2_cmd_fifo_syncfifo2_we & litedramavalonmm2native2_cmd_fifo_syncfifo2_writable) & (~litedramavalonmm2native2_cmd_fifo_replace))) begin
        if ((~litedramavalonmm2native2_cmd_fifo_do_read)) begin
            litedramavalonmm2native2_cmd_fifo_level <= (litedramavalonmm2native2_cmd_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native2_cmd_fifo_do_read) begin
            litedramavalonmm2native2_cmd_fifo_level <= (litedramavalonmm2native2_cmd_fifo_level - 1'd1);
        end
    end
    if (((litedramavalonmm2native2_wdata_fifo_syncfifo2_we & litedramavalonmm2native2_wdata_fifo_syncfifo2_writable) & (~litedramavalonmm2native2_wdata_fifo_replace))) begin
        litedramavalonmm2native2_wdata_fifo_produce <= (litedramavalonmm2native2_wdata_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native2_wdata_fifo_do_read) begin
        litedramavalonmm2native2_wdata_fifo_consume <= (litedramavalonmm2native2_wdata_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native2_wdata_fifo_syncfifo2_we & litedramavalonmm2native2_wdata_fifo_syncfifo2_writable) & (~litedramavalonmm2native2_wdata_fifo_replace))) begin
        if ((~litedramavalonmm2native2_wdata_fifo_do_read)) begin
            litedramavalonmm2native2_wdata_fifo_level <= (litedramavalonmm2native2_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native2_wdata_fifo_do_read) begin
            litedramavalonmm2native2_wdata_fifo_level <= (litedramavalonmm2native2_wdata_fifo_level - 1'd1);
        end
    end
    if (litedramavalonmm2native3_latch) begin
        litedramavalonmm2native3_byteenable <= avalonmminterface3_avalon_port_byteenable;
        litedramavalonmm2native3_writedata <= avalonmminterface3_avalon_port_writedata;
        litedramavalonmm2native3_burst_count <= avalonmminterface3_avalon_port_burstcount;
        litedramavalonmm2native3_address <= (avalonmminterface3_avalon_port_address - litedramavalonmm2native3_address_offset);
    end
    litedramavalonmm2native3_state <= litedramavalonmm2native3_next_state;
    if (litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value_ce0) begin
        litedramavalonmm2native3_cmd_ready_seen <= litedramavalonmm2native3_cmd_ready_seen_litedramavalonmm2native3_next_value0;
    end
    if (litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value_ce1) begin
        litedramavalonmm2native3_cmd_ready_count <= litedramavalonmm2native3_cmd_ready_count_litedramavalonmm2native3_next_value1;
    end
    if (litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value_ce2) begin
        litedramavalonmm2native3_burst_count <= litedramavalonmm2native3_burst_count_litedramavalonmm2native3_next_value2;
    end
    if (litedramavalonmm2native3_address_litedramavalonmm2native3_next_value_ce3) begin
        litedramavalonmm2native3_address <= litedramavalonmm2native3_address_litedramavalonmm2native3_next_value3;
    end
    if (((litedramavalonmm2native3_cmd_fifo_syncfifo3_we & litedramavalonmm2native3_cmd_fifo_syncfifo3_writable) & (~litedramavalonmm2native3_cmd_fifo_replace))) begin
        litedramavalonmm2native3_cmd_fifo_produce <= (litedramavalonmm2native3_cmd_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native3_cmd_fifo_do_read) begin
        litedramavalonmm2native3_cmd_fifo_consume <= (litedramavalonmm2native3_cmd_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native3_cmd_fifo_syncfifo3_we & litedramavalonmm2native3_cmd_fifo_syncfifo3_writable) & (~litedramavalonmm2native3_cmd_fifo_replace))) begin
        if ((~litedramavalonmm2native3_cmd_fifo_do_read)) begin
            litedramavalonmm2native3_cmd_fifo_level <= (litedramavalonmm2native3_cmd_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native3_cmd_fifo_do_read) begin
            litedramavalonmm2native3_cmd_fifo_level <= (litedramavalonmm2native3_cmd_fifo_level - 1'd1);
        end
    end
    if (((litedramavalonmm2native3_wdata_fifo_syncfifo3_we & litedramavalonmm2native3_wdata_fifo_syncfifo3_writable) & (~litedramavalonmm2native3_wdata_fifo_replace))) begin
        litedramavalonmm2native3_wdata_fifo_produce <= (litedramavalonmm2native3_wdata_fifo_produce + 1'd1);
    end
    if (litedramavalonmm2native3_wdata_fifo_do_read) begin
        litedramavalonmm2native3_wdata_fifo_consume <= (litedramavalonmm2native3_wdata_fifo_consume + 1'd1);
    end
    if (((litedramavalonmm2native3_wdata_fifo_syncfifo3_we & litedramavalonmm2native3_wdata_fifo_syncfifo3_writable) & (~litedramavalonmm2native3_wdata_fifo_replace))) begin
        if ((~litedramavalonmm2native3_wdata_fifo_do_read)) begin
            litedramavalonmm2native3_wdata_fifo_level <= (litedramavalonmm2native3_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramavalonmm2native3_wdata_fifo_do_read) begin
            litedramavalonmm2native3_wdata_fifo_level <= (litedramavalonmm2native3_wdata_fifo_level - 1'd1);
        end
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    if (interface1_dat_w_wishbone2csr_next_value_ce0) begin
        interface1_dat_w <= interface1_dat_w_wishbone2csr_next_value0;
    end
    if (interface1_adr_wishbone2csr_next_value_ce1) begin
        interface1_adr <= interface1_adr_wishbone2csr_next_value1;
    end
    if (interface1_we_wishbone2csr_next_value_ce2) begin
        interface1_we <= interface1_we_wishbone2csr_next_value2;
    end
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        litedramcore_reset_storage[1:0] <= csrbank0_reset0_r;
    end
    litedramcore_reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        litedramcore_scratch_storage[31:0] <= csrbank0_scratch0_r;
    end
    litedramcore_scratch_re <= csrbank0_scratch0_re;
    litedramcore_bus_errors_re <= csrbank0_bus_errors_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_init_done0_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_init_error0_w;
            end
        endcase
    end
    if (csrbank1_init_done0_re) begin
        init_done_storage <= csrbank1_init_done0_r;
    end
    init_done_re <= csrbank1_init_done0_re;
    if (csrbank1_init_error0_re) begin
        init_error_storage <= csrbank1_init_error0_r;
    end
    init_error_re <= csrbank1_init_error0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_control0_w;
            end
            1'd1: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_command0_w;
            end
            2'd2: begin
                interface2_bank_bus_dat_r <= litedramcore_sdram_command_issue_w;
            end
            2'd3: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_address0_w;
            end
            3'd4: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_rddata_w;
            end
        endcase
    end
    if (csrbank2_dfii_control0_re) begin
        litedramcore_sdram_storage[3:0] <= csrbank2_dfii_control0_r;
    end
    litedramcore_sdram_re <= csrbank2_dfii_control0_re;
    if (csrbank2_dfii_pi0_command0_re) begin
        litedramcore_sdram_command_storage[7:0] <= csrbank2_dfii_pi0_command0_r;
    end
    litedramcore_sdram_command_re <= csrbank2_dfii_pi0_command0_re;
    if (csrbank2_dfii_pi0_address0_re) begin
        litedramcore_sdram_address_storage[12:0] <= csrbank2_dfii_pi0_address0_r;
    end
    litedramcore_sdram_address_re <= csrbank2_dfii_pi0_address0_re;
    if (csrbank2_dfii_pi0_baddress0_re) begin
        litedramcore_sdram_baddress_storage[1:0] <= csrbank2_dfii_pi0_baddress0_r;
    end
    litedramcore_sdram_baddress_re <= csrbank2_dfii_pi0_baddress0_re;
    if (csrbank2_dfii_pi0_wrdata0_re) begin
        litedramcore_sdram_wrdata_storage[15:0] <= csrbank2_dfii_pi0_wrdata0_r;
    end
    litedramcore_sdram_wrdata_re <= csrbank2_dfii_pi0_wrdata0_re;
    litedramcore_sdram_rddata_re <= csrbank2_dfii_pi0_rddata_re;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_load0_w;
            end
            1'd1: begin
                interface3_bank_bus_dat_r <= csrbank3_reload0_w;
            end
            2'd2: begin
                interface3_bank_bus_dat_r <= csrbank3_en0_w;
            end
            2'd3: begin
                interface3_bank_bus_dat_r <= csrbank3_update_value0_w;
            end
            3'd4: begin
                interface3_bank_bus_dat_r <= csrbank3_value_w;
            end
            3'd5: begin
                interface3_bank_bus_dat_r <= csrbank3_ev_status_w;
            end
            3'd6: begin
                interface3_bank_bus_dat_r <= csrbank3_ev_pending_w;
            end
            3'd7: begin
                interface3_bank_bus_dat_r <= csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (csrbank3_load0_re) begin
        litedramcore_load_storage[31:0] <= csrbank3_load0_r;
    end
    litedramcore_load_re <= csrbank3_load0_re;
    if (csrbank3_reload0_re) begin
        litedramcore_reload_storage[31:0] <= csrbank3_reload0_r;
    end
    litedramcore_reload_re <= csrbank3_reload0_re;
    if (csrbank3_en0_re) begin
        litedramcore_en_storage <= csrbank3_en0_r;
    end
    litedramcore_en_re <= csrbank3_en0_re;
    if (csrbank3_update_value0_re) begin
        litedramcore_update_value_storage <= csrbank3_update_value0_r;
    end
    litedramcore_update_value_re <= csrbank3_update_value0_re;
    litedramcore_value_re <= csrbank3_value_re;
    litedramcore_status_re <= csrbank3_ev_status_re;
    if (csrbank3_ev_pending_re) begin
        litedramcore_pending_r <= csrbank3_ev_pending_r;
    end
    litedramcore_pending_re <= csrbank3_ev_pending_re;
    if (csrbank3_ev_enable0_re) begin
        litedramcore_enable_storage <= csrbank3_ev_enable0_r;
    end
    litedramcore_enable_re <= csrbank3_ev_enable0_re;
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                interface4_bank_bus_dat_r <= csrbank4_txfull_w;
            end
            2'd2: begin
                interface4_bank_bus_dat_r <= csrbank4_rxempty_w;
            end
            2'd3: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_status_w;
            end
            3'd4: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_pending_w;
            end
            3'd5: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_enable0_w;
            end
            3'd6: begin
                interface4_bank_bus_dat_r <= csrbank4_txempty_w;
            end
            3'd7: begin
                interface4_bank_bus_dat_r <= csrbank4_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csrbank4_txfull_re;
    uart_rxempty_re <= csrbank4_rxempty_re;
    uart_status_re <= csrbank4_ev_status_re;
    if (csrbank4_ev_pending_re) begin
        uart_pending_r[1:0] <= csrbank4_ev_pending_r;
    end
    uart_pending_re <= csrbank4_ev_pending_re;
    if (csrbank4_ev_enable0_re) begin
        uart_enable_storage[1:0] <= csrbank4_ev_enable0_r;
    end
    uart_enable_re <= csrbank4_ev_enable0_re;
    uart_txempty_re <= csrbank4_txempty_re;
    uart_rxfull_re <= csrbank4_rxfull_re;
    if (sys_rst) begin
        litedramcore_reset_storage <= 2'd0;
        litedramcore_reset_re <= 1'd0;
        litedramcore_scratch_storage <= 32'd305419896;
        litedramcore_scratch_re <= 1'd0;
        litedramcore_bus_errors_re <= 1'd0;
        litedramcore_bus_errors <= 32'd0;
        litedramcore_litedramcore_ram_bus_ack <= 1'd0;
        litedramcore_ram_bus_ram_bus_ack <= 1'd0;
        litedramcore_load_storage <= 32'd0;
        litedramcore_load_re <= 1'd0;
        litedramcore_reload_storage <= 32'd0;
        litedramcore_reload_re <= 1'd0;
        litedramcore_en_storage <= 1'd0;
        litedramcore_en_re <= 1'd0;
        litedramcore_update_value_storage <= 1'd0;
        litedramcore_update_value_re <= 1'd0;
        litedramcore_value_status <= 32'd0;
        litedramcore_value_re <= 1'd0;
        litedramcore_zero_pending <= 1'd0;
        litedramcore_zero_trigger_d <= 1'd0;
        litedramcore_status_re <= 1'd0;
        litedramcore_pending_re <= 1'd0;
        litedramcore_pending_r <= 1'd0;
        litedramcore_enable_storage <= 1'd0;
        litedramcore_enable_re <= 1'd0;
        litedramcore_value <= 32'd0;
        uart_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        dfi_p0_rddata_valid <= 1'd0;
        rddata_en <= 3'd0;
        litedramcore_sdram_storage <= 4'd1;
        litedramcore_sdram_re <= 1'd0;
        litedramcore_sdram_command_storage <= 8'd0;
        litedramcore_sdram_command_re <= 1'd0;
        litedramcore_sdram_address_re <= 1'd0;
        litedramcore_sdram_baddress_re <= 1'd0;
        litedramcore_sdram_wrdata_re <= 1'd0;
        litedramcore_sdram_rddata_status <= 16'd0;
        litedramcore_sdram_rddata_re <= 1'd0;
        litedramcore_sdram_dfi_p0_address <= 13'd0;
        litedramcore_sdram_dfi_p0_bank <= 2'd0;
        litedramcore_sdram_dfi_p0_cas_n <= 1'd1;
        litedramcore_sdram_dfi_p0_cs_n <= 1'd1;
        litedramcore_sdram_dfi_p0_ras_n <= 1'd1;
        litedramcore_sdram_dfi_p0_we_n <= 1'd1;
        litedramcore_sdram_dfi_p0_wrdata_en <= 1'd0;
        litedramcore_sdram_dfi_p0_rddata_en <= 1'd0;
        litedramcore_sdram_cmd_payload_a <= 13'd0;
        litedramcore_sdram_cmd_payload_ba <= 2'd0;
        litedramcore_sdram_cmd_payload_cas <= 1'd0;
        litedramcore_sdram_cmd_payload_ras <= 1'd0;
        litedramcore_sdram_cmd_payload_we <= 1'd0;
        litedramcore_sdram_timer_count1 <= 9'd390;
        litedramcore_sdram_postponer_req_o <= 1'd0;
        litedramcore_sdram_postponer_count <= 1'd0;
        litedramcore_sdram_sequencer_done1 <= 1'd0;
        litedramcore_sdram_sequencer_trigger <= 3'd0;
        litedramcore_sdram_sequencer_count <= 1'd0;
        litedramcore_sdram_bankmachine0_level <= 5'd0;
        litedramcore_sdram_bankmachine0_produce <= 4'd0;
        litedramcore_sdram_bankmachine0_consume <= 4'd0;
        litedramcore_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        litedramcore_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        litedramcore_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
        litedramcore_sdram_bankmachine0_row <= 13'd0;
        litedramcore_sdram_bankmachine0_row_opened <= 1'd0;
        litedramcore_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        litedramcore_sdram_bankmachine0_twtpcon_count <= 2'd0;
        litedramcore_sdram_bankmachine0_trccon_ready <= 1'd0;
        litedramcore_sdram_bankmachine0_trccon_count <= 2'd0;
        litedramcore_sdram_bankmachine0_trascon_ready <= 1'd0;
        litedramcore_sdram_bankmachine0_trascon_count <= 2'd0;
        litedramcore_sdram_bankmachine1_level <= 5'd0;
        litedramcore_sdram_bankmachine1_produce <= 4'd0;
        litedramcore_sdram_bankmachine1_consume <= 4'd0;
        litedramcore_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        litedramcore_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        litedramcore_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
        litedramcore_sdram_bankmachine1_row <= 13'd0;
        litedramcore_sdram_bankmachine1_row_opened <= 1'd0;
        litedramcore_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        litedramcore_sdram_bankmachine1_twtpcon_count <= 2'd0;
        litedramcore_sdram_bankmachine1_trccon_ready <= 1'd0;
        litedramcore_sdram_bankmachine1_trccon_count <= 2'd0;
        litedramcore_sdram_bankmachine1_trascon_ready <= 1'd0;
        litedramcore_sdram_bankmachine1_trascon_count <= 2'd0;
        litedramcore_sdram_bankmachine2_level <= 5'd0;
        litedramcore_sdram_bankmachine2_produce <= 4'd0;
        litedramcore_sdram_bankmachine2_consume <= 4'd0;
        litedramcore_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        litedramcore_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        litedramcore_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
        litedramcore_sdram_bankmachine2_row <= 13'd0;
        litedramcore_sdram_bankmachine2_row_opened <= 1'd0;
        litedramcore_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        litedramcore_sdram_bankmachine2_twtpcon_count <= 2'd0;
        litedramcore_sdram_bankmachine2_trccon_ready <= 1'd0;
        litedramcore_sdram_bankmachine2_trccon_count <= 2'd0;
        litedramcore_sdram_bankmachine2_trascon_ready <= 1'd0;
        litedramcore_sdram_bankmachine2_trascon_count <= 2'd0;
        litedramcore_sdram_bankmachine3_level <= 5'd0;
        litedramcore_sdram_bankmachine3_produce <= 4'd0;
        litedramcore_sdram_bankmachine3_consume <= 4'd0;
        litedramcore_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        litedramcore_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        litedramcore_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
        litedramcore_sdram_bankmachine3_row <= 13'd0;
        litedramcore_sdram_bankmachine3_row_opened <= 1'd0;
        litedramcore_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        litedramcore_sdram_bankmachine3_twtpcon_count <= 2'd0;
        litedramcore_sdram_bankmachine3_trccon_ready <= 1'd0;
        litedramcore_sdram_bankmachine3_trccon_count <= 2'd0;
        litedramcore_sdram_bankmachine3_trascon_ready <= 1'd0;
        litedramcore_sdram_bankmachine3_trascon_count <= 2'd0;
        litedramcore_sdram_choose_cmd_grant <= 2'd0;
        litedramcore_sdram_choose_req_grant <= 2'd0;
        litedramcore_sdram_trrdcon_ready <= 1'd0;
        litedramcore_sdram_trrdcon_count <= 1'd0;
        litedramcore_sdram_tccdcon_ready <= 1'd0;
        litedramcore_sdram_tccdcon_count <= 1'd0;
        litedramcore_sdram_twtrcon_ready <= 1'd0;
        litedramcore_sdram_twtrcon_count <= 3'd0;
        litedramcore_sdram_time0 <= 5'd0;
        litedramcore_sdram_time1 <= 4'd0;
        litedramcore_cache <= 1'd0;
        litedramcore_aborted <= 1'd0;
        init_done_storage <= 1'd0;
        init_done_re <= 1'd0;
        init_error_storage <= 1'd0;
        init_error_re <= 1'd0;
        user_enable0 <= 1'd0;
        litedramavalonmm2native0_burst_count <= 9'd0;
        litedramavalonmm2native0_address <= 24'd0;
        litedramavalonmm2native0_byteenable <= 2'd0;
        litedramavalonmm2native0_writedata <= 16'd0;
        litedramavalonmm2native0_cmd_ready_seen <= 1'd0;
        litedramavalonmm2native0_cmd_ready_count <= 9'd0;
        litedramavalonmm2native0_cmd_fifo_level <= 5'd0;
        litedramavalonmm2native0_cmd_fifo_produce <= 4'd0;
        litedramavalonmm2native0_cmd_fifo_consume <= 4'd0;
        litedramavalonmm2native0_wdata_fifo_level <= 5'd0;
        litedramavalonmm2native0_wdata_fifo_produce <= 4'd0;
        litedramavalonmm2native0_wdata_fifo_consume <= 4'd0;
        user_enable1 <= 1'd0;
        litedramavalonmm2native1_burst_count <= 9'd0;
        litedramavalonmm2native1_address <= 24'd0;
        litedramavalonmm2native1_byteenable <= 2'd0;
        litedramavalonmm2native1_writedata <= 16'd0;
        litedramavalonmm2native1_cmd_ready_seen <= 1'd0;
        litedramavalonmm2native1_cmd_ready_count <= 9'd0;
        litedramavalonmm2native1_cmd_fifo_level <= 5'd0;
        litedramavalonmm2native1_cmd_fifo_produce <= 4'd0;
        litedramavalonmm2native1_cmd_fifo_consume <= 4'd0;
        litedramavalonmm2native1_wdata_fifo_level <= 5'd0;
        litedramavalonmm2native1_wdata_fifo_produce <= 4'd0;
        litedramavalonmm2native1_wdata_fifo_consume <= 4'd0;
        user_enable2 <= 1'd0;
        litedramavalonmm2native2_burst_count <= 9'd0;
        litedramavalonmm2native2_address <= 24'd0;
        litedramavalonmm2native2_byteenable <= 2'd0;
        litedramavalonmm2native2_writedata <= 16'd0;
        litedramavalonmm2native2_cmd_ready_seen <= 1'd0;
        litedramavalonmm2native2_cmd_ready_count <= 9'd0;
        litedramavalonmm2native2_cmd_fifo_level <= 5'd0;
        litedramavalonmm2native2_cmd_fifo_produce <= 4'd0;
        litedramavalonmm2native2_cmd_fifo_consume <= 4'd0;
        litedramavalonmm2native2_wdata_fifo_level <= 5'd0;
        litedramavalonmm2native2_wdata_fifo_produce <= 4'd0;
        litedramavalonmm2native2_wdata_fifo_consume <= 4'd0;
        user_enable3 <= 1'd0;
        litedramavalonmm2native3_burst_count <= 9'd0;
        litedramavalonmm2native3_address <= 24'd0;
        litedramavalonmm2native3_byteenable <= 2'd0;
        litedramavalonmm2native3_writedata <= 16'd0;
        litedramavalonmm2native3_cmd_ready_seen <= 1'd0;
        litedramavalonmm2native3_cmd_ready_count <= 9'd0;
        litedramavalonmm2native3_cmd_fifo_level <= 5'd0;
        litedramavalonmm2native3_cmd_fifo_produce <= 4'd0;
        litedramavalonmm2native3_cmd_fifo_consume <= 4'd0;
        litedramavalonmm2native3_wdata_fifo_level <= 5'd0;
        litedramavalonmm2native3_wdata_fifo_produce <= 4'd0;
        litedramavalonmm2native3_wdata_fifo_consume <= 4'd0;
        interface1_we <= 1'd0;
        grant <= 1'd0;
        slaves <= 4'd0;
        count <= 20'd1000000;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        refresher_state <= 2'd0;
        bankmachine0_state <= 3'd0;
        bankmachine1_state <= 3'd0;
        bankmachine2_state <= 3'd0;
        bankmachine3_state <= 3'd0;
        multiplexer_state <= 3'd0;
        roundrobin0_grant <= 3'd0;
        roundrobin1_grant <= 3'd0;
        roundrobin2_grant <= 3'd0;
        roundrobin3_grant <= 3'd0;
        new_master_wdata_ready0 <= 1'd0;
        new_master_wdata_ready1 <= 1'd0;
        new_master_wdata_ready2 <= 1'd0;
        new_master_wdata_ready3 <= 1'd0;
        new_master_wdata_ready4 <= 1'd0;
        new_master_rdata_valid0 <= 1'd0;
        new_master_rdata_valid1 <= 1'd0;
        new_master_rdata_valid2 <= 1'd0;
        new_master_rdata_valid3 <= 1'd0;
        new_master_rdata_valid4 <= 1'd0;
        new_master_rdata_valid5 <= 1'd0;
        new_master_rdata_valid6 <= 1'd0;
        new_master_rdata_valid7 <= 1'd0;
        new_master_rdata_valid8 <= 1'd0;
        new_master_rdata_valid9 <= 1'd0;
        new_master_rdata_valid10 <= 1'd0;
        new_master_rdata_valid11 <= 1'd0;
        new_master_rdata_valid12 <= 1'd0;
        new_master_rdata_valid13 <= 1'd0;
        new_master_rdata_valid14 <= 1'd0;
        new_master_rdata_valid15 <= 1'd0;
        new_master_rdata_valid16 <= 1'd0;
        new_master_rdata_valid17 <= 1'd0;
        new_master_rdata_valid18 <= 1'd0;
        new_master_rdata_valid19 <= 1'd0;
        fullmemorywe_state <= 2'd0;
        litedramwishbone2native_state <= 2'd0;
        litedramavalonmm2native0_state <= 3'd0;
        litedramavalonmm2native1_state <= 3'd0;
        litedramavalonmm2native2_state <= 3'd0;
        litedramavalonmm2native3_state <= 3'd0;
        wishbone2csr_state <= 2'd0;
    end
    regs0 <= uart_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6328-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6327];
initial begin
	$readmemh("sdram_controller_impl_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[litedramcore_litedramcore_adr];
end
assign litedramcore_litedramcore_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sdram_controller_impl_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_ram_we[0])
		sram[litedramcore_ram_adr][7:0] <= litedramcore_ram_dat_w[7:0];
	if (litedramcore_ram_we[1])
		sram[litedramcore_ram_adr][15:8] <= litedramcore_ram_dat_w[15:8];
	if (litedramcore_ram_we[2])
		sram[litedramcore_ram_adr][23:16] <= litedramcore_ram_dat_w[23:16];
	if (litedramcore_ram_we[3])
		sram[litedramcore_ram_adr][31:24] <= litedramcore_ram_dat_w[31:24];
	sram_adr0 <= litedramcore_ram_adr;
end
assign litedramcore_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:15];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (litedramcore_sdram_bankmachine0_wrport_we)
		storage_2[litedramcore_sdram_bankmachine0_wrport_adr] <= litedramcore_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[litedramcore_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramcore_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign litedramcore_sdram_bankmachine0_rdport_dat_r = storage_2[litedramcore_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:15];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (litedramcore_sdram_bankmachine1_wrport_we)
		storage_3[litedramcore_sdram_bankmachine1_wrport_adr] <= litedramcore_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[litedramcore_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramcore_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign litedramcore_sdram_bankmachine1_rdport_dat_r = storage_3[litedramcore_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_4[0:15];
reg [24:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (litedramcore_sdram_bankmachine2_wrport_we)
		storage_4[litedramcore_sdram_bankmachine2_wrport_adr] <= litedramcore_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[litedramcore_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramcore_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign litedramcore_sdram_bankmachine2_rdport_dat_r = storage_4[litedramcore_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 16-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_5[0:15];
reg [24:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (litedramcore_sdram_bankmachine3_wrport_we)
		storage_5[litedramcore_sdram_bankmachine3_wrport_adr] <= litedramcore_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[litedramcore_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramcore_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign litedramcore_sdram_bankmachine3_rdport_dat_r = storage_5[litedramcore_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 2-words x 31-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 31 
reg [30:0] tag_mem[0:1];
reg [0:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_cache_tag_port_we)
		tag_mem[litedramcore_cache_tag_port_adr] <= litedramcore_cache_tag_port_dat_w;
	tag_mem_adr0 <= litedramcore_cache_tag_port_adr;
end
assign litedramcore_cache_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_6: 16-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_6[0:15];
reg [25:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native0_cmd_fifo_wrport_we)
		storage_6[litedramavalonmm2native0_cmd_fifo_wrport_adr] <= litedramavalonmm2native0_cmd_fifo_wrport_dat_w;
	storage_6_dat0 <= storage_6[litedramavalonmm2native0_cmd_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native0_cmd_fifo_wrport_dat_r = storage_6_dat0;
assign litedramavalonmm2native0_cmd_fifo_rdport_dat_r = storage_6[litedramavalonmm2native0_cmd_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_7: 16-words x 20-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 20 
// Port 1 | Read: Async | Write: ---- | 
reg [19:0] storage_7[0:15];
reg [19:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native0_wdata_fifo_wrport_we)
		storage_7[litedramavalonmm2native0_wdata_fifo_wrport_adr] <= litedramavalonmm2native0_wdata_fifo_wrport_dat_w;
	storage_7_dat0 <= storage_7[litedramavalonmm2native0_wdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native0_wdata_fifo_wrport_dat_r = storage_7_dat0;
assign litedramavalonmm2native0_wdata_fifo_rdport_dat_r = storage_7[litedramavalonmm2native0_wdata_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 16-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_8[0:15];
reg [25:0] storage_8_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native1_cmd_fifo_wrport_we)
		storage_8[litedramavalonmm2native1_cmd_fifo_wrport_adr] <= litedramavalonmm2native1_cmd_fifo_wrport_dat_w;
	storage_8_dat0 <= storage_8[litedramavalonmm2native1_cmd_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native1_cmd_fifo_wrport_dat_r = storage_8_dat0;
assign litedramavalonmm2native1_cmd_fifo_rdport_dat_r = storage_8[litedramavalonmm2native1_cmd_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_9: 16-words x 20-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 20 
// Port 1 | Read: Async | Write: ---- | 
reg [19:0] storage_9[0:15];
reg [19:0] storage_9_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native1_wdata_fifo_wrport_we)
		storage_9[litedramavalonmm2native1_wdata_fifo_wrport_adr] <= litedramavalonmm2native1_wdata_fifo_wrport_dat_w;
	storage_9_dat0 <= storage_9[litedramavalonmm2native1_wdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native1_wdata_fifo_wrport_dat_r = storage_9_dat0;
assign litedramavalonmm2native1_wdata_fifo_rdport_dat_r = storage_9[litedramavalonmm2native1_wdata_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_10: 16-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_10[0:15];
reg [25:0] storage_10_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native2_cmd_fifo_wrport_we)
		storage_10[litedramavalonmm2native2_cmd_fifo_wrport_adr] <= litedramavalonmm2native2_cmd_fifo_wrport_dat_w;
	storage_10_dat0 <= storage_10[litedramavalonmm2native2_cmd_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native2_cmd_fifo_wrport_dat_r = storage_10_dat0;
assign litedramavalonmm2native2_cmd_fifo_rdport_dat_r = storage_10[litedramavalonmm2native2_cmd_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_11: 16-words x 20-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 20 
// Port 1 | Read: Async | Write: ---- | 
reg [19:0] storage_11[0:15];
reg [19:0] storage_11_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native2_wdata_fifo_wrport_we)
		storage_11[litedramavalonmm2native2_wdata_fifo_wrport_adr] <= litedramavalonmm2native2_wdata_fifo_wrport_dat_w;
	storage_11_dat0 <= storage_11[litedramavalonmm2native2_wdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native2_wdata_fifo_wrport_dat_r = storage_11_dat0;
assign litedramavalonmm2native2_wdata_fifo_rdport_dat_r = storage_11[litedramavalonmm2native2_wdata_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_12: 16-words x 26-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 26 
// Port 1 | Read: Async | Write: ---- | 
reg [25:0] storage_12[0:15];
reg [25:0] storage_12_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native3_cmd_fifo_wrport_we)
		storage_12[litedramavalonmm2native3_cmd_fifo_wrport_adr] <= litedramavalonmm2native3_cmd_fifo_wrport_dat_w;
	storage_12_dat0 <= storage_12[litedramavalonmm2native3_cmd_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native3_cmd_fifo_wrport_dat_r = storage_12_dat0;
assign litedramavalonmm2native3_cmd_fifo_rdport_dat_r = storage_12[litedramavalonmm2native3_cmd_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_13: 16-words x 20-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 20 
// Port 1 | Read: Async | Write: ---- | 
reg [19:0] storage_13[0:15];
reg [19:0] storage_13_dat0;
always @(posedge sys_clk) begin
	if (litedramavalonmm2native3_wdata_fifo_wrport_we)
		storage_13[litedramavalonmm2native3_wdata_fifo_wrport_adr] <= litedramavalonmm2native3_wdata_fifo_wrport_dat_w;
	storage_13_dat0 <= storage_13[litedramavalonmm2native3_wdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramavalonmm2native3_wdata_fifo_wrport_dat_r = storage_13_dat0;
assign litedramavalonmm2native3_wdata_fifo_rdport_dat_r = storage_13[litedramavalonmm2native3_wdata_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (litedramcore_dbus_ack),
	.dBusWishbone_DAT_MISO  (litedramcore_dbus_dat_r),
	.dBusWishbone_ERR       (litedramcore_dbus_err),
	.externalInterruptArray (litedramcore_interrupt),
	.externalResetVector    (litedramcore_vexriscv),
	.iBusWishbone_ACK       (litedramcore_ibus_ack),
	.iBusWishbone_DAT_MISO  (litedramcore_ibus_dat_r),
	.iBusWishbone_ERR       (litedramcore_ibus_err),
	.reset                  ((sys_rst | litedramcore_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (litedramcore_dbus_adr),
	.dBusWishbone_BTE       (litedramcore_dbus_bte),
	.dBusWishbone_CTI       (litedramcore_dbus_cti),
	.dBusWishbone_CYC       (litedramcore_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (litedramcore_dbus_dat_w),
	.dBusWishbone_SEL       (litedramcore_dbus_sel),
	.dBusWishbone_STB       (litedramcore_dbus_stb),
	.dBusWishbone_WE        (litedramcore_dbus_we),
	.iBusWishbone_ADR       (litedramcore_ibus_adr),
	.iBusWishbone_BTE       (litedramcore_ibus_bte),
	.iBusWishbone_CTI       (litedramcore_ibus_cti),
	.iBusWishbone_CYC       (litedramcore_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (litedramcore_ibus_dat_w),
	.iBusWishbone_SEL       (litedramcore_ibus_sel),
	.iBusWishbone_STB       (litedramcore_ibus_stb),
	.iBusWishbone_WE        (litedramcore_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:1];
reg [0:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_cache_data_port_we[0])
		data_mem_grain0[litedramcore_cache_data_port_adr] <= litedramcore_cache_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= litedramcore_cache_data_port_adr;
end
assign litedramcore_cache_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:1];
reg [0:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_cache_data_port_we[1])
		data_mem_grain1[litedramcore_cache_data_port_adr] <= litedramcore_cache_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= litedramcore_cache_data_port_adr;
end
assign litedramcore_cache_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:1];
reg [0:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_cache_data_port_we[2])
		data_mem_grain2[litedramcore_cache_data_port_adr] <= litedramcore_cache_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= litedramcore_cache_data_port_adr;
end
assign litedramcore_cache_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 2-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:1];
reg [0:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (litedramcore_cache_data_port_we[3])
		data_mem_grain3[litedramcore_cache_data_port_adr] <= litedramcore_cache_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= litedramcore_cache_data_port_adr;
end
assign litedramcore_cache_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Instance FD1S3BX of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX(
	// Inputs.
	.CK (sys_clk),
	.D  (1'd0),
	.PD (rst),

	// Outputs.
	.Q  (rst1)
);

//------------------------------------------------------------------------------
// Instance FD1S3BX_1 of FD1S3BX Module.
//------------------------------------------------------------------------------
FD1S3BX FD1S3BX_1(
	// Inputs.
	.CK (sys_clk),
	.D  (rst1),
	.PD (rst),

	// Outputs.
	.Q  (sys_rst)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX(
	// Inputs.
	.D    (dfi_p0_cs_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_cs_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_1 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_1(
	// Inputs.
	.D    (dfi_p0_address[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_2 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_2(
	// Inputs.
	.D    (dfi_p0_address[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_3 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_3(
	// Inputs.
	.D    (dfi_p0_address[2]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[2])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_4 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_4(
	// Inputs.
	.D    (dfi_p0_address[3]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[3])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_5 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_5(
	// Inputs.
	.D    (dfi_p0_address[4]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[4])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_6 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_6(
	// Inputs.
	.D    (dfi_p0_address[5]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[5])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_7 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_7(
	// Inputs.
	.D    (dfi_p0_address[6]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[6])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_8 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_8(
	// Inputs.
	.D    (dfi_p0_address[7]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[7])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_9 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_9(
	// Inputs.
	.D    (dfi_p0_address[8]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[8])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_10 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_10(
	// Inputs.
	.D    (dfi_p0_address[9]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[9])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_11 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_11(
	// Inputs.
	.D    (dfi_p0_address[10]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[10])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_12 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_12(
	// Inputs.
	.D    (dfi_p0_address[11]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[11])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_13 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_13(
	// Inputs.
	.D    (dfi_p0_address[12]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_a[12])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_14 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_14(
	// Inputs.
	.D    (dfi_p0_bank[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ba[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_15 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_15(
	// Inputs.
	.D    (dfi_p0_bank[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ba[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_16 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_16(
	// Inputs.
	.D    (dfi_p0_ras_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_ras_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_17 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_17(
	// Inputs.
	.D    (dfi_p0_cas_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_cas_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_18 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_18(
	// Inputs.
	.D    (dfi_p0_we_n),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_we_n)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_19 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_19(
	// Inputs.
	.D    (dfi_p0_cke),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_cke)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_20 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_20(
	// Inputs.
	.D    ((dfi_p0_wrdata_en & dfi_p0_wrdata_mask[0])),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_dm[0])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_21 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_21(
	// Inputs.
	.D    ((dfi_p0_wrdata_en & dfi_p0_wrdata_mask[1])),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (sdram_dm[1])
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_22 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_22(
	// Inputs.
	.D    (dfi_p0_wrdata[0]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate0__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX(
	// Inputs.
	.D    (inferedsdrtristate0__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[0])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO (
	// Inputs.
	.B (sdram_dq[0]),
	.I (inferedsdrtristate0__o),
	.T ((~inferedsdrtristate0_oe)),

	// Outputs.
	.O (inferedsdrtristate0__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_23 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_23(
	// Inputs.
	.D    (dfi_p0_wrdata[1]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate1__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_1 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_1(
	// Inputs.
	.D    (inferedsdrtristate1__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[1])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_1 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_1 (
	// Inputs.
	.B (sdram_dq[1]),
	.I (inferedsdrtristate1__o),
	.T ((~inferedsdrtristate1_oe)),

	// Outputs.
	.O (inferedsdrtristate1__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_24 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_24(
	// Inputs.
	.D    (dfi_p0_wrdata[2]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate2__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_2 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_2(
	// Inputs.
	.D    (inferedsdrtristate2__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[2])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_2 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_2 (
	// Inputs.
	.B (sdram_dq[2]),
	.I (inferedsdrtristate2__o),
	.T ((~inferedsdrtristate2_oe)),

	// Outputs.
	.O (inferedsdrtristate2__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_25 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_25(
	// Inputs.
	.D    (dfi_p0_wrdata[3]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate3__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_3 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_3(
	// Inputs.
	.D    (inferedsdrtristate3__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[3])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_3 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_3 (
	// Inputs.
	.B (sdram_dq[3]),
	.I (inferedsdrtristate3__o),
	.T ((~inferedsdrtristate3_oe)),

	// Outputs.
	.O (inferedsdrtristate3__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_26 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_26(
	// Inputs.
	.D    (dfi_p0_wrdata[4]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate4__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_4 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_4(
	// Inputs.
	.D    (inferedsdrtristate4__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[4])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_4 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_4 (
	// Inputs.
	.B (sdram_dq[4]),
	.I (inferedsdrtristate4__o),
	.T ((~inferedsdrtristate4_oe)),

	// Outputs.
	.O (inferedsdrtristate4__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_27 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_27(
	// Inputs.
	.D    (dfi_p0_wrdata[5]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate5__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_5 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_5(
	// Inputs.
	.D    (inferedsdrtristate5__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[5])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_5 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_5 (
	// Inputs.
	.B (sdram_dq[5]),
	.I (inferedsdrtristate5__o),
	.T ((~inferedsdrtristate5_oe)),

	// Outputs.
	.O (inferedsdrtristate5__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_28 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_28(
	// Inputs.
	.D    (dfi_p0_wrdata[6]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate6__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_6 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_6(
	// Inputs.
	.D    (inferedsdrtristate6__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[6])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_6 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_6 (
	// Inputs.
	.B (sdram_dq[6]),
	.I (inferedsdrtristate6__o),
	.T ((~inferedsdrtristate6_oe)),

	// Outputs.
	.O (inferedsdrtristate6__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_29 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_29(
	// Inputs.
	.D    (dfi_p0_wrdata[7]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate7__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_7 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_7(
	// Inputs.
	.D    (inferedsdrtristate7__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[7])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_7 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_7 (
	// Inputs.
	.B (sdram_dq[7]),
	.I (inferedsdrtristate7__o),
	.T ((~inferedsdrtristate7_oe)),

	// Outputs.
	.O (inferedsdrtristate7__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_30 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_30(
	// Inputs.
	.D    (dfi_p0_wrdata[8]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate8__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_8 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_8(
	// Inputs.
	.D    (inferedsdrtristate8__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[8])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_8 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_8 (
	// Inputs.
	.B (sdram_dq[8]),
	.I (inferedsdrtristate8__o),
	.T ((~inferedsdrtristate8_oe)),

	// Outputs.
	.O (inferedsdrtristate8__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_31 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_31(
	// Inputs.
	.D    (dfi_p0_wrdata[9]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate9__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_9 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_9(
	// Inputs.
	.D    (inferedsdrtristate9__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[9])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_9 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_9 (
	// Inputs.
	.B (sdram_dq[9]),
	.I (inferedsdrtristate9__o),
	.T ((~inferedsdrtristate9_oe)),

	// Outputs.
	.O (inferedsdrtristate9__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_32 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_32(
	// Inputs.
	.D    (dfi_p0_wrdata[10]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate10__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_10 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_10(
	// Inputs.
	.D    (inferedsdrtristate10__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[10])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_10 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_10 (
	// Inputs.
	.B (sdram_dq[10]),
	.I (inferedsdrtristate10__o),
	.T ((~inferedsdrtristate10_oe)),

	// Outputs.
	.O (inferedsdrtristate10__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_33 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_33(
	// Inputs.
	.D    (dfi_p0_wrdata[11]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate11__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_11 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_11(
	// Inputs.
	.D    (inferedsdrtristate11__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[11])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_11 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_11 (
	// Inputs.
	.B (sdram_dq[11]),
	.I (inferedsdrtristate11__o),
	.T ((~inferedsdrtristate11_oe)),

	// Outputs.
	.O (inferedsdrtristate11__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_34 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_34(
	// Inputs.
	.D    (dfi_p0_wrdata[12]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate12__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_12 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_12(
	// Inputs.
	.D    (inferedsdrtristate12__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[12])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_12 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_12 (
	// Inputs.
	.B (sdram_dq[12]),
	.I (inferedsdrtristate12__o),
	.T ((~inferedsdrtristate12_oe)),

	// Outputs.
	.O (inferedsdrtristate12__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_35 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_35(
	// Inputs.
	.D    (dfi_p0_wrdata[13]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate13__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_13 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_13(
	// Inputs.
	.D    (inferedsdrtristate13__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[13])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_13 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_13 (
	// Inputs.
	.B (sdram_dq[13]),
	.I (inferedsdrtristate13__o),
	.T ((~inferedsdrtristate13_oe)),

	// Outputs.
	.O (inferedsdrtristate13__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_36 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_36(
	// Inputs.
	.D    (dfi_p0_wrdata[14]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate14__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_14 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_14(
	// Inputs.
	.D    (inferedsdrtristate14__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[14])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_14 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_14 (
	// Inputs.
	.B (sdram_dq[14]),
	.I (inferedsdrtristate14__o),
	.T ((~inferedsdrtristate14_oe)),

	// Outputs.
	.O (inferedsdrtristate14__i)
);

//------------------------------------------------------------------------------
// Instance OFS1P3BX_37 of OFS1P3BX Module.
//------------------------------------------------------------------------------
OFS1P3BX OFS1P3BX_37(
	// Inputs.
	.D    (dfi_p0_wrdata[15]),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (inferedsdrtristate15__o)
);

//------------------------------------------------------------------------------
// Instance IFS1P3BX_15 of IFS1P3BX Module.
//------------------------------------------------------------------------------
IFS1P3BX IFS1P3BX_15(
	// Inputs.
	.D    (inferedsdrtristate15__i),
	.PD   (1'd0),
	.SCLK (sys_clk),
	.SP   (1'd1),

	// Outputs.
	.Q    (dfi_p0_rddata[15])
);

//------------------------------------------------------------------------------
// Instance TRELLIS_IO_15 of TRELLIS_IO Module.
//------------------------------------------------------------------------------
TRELLIS_IO #(
	// Parameters.
	.DIR ("BIDIR")
) TRELLIS_IO_15 (
	// Inputs.
	.B (sdram_dq[15]),
	.I (inferedsdrtristate15__o),
	.T ((~inferedsdrtristate15_oe)),

	// Outputs.
	.O (inferedsdrtristate15__i)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-04-12 23:37:54.
//------------------------------------------------------------------------------
