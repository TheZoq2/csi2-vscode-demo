(import wal_util)

(defun onStateChange (s signame time old new)
    (do
        (set [oldFmt (call wal_util.translate s signame old)])
        (set [newFmt (call wal_util.translate s signame new)])
        (print "@" time ": " oldFmt " => " newFmt "")))

(load "../build/axi_ram/axi_ram.vcd" t)

(set (s (call wal_util.init "proj::test::axi_read_test::read_harness" "../build/state.ron")))

(alias clk read_harness.clk)
(alias axi read_harness.rst)

;; Q: Is there a way to do this non-manually?
(set [state_sig "axi_single_read_0.state"])
(alias state read_harness.axi_single_read_0.state)

(set [prev None])
(set [newCount 0])
(set [prevCout 0])

(whenever (&& clk (! rst))
    (if (! (= prev state))
        (do
            (set [prev state])
            (onStateChange s state_sig INDEX prev state)
            (inc newCount))
        (inc prevCount)))


