use lib::axi::AxiAw;
use lib::axi::AxiW;
use lib::axi::AxiB;
use lib::axi::AxiAr;
use lib::axi::AxiR;
use lib::axi::AxiBurst;
use lib::axi::AxiPort;
use lib::axi::axi_unused;

entity harness(
    clk: clock,
    rst: bool,

    #[no_mangle] awvalid: &mut bool,
    #[no_mangle] awready: &bool,
    #[no_mangle] awaddr: &mut int<25>,
    #[no_mangle] awburst: &mut AxiBurst,
    #[no_mangle] awlen: &mut int<8>,
    #[no_mangle] awsize: &mut int<3>,
    #[no_mangle] awid: &mut int<8>,

    #[no_mangle] wvalid: &mut bool,
    #[no_mangle] wready: &bool,
    #[no_mangle] wlast: &mut bool,
    #[no_mangle] wstrb: &mut int<2>,
    #[no_mangle] wdata: &mut int<16>,

    #[no_mangle] bvalid: &bool,
    #[no_mangle] bready: &mut bool,
    #[no_mangle] bresp: &int<2>,
    #[no_mangle] bid: &int<8>,

    #[no_mangle] arvalid: &mut bool,
    #[no_mangle] arready: &bool,
    #[no_mangle] araddr: &mut int<25>,
    #[no_mangle] arburst: &mut AxiBurst,
    #[no_mangle] arlen: &mut int<8>,
    #[no_mangle] arsize: &mut int<3>,
    #[no_mangle] arid: &mut int<8>,

    #[no_mangle] rvalid: &bool,
    #[no_mangle] rready: &mut bool,
    #[no_mangle] rlast: &bool,
    #[no_mangle] rresp: &int<2>,
    #[no_mangle] rdata: &int<16>,
    #[no_mangle] rid: &int<8>,
) -> bool {
    let aw = AxiAw$(
        valid: awvalid,
        ready: awready,
        addr: awaddr,
        burst: awburst,
        len: awlen,
        size: awsize,
        id: awid,
    );

    let w = AxiW $(
        valid: wvalid,
        ready: wready,
        last: wlast,
        strb: wstrb,
        data: wdata,
    );

    let b = AxiB$(
        valid: bvalid,
        ready: bready,
        resp: bresp,
        id: bid,
    );

    let ar = AxiAr$(
        valid: arvalid,
        ready: arready,
        addr: araddr,
        burst: arburst,
        len: arlen,
        size: arsize,
        id: arid,
    );

    let r = AxiR$(
        valid: rvalid,
        ready: rready,
        last: rlast,
        resp: rresp,
        data: rdata,
        id: rid,
    );

    let p = AxiPort$(
        aw,
        w,
        b,
        ar,
        r
    );

    let _ = inst axi_unused(p);

    true
}
